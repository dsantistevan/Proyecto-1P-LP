
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,2,3,33,119,164,],[1,23,24,70,151,166,]),'sentencia':([0,2,3,13,14,15,33,108,119,164,],[2,2,2,34,34,34,2,34,2,2,]),'function':([0,2,3,33,119,164,],[3,3,3,3,3,3,]),'asignacion':([0,2,3,13,14,15,33,108,119,164,],[4,4,4,4,4,4,4,4,4,4,]),'estructuraControl':([0,2,3,13,14,15,33,108,119,164,],[5,5,5,5,5,5,5,5,5,5,]),'bucles':([0,2,3,13,14,15,33,108,119,164,],[6,6,6,6,6,6,6,6,6,6,]),'llamada':([0,2,3,13,14,15,26,27,28,31,33,38,41,47,68,80,81,99,100,108,119,153,164,],[7,7,7,7,7,7,46,46,46,46,7,46,46,46,46,46,46,46,46,7,7,46,7,]),'declaracion':([0,2,3,13,14,15,33,108,119,164,],[8,8,8,8,8,8,8,8,8,8,]),'declarador':([0,2,3,13,14,15,33,108,119,164,],[11,11,11,11,11,11,11,11,11,11,]),'while':([0,2,3,13,14,15,33,108,119,164,],[14,14,14,14,14,14,14,14,14,14,]),'for':([0,2,3,13,14,15,33,108,119,164,],[15,15,15,15,15,15,15,15,15,15,]),'instrucciones':([13,14,15,108,],[32,36,37,135,]),'expresion':([26,27,28,31,38,41,47,68,80,81,99,100,153,],[45,57,60,69,71,75,95,107,121,122,60,60,163,]),'valor':([26,27,28,31,38,41,47,55,68,80,81,99,100,153,],[48,48,48,48,48,48,48,96,48,48,48,48,48,48,]),'number':([26,27,28,31,38,41,47,55,68,80,81,99,100,153,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'args':([28,99,100,],[58,124,125,]),'params':([39,40,43,112,],[72,74,77,136,]),'operadoresMat':([45,57,60,69,71,75,95,107,121,122,163,],[80,80,80,80,80,80,80,80,80,80,80,]),'operadoresLog':([45,57,60,69,71,75,95,107,121,122,163,],[81,81,81,81,81,81,81,81,81,81,81,]),'instruccionesF':([78,117,],[118,150,]),'dato':([113,120,],[138,154,]),'retorno':([119,151,164,166,],[152,161,167,168,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> sentencia','cuerpo',1,'p_cuerpo','sintactico.py',8),
  ('cuerpo -> function','cuerpo',1,'p_cuerpo_funcion_sola','sintactico.py',12),
  ('cuerpo -> sentencia cuerpo','cuerpo',2,'p_cuerpoR','sintactico.py',16),
  ('cuerpo -> function cuerpo','cuerpo',2,'p_cuerpo_funcion','sintactico.py',20),
  ('sentencia -> asignacion','sentencia',1,'p_sentencia','sintactico.py',25),
  ('sentencia -> estructuraControl','sentencia',1,'p_sentencia','sintactico.py',26),
  ('sentencia -> bucles','sentencia',1,'p_sentencia','sintactico.py',27),
  ('sentencia -> llamada','sentencia',1,'p_sentencia','sintactico.py',28),
  ('sentencia -> declaracion','sentencia',1,'p_sentencia','sintactico.py',29),
  ('instrucciones -> LCBRACKET cuerpo RCBRACKET','instrucciones',3,'p_instrucciones','sintactico.py',33),
  ('instrucciones -> sentencia','instrucciones',1,'p_instrucciones','sintactico.py',34),
  ('instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET','instruccionesF',4,'p_instrucciones_funcion','sintactico.py',37),
  ('instruccionesF -> LCBRACKET retorno RCBRACKET','instruccionesF',3,'p_instrucciones_funcion_retorno','sintactico.py',40),
  ('instruccionesF -> : dato LCBRACKET cuerpo retorno RCBRACKET','instruccionesF',6,'p_instrucciones_funcion_dato','sintactico.py',44),
  ('instruccionesF -> : dato LCBRACKET retorno RCBRACKET','instruccionesF',5,'p_instrucciones_funcion_retorno_dato','sintactico.py',48),
  ('retorno -> RETURN expresion','retorno',2,'p_retorno','sintactico.py',51),
  ('estructuraControl -> IF LPAREN expresion RPAREN instrucciones','estructuraControl',5,'p_estructuraControlIf','sintactico.py',56),
  ('estructuraControl -> ELSE instrucciones','estructuraControl',2,'p_estructuraControlElse','sintactico.py',59),
  ('bucles -> while instrucciones','bucles',2,'p_bucles','sintactico.py',62),
  ('bucles -> for instrucciones','bucles',2,'p_bucles','sintactico.py',63),
  ('while -> WHILE LPAREN expresion RPAREN','while',4,'p_while','sintactico.py',68),
  ('for -> FOR LPAREN ID IN ID RPAREN','for',6,'p_for','sintactico.py',72),
  ('function -> FUNCTION ID LPAREN params RPAREN instruccionesF','function',6,'p_function','sintactico.py',77),
  ('function -> FUNCTION ID LPAREN RPAREN instruccionesF','function',5,'p_function_sin_params','sintactico.py',80),
  ('llamada -> PRINTLN LPAREN expresion RPAREN','llamada',4,'p_print','sintactico.py',83),
  ('llamada -> ID LPAREN args RPAREN','llamada',4,'p_llamada_funcion','sintactico.py',88),
  ('llamada -> ID LPAREN RPAREN','llamada',3,'p_llamada_funcion_sin_params','sintactico.py',92),
  ('llamada -> ID . ID LPAREN args RPAREN','llamada',6,'p_llamada_objeto','sintactico.py',96),
  ('llamada -> ID . ID LPAREN RPAREN','llamada',5,'p_llamada_objeto_sin_params','sintactico.py',99),
  ('function -> ID LSBRACKET expresion RSBRACKET','function',4,'p_index','sintactico.py',103),
  ('dato -> INT','dato',1,'p_dato','sintactico.py',108),
  ('dato -> FLOAT','dato',1,'p_dato','sintactico.py',109),
  ('dato -> BYTE','dato',1,'p_dato','sintactico.py',110),
  ('dato -> SHORT','dato',1,'p_dato','sintactico.py',111),
  ('dato -> DOUBLE','dato',1,'p_dato','sintactico.py',112),
  ('dato -> ID','dato',1,'p_dato','sintactico.py',113),
  ('dato -> LONG','dato',1,'p_dato','sintactico.py',114),
  ('dato -> CHAR','dato',1,'p_dato','sintactico.py',115),
  ('dato -> BOOLEAN','dato',1,'p_dato','sintactico.py',116),
<<<<<<< HEAD
  ('params -> ID : dato','params',3,'p_params','sintactico.py',120),
  ('params -> params , params','params',3,'p_params2','sintactico.py',124),
  ('args -> expresion','args',1,'p_args','sintactico.py',128),
  ('args -> args , args','args',3,'p_args2','sintactico.py',132),
  ('valor -> ID','valor',1,'p_valor_id','sintactico.py',137),
  ('valor -> number','valor',1,'p_valor','sintactico.py',141),
  ('valor -> STRING','valor',1,'p_valor','sintactico.py',142),
  ('valor -> TRUE','valor',1,'p_valor_bool','sintactico.py',146),
  ('valor -> FALSE','valor',1,'p_valor_bool','sintactico.py',147),
  ('valor -> NULL','valor',1,'p_valor_null','sintactico.py',155),
  ('valor -> NOT valor','valor',2,'p_valor_negado','sintactico.py',160),
  ('declarador -> VAR','declarador',1,'p_declarador','sintactico.py',165),
  ('declarador -> VAL','declarador',1,'p_declarador','sintactico.py',166),
  ('asignacion -> ID ASSIGN expresion','asignacion',3,'p_asignacion','sintactico.py',170),
  ('asignacion -> declarador ID ASSIGN expresion','asignacion',4,'p_asignacion_declarando','sintactico.py',181),
  ('declaracion -> declarador ID','declaracion',2,'p_declaracion','sintactico.py',188),
  ('expresion -> LPAREN expresion RPAREN','expresion',3,'p_exresion','sintactico.py',194),
  ('expresion -> valor','expresion',1,'p_expesion','sintactico.py',198),
  ('expresion -> expresion operadoresMat expresion','expresion',3,'p_expresion_matematica','sintactico.py',203),
  ('expresion -> expresion operadoresLog expresion','expresion',3,'p_expresion_logica','sintactico.py',220),
  ('operadoresLog -> OR','operadoresLog',1,'p_operadores_log','sintactico.py',239),
  ('operadoresLog -> AND','operadoresLog',1,'p_operadores_log','sintactico.py',240),
  ('operadoresLog -> EQUALS','operadoresLog',1,'p_operadores_log','sintactico.py',241),
  ('operadoresLog -> NOTEQUALS','operadoresLog',1,'p_operadores_log','sintactico.py',242),
  ('operadoresLog -> GREATER','operadoresLog',1,'p_operadores_log','sintactico.py',243),
  ('operadoresLog -> LOWER','operadoresLog',1,'p_operadores_log','sintactico.py',244),
  ('operadoresLog -> GREATER ASSIGN','operadoresLog',2,'p_operadores_log','sintactico.py',245),
  ('operadoresLog -> LOWER ASSIGN','operadoresLog',2,'p_operadores_log','sintactico.py',246),
  ('operadoresMat -> MINUS','operadoresMat',1,'p_operadores_mat','sintactico.py',251),
  ('operadoresMat -> PLUS','operadoresMat',1,'p_operadores_mat','sintactico.py',252),
  ('operadoresMat -> TIMES','operadoresMat',1,'p_operadores_mat','sintactico.py',253),
  ('operadoresMat -> DIVIDE','operadoresMat',1,'p_operadores_mat','sintactico.py',254),
  ('operadoresMat -> MODULE','operadoresMat',1,'p_operadores_mat','sintactico.py',255),
  ('number -> INTV','number',1,'p_number','sintactico.py',263),
  ('number -> FLOATV','number',1,'p_number','sintactico.py',264),
=======
  ('dato -> LIST','dato',1,'p_dato','sintactico.py',117),
  ('dato -> MUTABLELIST','dato',1,'p_dato','sintactico.py',118),
  ('params -> ID : dato','params',3,'p_params','sintactico.py',122),
  ('params -> params , params','params',3,'p_params2','sintactico.py',126),
  ('args -> expresion','args',1,'p_args','sintactico.py',130),
  ('args -> args , args','args',3,'p_args2','sintactico.py',134),
  ('valor -> ID','valor',1,'p_valor_id','sintactico.py',139),
  ('valor -> number','valor',1,'p_valor','sintactico.py',143),
  ('valor -> STRING','valor',1,'p_valor','sintactico.py',144),
  ('valor -> TRUE','valor',1,'p_valor_bool','sintactico.py',148),
  ('valor -> FALSE','valor',1,'p_valor_bool','sintactico.py',149),
  ('valor -> NULL','valor',1,'p_valor_null','sintactico.py',157),
  ('valor -> NOT valor','valor',2,'p_valor_negado','sintactico.py',162),
  ('declarador -> VAR','declarador',1,'p_declarador','sintactico.py',167),
  ('declarador -> VAL','declarador',1,'p_declarador','sintactico.py',168),
  ('asignacion -> ID ASSIGN expresion','asignacion',3,'p_asignacion','sintactico.py',172),
  ('asignacion -> declarador ID ASSIGN expresion','asignacion',4,'p_asignacion_declarando','sintactico.py',183),
  ('declaracion -> declarador ID','declaracion',2,'p_declaracion','sintactico.py',190),
  ('llamada -> LISTOF LPAREN params RPAREN','llamada',4,'p_creacion_lista','sintactico.py',195),
  ('llamada -> MUTABLELISTOF LPAREN params RPAREN','llamada',4,'p_creacion_lista_mutable','sintactico.py',199),
  ('expresion -> llamada','expresion',1,'p_expresion_llamada','sintactico.py',203),
  ('expresion -> LPAREN expresion RPAREN','expresion',3,'p_exresion','sintactico.py',208),
  ('expresion -> valor','expresion',1,'p_expesion','sintactico.py',212),
  ('expresion -> expresion operadoresMat expresion','expresion',3,'p_expresion_matematica','sintactico.py',217),
  ('expresion -> expresion operadoresLog expresion','expresion',3,'p_expresion_logica','sintactico.py',234),
  ('operadoresLog -> OR','operadoresLog',1,'p_operadores_log','sintactico.py',253),
  ('operadoresLog -> AND','operadoresLog',1,'p_operadores_log','sintactico.py',254),
  ('operadoresLog -> EQUALS','operadoresLog',1,'p_operadores_log','sintactico.py',255),
  ('operadoresLog -> NOTEQUALS','operadoresLog',1,'p_operadores_log','sintactico.py',256),
  ('operadoresLog -> GREATER','operadoresLog',1,'p_operadores_log','sintactico.py',257),
  ('operadoresLog -> LOWER','operadoresLog',1,'p_operadores_log','sintactico.py',258),
  ('operadoresLog -> GREATERE','operadoresLog',1,'p_operadores_log','sintactico.py',259),
  ('operadoresLog -> LOWERE','operadoresLog',1,'p_operadores_log','sintactico.py',260),
  ('operadoresMat -> MINUS','operadoresMat',1,'p_operadores_mat','sintactico.py',265),
  ('operadoresMat -> PLUS','operadoresMat',1,'p_operadores_mat','sintactico.py',266),
  ('operadoresMat -> TIMES','operadoresMat',1,'p_operadores_mat','sintactico.py',267),
  ('operadoresMat -> DIVIDE','operadoresMat',1,'p_operadores_mat','sintactico.py',268),
  ('operadoresMat -> MODULE','operadoresMat',1,'p_operadores_mat','sintactico.py',269),
  ('number -> INTV','number',1,'p_number','sintactico.py',277),
  ('number -> FLOATV','number',1,'p_number','sintactico.py',278),
  ('llamada -> ID . LENGTH LPAREN RPAREN','llamada',5,'p_string_length','sintactico.py',282),
  ('llamada -> ID . EQUALSM LPAREN ID RPAREN','llamada',6,'p_string_equals','sintactico.py',291),
  ('llamada -> ID . EQUALSM LPAREN STRING RPAREN','llamada',6,'p_string_equals2','sintactico.py',301),
  ('llamada -> ID . COUNT LPAREN RPAREN','llamada',5,'p_list_count','sintactico.py',309),
  ('llamada -> ID . FIRST LPAREN RPAREN','llamada',5,'p_list_first','sintactico.py',317),
  ('llamada -> ID . LAST LPAREN RPAREN','llamada',5,'p_list_last','sintactico.py',325),
  ('llamada -> ID . GET LPAREN INTV RPAREN','llamada',6,'p_list_get','sintactico.py',334),
  ('llamada -> ID . GET LPAREN ID RPAREN','llamada',6,'p_list_get2','sintactico.py',342),
>>>>>>> 1da17990edf57a74b73d7f4a526b56715393e6a8
]
