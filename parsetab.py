
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOLEAN BYTE CHAR DIVIDE DOUBLE ELSE FALSE FLOAT FLOATV FOR FUNCTION GREATER ID IF INT INTV LCBRACKET LONG LOWER LPAREN LSBRACKET MINUS MODULE NOT NULL OR PLUS RCBRACKET RETURN RPAREN RSBRACKET SHORT STRING TIMES TRUE VAR WHILEcuerpo : asignacion\n                | expresionasignacion : VAR ID ASSIGN expresionexpresion : valorexpresion : expresion operadoresMat expresionexpresion : expresion operadoresLog expresionoperadoresLog : NOT\n                    | OR\n                    | ANDoperadoresMat : MINUS\n                    | PLUS\n                    | TIMES\n                    | DIVIDEexpression :  PLUS expression :  MINUS expression : termterm :  TIMES term :  DIVIDE valor : INTV\n            | IDterm : factorfactor : INTVfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'VAR':([0,],[4,]),'INTV':([0,8,9,10,11,12,13,14,15,16,20,],[7,7,7,-10,-11,-12,-13,-7,-8,-9,7,]),'ID':([0,4,8,9,10,11,12,13,14,15,16,20,],[5,17,5,5,-10,-11,-12,-13,-7,-8,-9,5,]),'$end':([1,2,3,5,6,7,18,19,21,],[0,-1,-2,-20,-4,-19,-5,-6,-3,]),'MINUS':([3,5,6,7,18,19,21,],[10,-20,-4,-19,10,10,10,]),'PLUS':([3,5,6,7,18,19,21,],[11,-20,-4,-19,11,11,11,]),'TIMES':([3,5,6,7,18,19,21,],[12,-20,-4,-19,12,12,12,]),'DIVIDE':([3,5,6,7,18,19,21,],[13,-20,-4,-19,13,13,13,]),'NOT':([3,5,6,7,18,19,21,],[14,-20,-4,-19,14,14,14,]),'OR':([3,5,6,7,18,19,21,],[15,-20,-4,-19,15,15,15,]),'AND':([3,5,6,7,18,19,21,],[16,-20,-4,-19,16,16,16,]),'ASSIGN':([17,],[20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,],[1,]),'asignacion':([0,],[2,]),'expresion':([0,8,9,20,],[3,18,19,21,]),'valor':([0,8,9,20,],[6,6,6,6,]),'operadoresMat':([3,18,19,21,],[8,8,8,8,]),'operadoresLog':([3,18,19,21,],[9,9,9,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintactico.py',4),
  ('cuerpo -> expresion','cuerpo',1,'p_cuerpo','sintactico.py',5),
  ('asignacion -> VAR ID ASSIGN expresion','asignacion',4,'p_asignacion','sintactico.py',7),
  ('expresion -> valor','expresion',1,'p_expesion','sintactico.py',9),
  ('expresion -> expresion operadoresMat expresion','expresion',3,'p_expresion_matematica','sintactico.py',11),
  ('expresion -> expresion operadoresLog expresion','expresion',3,'p_expresion_logica','sintactico.py',14),
  ('operadoresLog -> NOT','operadoresLog',1,'p_operadoresLog','sintactico.py',17),
  ('operadoresLog -> OR','operadoresLog',1,'p_operadoresLog','sintactico.py',18),
  ('operadoresLog -> AND','operadoresLog',1,'p_operadoresLog','sintactico.py',19),
  ('operadoresMat -> MINUS','operadoresMat',1,'p_operadoresMat','sintactico.py',22),
  ('operadoresMat -> PLUS','operadoresMat',1,'p_operadoresMat','sintactico.py',23),
  ('operadoresMat -> TIMES','operadoresMat',1,'p_operadoresMat','sintactico.py',24),
  ('operadoresMat -> DIVIDE','operadoresMat',1,'p_operadoresMat','sintactico.py',25),
  ('expression -> PLUS','expression',1,'p_expression_plus','sintactico.py',28),
  ('expression -> MINUS','expression',1,'p_expression_minus','sintactico.py',33),
  ('expression -> term','expression',1,'p_expression_term','sintactico.py',38),
  ('term -> TIMES','term',1,'p_term_times','sintactico.py',43),
  ('term -> DIVIDE','term',1,'p_term_div','sintactico.py',48),
  ('valor -> INTV','valor',1,'p_valor','sintactico.py',52),
  ('valor -> ID','valor',1,'p_valor','sintactico.py',53),
  ('term -> factor','term',1,'p_term_factor','sintactico.py',57),
  ('factor -> INTV','factor',1,'p_factor_num','sintactico.py',62),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','sintactico.py',67),
]
