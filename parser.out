Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> sentencia
Rule 2     cuerpo -> sentencia cuerpo
Rule 3     cuerpo -> function cuerpo
Rule 4     sentencia -> asignacion ;
Rule 5     sentencia -> estructuraControl
Rule 6     sentencia -> bucles
Rule 7     sentencia -> llamada ;
Rule 8     sentencia -> declaracion
Rule 9     instrucciones -> LCBRACKET cuerpo RCBRACKET
Rule 10    instrucciones -> sentencia
Rule 11    instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET
Rule 12    retorno -> RETURN valor ;
Rule 13    estructuraControl -> IF LPAREN expresion RPAREN instrucciones
Rule 14    estructuraControl -> ELSE instrucciones
Rule 15    bucles -> while instrucciones
Rule 16    bucles -> for instrucciones
Rule 17    while -> WHILE LPAREN expresion RPAREN
Rule 18    for -> FOR LPAREN ID IN ID RPAREN
Rule 19    function -> FUNCTION ID LPAREN params RPAREN instruccionesF
Rule 20    function -> FUNCTION ID LPAREN RPAREN instruccionesF
Rule 21    llamada -> ID LPAREN args RPAREN
Rule 22    llamada -> ID LPAREN RPAREN
Rule 23    function -> ID LSBRACKET valor RSBRACKET
Rule 24    dato -> INT
Rule 25    dato -> FLOAT
Rule 26    dato -> BYTE
Rule 27    dato -> SHORT
Rule 28    dato -> DOUBLE
Rule 29    dato -> ID
Rule 30    dato -> LONG
Rule 31    dato -> CHAR
Rule 32    dato -> BOOLEAN
Rule 33    params -> ID : dato
Rule 34    params -> params , params
Rule 35    args -> valor
Rule 36    args -> args , args
Rule 37    valor -> ID
Rule 38    valor -> number
Rule 39    valor -> STRING
Rule 40    valor -> TRUE
Rule 41    valor -> FALSE
Rule 42    valor -> NULL
Rule 43    valor -> NOT valor
Rule 44    declarador -> VAR
Rule 45    declarador -> VAL
Rule 46    asignacion -> ID ASSIGN expresion
Rule 47    asignacion -> declarador ID ASSIGN expresion
Rule 48    declaracion -> declarador ID ;
Rule 49    expresion -> LPAREN expresion RPAREN
Rule 50    expresion -> valor
Rule 51    expresion -> expresion operadoresMat expresion
Rule 52    expresion -> expresion operadoresLog expresion
Rule 53    operadoresLog -> OR
Rule 54    operadoresLog -> AND
Rule 55    operadoresLog -> EQUALS
Rule 56    operadoresLog -> NOTEQUALS
Rule 57    operadoresLog -> GREATER
Rule 58    operadoresLog -> LOWER
Rule 59    operadoresLog -> GREATER ASSIGN
Rule 60    operadoresLog -> LOWER ASSIGN
Rule 61    operadoresMat -> MINUS
Rule 62    operadoresMat -> PLUS
Rule 63    operadoresMat -> TIMES
Rule 64    operadoresMat -> DIVIDE
Rule 65    operadoresMat -> MODULE
Rule 66    number -> INTV
Rule 67    number -> FLOATV

Terminals, with rules where they appear

,                    : 34 36
:                    : 33
;                    : 4 7 12 48
AND                  : 54
ASSIGN               : 46 47 59 60
BOOLEAN              : 32
BYTE                 : 26
CHAR                 : 31
DIVIDE               : 64
DOUBLE               : 28
ELSE                 : 14
EQUALS               : 55
FALSE                : 41
FLOAT                : 25
FLOATV               : 67
FOR                  : 18
FUNCTION             : 19 20
GREATER              : 57 59
ID                   : 18 18 19 20 21 22 23 29 33 37 46 47 48
IF                   : 13
IN                   : 18
INT                  : 24
INTV                 : 66
LCBRACKET            : 9 11
LONG                 : 30
LOWER                : 58 60
LPAREN               : 13 17 18 19 20 21 22 49
LSBRACKET            : 23
MINUS                : 61
MODULE               : 65
NOT                  : 43
NOTEQUALS            : 56
NULL                 : 42
OR                   : 53
PLUS                 : 62
RCBRACKET            : 9 11
RETURN               : 12
RPAREN               : 13 17 18 19 20 21 22 49
RSBRACKET            : 23
SHORT                : 27
STRING               : 39
TIMES                : 63
TRUE                 : 40
VAL                  : 45
VAR                  : 44
WHILE                : 17
error                : 

Nonterminals, with rules where they appear

args                 : 21 36 36
asignacion           : 4
bucles               : 6
cuerpo               : 2 3 9 11 0
dato                 : 33
declaracion          : 8
declarador           : 47 48
estructuraControl    : 5
expresion            : 13 17 46 47 49 51 51 52 52
for                  : 16
function             : 3
instrucciones        : 13 14 15 16
instruccionesF       : 19 20
llamada              : 7
number               : 38
operadoresLog        : 52
operadoresMat        : 51
params               : 19 34 34
retorno              : 11
sentencia            : 1 2 10
valor                : 12 23 35 43 50
while                : 15

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . sentencia cuerpo
    (3) cuerpo -> . function cuerpo
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . estructuraControl
    (6) sentencia -> . bucles
    (7) sentencia -> . llamada ;
    (8) sentencia -> . declaracion
    (19) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (20) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (23) function -> . ID LSBRACKET valor RSBRACKET
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (48) declaracion -> . declarador ID ;
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN

    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    VAR             shift and go to state 16
    VAL             shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19

    cuerpo                         shift and go to state 1
    sentencia                      shift and go to state 2
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> sentencia .
    (2) cuerpo -> sentencia . cuerpo
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . sentencia cuerpo
    (3) cuerpo -> . function cuerpo
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . estructuraControl
    (6) sentencia -> . bucles
    (7) sentencia -> . llamada ;
    (8) sentencia -> . declaracion
    (19) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (20) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (23) function -> . ID LSBRACKET valor RSBRACKET
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (48) declaracion -> . declarador ID ;
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN

    $end            reduce using rule 1 (cuerpo -> sentencia .)
    RCBRACKET       reduce using rule 1 (cuerpo -> sentencia .)
    RETURN          reduce using rule 1 (cuerpo -> sentencia .)
    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    VAR             shift and go to state 16
    VAL             shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19

    sentencia                      shift and go to state 2
    cuerpo                         shift and go to state 20
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 3

    (3) cuerpo -> function . cuerpo
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . sentencia cuerpo
    (3) cuerpo -> . function cuerpo
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . estructuraControl
    (6) sentencia -> . bucles
    (7) sentencia -> . llamada ;
    (8) sentencia -> . declaracion
    (19) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (20) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (23) function -> . ID LSBRACKET valor RSBRACKET
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (48) declaracion -> . declarador ID ;
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN

    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    VAR             shift and go to state 16
    VAL             shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19

    function                       shift and go to state 3
    cuerpo                         shift and go to state 21
    sentencia                      shift and go to state 2
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 4

    (4) sentencia -> asignacion . ;

    ;               shift and go to state 22


state 5

    (5) sentencia -> estructuraControl .

    FUNCTION        reduce using rule 5 (sentencia -> estructuraControl .)
    ID              reduce using rule 5 (sentencia -> estructuraControl .)
    IF              reduce using rule 5 (sentencia -> estructuraControl .)
    ELSE            reduce using rule 5 (sentencia -> estructuraControl .)
    VAR             reduce using rule 5 (sentencia -> estructuraControl .)
    VAL             reduce using rule 5 (sentencia -> estructuraControl .)
    WHILE           reduce using rule 5 (sentencia -> estructuraControl .)
    FOR             reduce using rule 5 (sentencia -> estructuraControl .)
    $end            reduce using rule 5 (sentencia -> estructuraControl .)
    RCBRACKET       reduce using rule 5 (sentencia -> estructuraControl .)
    RETURN          reduce using rule 5 (sentencia -> estructuraControl .)


state 6

    (6) sentencia -> bucles .

    FUNCTION        reduce using rule 6 (sentencia -> bucles .)
    ID              reduce using rule 6 (sentencia -> bucles .)
    IF              reduce using rule 6 (sentencia -> bucles .)
    ELSE            reduce using rule 6 (sentencia -> bucles .)
    VAR             reduce using rule 6 (sentencia -> bucles .)
    VAL             reduce using rule 6 (sentencia -> bucles .)
    WHILE           reduce using rule 6 (sentencia -> bucles .)
    FOR             reduce using rule 6 (sentencia -> bucles .)
    $end            reduce using rule 6 (sentencia -> bucles .)
    RCBRACKET       reduce using rule 6 (sentencia -> bucles .)
    RETURN          reduce using rule 6 (sentencia -> bucles .)


state 7

    (7) sentencia -> llamada . ;

    ;               shift and go to state 23


state 8

    (8) sentencia -> declaracion .

    FUNCTION        reduce using rule 8 (sentencia -> declaracion .)
    ID              reduce using rule 8 (sentencia -> declaracion .)
    IF              reduce using rule 8 (sentencia -> declaracion .)
    ELSE            reduce using rule 8 (sentencia -> declaracion .)
    VAR             reduce using rule 8 (sentencia -> declaracion .)
    VAL             reduce using rule 8 (sentencia -> declaracion .)
    WHILE           reduce using rule 8 (sentencia -> declaracion .)
    FOR             reduce using rule 8 (sentencia -> declaracion .)
    $end            reduce using rule 8 (sentencia -> declaracion .)
    RCBRACKET       reduce using rule 8 (sentencia -> declaracion .)
    RETURN          reduce using rule 8 (sentencia -> declaracion .)


state 9

    (19) function -> FUNCTION . ID LPAREN params RPAREN instruccionesF
    (20) function -> FUNCTION . ID LPAREN RPAREN instruccionesF

    ID              shift and go to state 24


state 10

    (23) function -> ID . LSBRACKET valor RSBRACKET
    (46) asignacion -> ID . ASSIGN expresion
    (21) llamada -> ID . LPAREN args RPAREN
    (22) llamada -> ID . LPAREN RPAREN

    LSBRACKET       shift and go to state 25
    ASSIGN          shift and go to state 26
    LPAREN          shift and go to state 27


state 11

    (47) asignacion -> declarador . ID ASSIGN expresion
    (48) declaracion -> declarador . ID ;

    ID              shift and go to state 28


state 12

    (13) estructuraControl -> IF . LPAREN expresion RPAREN instrucciones

    LPAREN          shift and go to state 29


state 13

    (14) estructuraControl -> ELSE . instrucciones
    (9) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (10) instrucciones -> . sentencia
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . estructuraControl
    (6) sentencia -> . bucles
    (7) sentencia -> . llamada ;
    (8) sentencia -> . declaracion
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (48) declaracion -> . declarador ID ;
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN

    LCBRACKET       shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    VAR             shift and go to state 16
    VAL             shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19

    instrucciones                  shift and go to state 30
    sentencia                      shift and go to state 32
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 14

    (15) bucles -> while . instrucciones
    (9) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (10) instrucciones -> . sentencia
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . estructuraControl
    (6) sentencia -> . bucles
    (7) sentencia -> . llamada ;
    (8) sentencia -> . declaracion
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (48) declaracion -> . declarador ID ;
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN

    LCBRACKET       shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    VAR             shift and go to state 16
    VAL             shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19

    while                          shift and go to state 14
    instrucciones                  shift and go to state 34
    sentencia                      shift and go to state 32
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    for                            shift and go to state 15

state 15

    (16) bucles -> for . instrucciones
    (9) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (10) instrucciones -> . sentencia
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . estructuraControl
    (6) sentencia -> . bucles
    (7) sentencia -> . llamada ;
    (8) sentencia -> . declaracion
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (48) declaracion -> . declarador ID ;
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN

    LCBRACKET       shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    VAR             shift and go to state 16
    VAL             shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19

    for                            shift and go to state 15
    instrucciones                  shift and go to state 35
    sentencia                      shift and go to state 32
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14

state 16

    (44) declarador -> VAR .

    ID              reduce using rule 44 (declarador -> VAR .)


state 17

    (45) declarador -> VAL .

    ID              reduce using rule 45 (declarador -> VAL .)


state 18

    (17) while -> WHILE . LPAREN expresion RPAREN

    LPAREN          shift and go to state 36


state 19

    (18) for -> FOR . LPAREN ID IN ID RPAREN

    LPAREN          shift and go to state 37


state 20

    (2) cuerpo -> sentencia cuerpo .

    $end            reduce using rule 2 (cuerpo -> sentencia cuerpo .)
    RCBRACKET       reduce using rule 2 (cuerpo -> sentencia cuerpo .)
    RETURN          reduce using rule 2 (cuerpo -> sentencia cuerpo .)


state 21

    (3) cuerpo -> function cuerpo .

    $end            reduce using rule 3 (cuerpo -> function cuerpo .)
    RCBRACKET       reduce using rule 3 (cuerpo -> function cuerpo .)
    RETURN          reduce using rule 3 (cuerpo -> function cuerpo .)


state 22

    (4) sentencia -> asignacion ; .

    FUNCTION        reduce using rule 4 (sentencia -> asignacion ; .)
    ID              reduce using rule 4 (sentencia -> asignacion ; .)
    IF              reduce using rule 4 (sentencia -> asignacion ; .)
    ELSE            reduce using rule 4 (sentencia -> asignacion ; .)
    VAR             reduce using rule 4 (sentencia -> asignacion ; .)
    VAL             reduce using rule 4 (sentencia -> asignacion ; .)
    WHILE           reduce using rule 4 (sentencia -> asignacion ; .)
    FOR             reduce using rule 4 (sentencia -> asignacion ; .)
    $end            reduce using rule 4 (sentencia -> asignacion ; .)
    RCBRACKET       reduce using rule 4 (sentencia -> asignacion ; .)
    RETURN          reduce using rule 4 (sentencia -> asignacion ; .)


state 23

    (7) sentencia -> llamada ; .

    FUNCTION        reduce using rule 7 (sentencia -> llamada ; .)
    ID              reduce using rule 7 (sentencia -> llamada ; .)
    IF              reduce using rule 7 (sentencia -> llamada ; .)
    ELSE            reduce using rule 7 (sentencia -> llamada ; .)
    VAR             reduce using rule 7 (sentencia -> llamada ; .)
    VAL             reduce using rule 7 (sentencia -> llamada ; .)
    WHILE           reduce using rule 7 (sentencia -> llamada ; .)
    FOR             reduce using rule 7 (sentencia -> llamada ; .)
    $end            reduce using rule 7 (sentencia -> llamada ; .)
    RCBRACKET       reduce using rule 7 (sentencia -> llamada ; .)
    RETURN          reduce using rule 7 (sentencia -> llamada ; .)


state 24

    (19) function -> FUNCTION ID . LPAREN params RPAREN instruccionesF
    (20) function -> FUNCTION ID . LPAREN RPAREN instruccionesF

    LPAREN          shift and go to state 38


state 25

    (23) function -> ID LSBRACKET . valor RSBRACKET
    (37) valor -> . ID
    (38) valor -> . number
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (66) number -> . INTV
    (67) number -> . FLOATV

    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    valor                          shift and go to state 40
    number                         shift and go to state 41

state 26

    (46) asignacion -> ID ASSIGN . expresion
    (49) expresion -> . LPAREN expresion RPAREN
    (50) expresion -> . valor
    (51) expresion -> . expresion operadoresMat expresion
    (52) expresion -> . expresion operadoresLog expresion
    (37) valor -> . ID
    (38) valor -> . number
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (66) number -> . INTV
    (67) number -> . FLOATV

    LPAREN          shift and go to state 50
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    expresion                      shift and go to state 49
    valor                          shift and go to state 51
    number                         shift and go to state 41

state 27

    (21) llamada -> ID LPAREN . args RPAREN
    (22) llamada -> ID LPAREN . RPAREN
    (35) args -> . valor
    (36) args -> . args , args
    (37) valor -> . ID
    (38) valor -> . number
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (66) number -> . INTV
    (67) number -> . FLOATV

    RPAREN          shift and go to state 53
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    args                           shift and go to state 52
    valor                          shift and go to state 54
    number                         shift and go to state 41

state 28

    (47) asignacion -> declarador ID . ASSIGN expresion
    (48) declaracion -> declarador ID . ;

    ASSIGN          shift and go to state 55
    ;               shift and go to state 56


state 29

    (13) estructuraControl -> IF LPAREN . expresion RPAREN instrucciones
    (49) expresion -> . LPAREN expresion RPAREN
    (50) expresion -> . valor
    (51) expresion -> . expresion operadoresMat expresion
    (52) expresion -> . expresion operadoresLog expresion
    (37) valor -> . ID
    (38) valor -> . number
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (66) number -> . INTV
    (67) number -> . FLOATV

    LPAREN          shift and go to state 50
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    expresion                      shift and go to state 57
    valor                          shift and go to state 51
    number                         shift and go to state 41

state 30

    (14) estructuraControl -> ELSE instrucciones .

    FUNCTION        reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    ID              reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    IF              reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    ELSE            reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    VAR             reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    VAL             reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    WHILE           reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    FOR             reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    $end            reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    RCBRACKET       reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    RETURN          reduce using rule 14 (estructuraControl -> ELSE instrucciones .)


state 31

    (9) instrucciones -> LCBRACKET . cuerpo RCBRACKET
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . sentencia cuerpo
    (3) cuerpo -> . function cuerpo
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . estructuraControl
    (6) sentencia -> . bucles
    (7) sentencia -> . llamada ;
    (8) sentencia -> . declaracion
    (19) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (20) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (23) function -> . ID LSBRACKET valor RSBRACKET
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (48) declaracion -> . declarador ID ;
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN

    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    VAR             shift and go to state 16
    VAL             shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19

    cuerpo                         shift and go to state 58
    sentencia                      shift and go to state 2
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 32

    (10) instrucciones -> sentencia .

    FUNCTION        reduce using rule 10 (instrucciones -> sentencia .)
    ID              reduce using rule 10 (instrucciones -> sentencia .)
    IF              reduce using rule 10 (instrucciones -> sentencia .)
    ELSE            reduce using rule 10 (instrucciones -> sentencia .)
    VAR             reduce using rule 10 (instrucciones -> sentencia .)
    VAL             reduce using rule 10 (instrucciones -> sentencia .)
    WHILE           reduce using rule 10 (instrucciones -> sentencia .)
    FOR             reduce using rule 10 (instrucciones -> sentencia .)
    $end            reduce using rule 10 (instrucciones -> sentencia .)
    RCBRACKET       reduce using rule 10 (instrucciones -> sentencia .)
    RETURN          reduce using rule 10 (instrucciones -> sentencia .)


state 33

    (46) asignacion -> ID . ASSIGN expresion
    (21) llamada -> ID . LPAREN args RPAREN
    (22) llamada -> ID . LPAREN RPAREN

    ASSIGN          shift and go to state 26
    LPAREN          shift and go to state 27


state 34

    (15) bucles -> while instrucciones .

    FUNCTION        reduce using rule 15 (bucles -> while instrucciones .)
    ID              reduce using rule 15 (bucles -> while instrucciones .)
    IF              reduce using rule 15 (bucles -> while instrucciones .)
    ELSE            reduce using rule 15 (bucles -> while instrucciones .)
    VAR             reduce using rule 15 (bucles -> while instrucciones .)
    VAL             reduce using rule 15 (bucles -> while instrucciones .)
    WHILE           reduce using rule 15 (bucles -> while instrucciones .)
    FOR             reduce using rule 15 (bucles -> while instrucciones .)
    $end            reduce using rule 15 (bucles -> while instrucciones .)
    RCBRACKET       reduce using rule 15 (bucles -> while instrucciones .)
    RETURN          reduce using rule 15 (bucles -> while instrucciones .)


state 35

    (16) bucles -> for instrucciones .

    FUNCTION        reduce using rule 16 (bucles -> for instrucciones .)
    ID              reduce using rule 16 (bucles -> for instrucciones .)
    IF              reduce using rule 16 (bucles -> for instrucciones .)
    ELSE            reduce using rule 16 (bucles -> for instrucciones .)
    VAR             reduce using rule 16 (bucles -> for instrucciones .)
    VAL             reduce using rule 16 (bucles -> for instrucciones .)
    WHILE           reduce using rule 16 (bucles -> for instrucciones .)
    FOR             reduce using rule 16 (bucles -> for instrucciones .)
    $end            reduce using rule 16 (bucles -> for instrucciones .)
    RCBRACKET       reduce using rule 16 (bucles -> for instrucciones .)
    RETURN          reduce using rule 16 (bucles -> for instrucciones .)


state 36

    (17) while -> WHILE LPAREN . expresion RPAREN
    (49) expresion -> . LPAREN expresion RPAREN
    (50) expresion -> . valor
    (51) expresion -> . expresion operadoresMat expresion
    (52) expresion -> . expresion operadoresLog expresion
    (37) valor -> . ID
    (38) valor -> . number
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (66) number -> . INTV
    (67) number -> . FLOATV

    LPAREN          shift and go to state 50
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    expresion                      shift and go to state 59
    valor                          shift and go to state 51
    number                         shift and go to state 41

state 37

    (18) for -> FOR LPAREN . ID IN ID RPAREN

    ID              shift and go to state 60


state 38

    (19) function -> FUNCTION ID LPAREN . params RPAREN instruccionesF
    (20) function -> FUNCTION ID LPAREN . RPAREN instruccionesF
    (33) params -> . ID : dato
    (34) params -> . params , params

    RPAREN          shift and go to state 63
    ID              shift and go to state 61

    params                         shift and go to state 62

state 39

    (37) valor -> ID .

    RSBRACKET       reduce using rule 37 (valor -> ID .)
    MINUS           reduce using rule 37 (valor -> ID .)
    PLUS            reduce using rule 37 (valor -> ID .)
    TIMES           reduce using rule 37 (valor -> ID .)
    DIVIDE          reduce using rule 37 (valor -> ID .)
    MODULE          reduce using rule 37 (valor -> ID .)
    OR              reduce using rule 37 (valor -> ID .)
    AND             reduce using rule 37 (valor -> ID .)
    EQUALS          reduce using rule 37 (valor -> ID .)
    NOTEQUALS       reduce using rule 37 (valor -> ID .)
    GREATER         reduce using rule 37 (valor -> ID .)
    LOWER           reduce using rule 37 (valor -> ID .)
    ;               reduce using rule 37 (valor -> ID .)
    RPAREN          reduce using rule 37 (valor -> ID .)
    ,               reduce using rule 37 (valor -> ID .)


state 40

    (23) function -> ID LSBRACKET valor . RSBRACKET

    RSBRACKET       shift and go to state 64


state 41

    (38) valor -> number .

    RSBRACKET       reduce using rule 38 (valor -> number .)
    MINUS           reduce using rule 38 (valor -> number .)
    PLUS            reduce using rule 38 (valor -> number .)
    TIMES           reduce using rule 38 (valor -> number .)
    DIVIDE          reduce using rule 38 (valor -> number .)
    MODULE          reduce using rule 38 (valor -> number .)
    OR              reduce using rule 38 (valor -> number .)
    AND             reduce using rule 38 (valor -> number .)
    EQUALS          reduce using rule 38 (valor -> number .)
    NOTEQUALS       reduce using rule 38 (valor -> number .)
    GREATER         reduce using rule 38 (valor -> number .)
    LOWER           reduce using rule 38 (valor -> number .)
    ;               reduce using rule 38 (valor -> number .)
    RPAREN          reduce using rule 38 (valor -> number .)
    ,               reduce using rule 38 (valor -> number .)


state 42

    (39) valor -> STRING .

    RSBRACKET       reduce using rule 39 (valor -> STRING .)
    MINUS           reduce using rule 39 (valor -> STRING .)
    PLUS            reduce using rule 39 (valor -> STRING .)
    TIMES           reduce using rule 39 (valor -> STRING .)
    DIVIDE          reduce using rule 39 (valor -> STRING .)
    MODULE          reduce using rule 39 (valor -> STRING .)
    OR              reduce using rule 39 (valor -> STRING .)
    AND             reduce using rule 39 (valor -> STRING .)
    EQUALS          reduce using rule 39 (valor -> STRING .)
    NOTEQUALS       reduce using rule 39 (valor -> STRING .)
    GREATER         reduce using rule 39 (valor -> STRING .)
    LOWER           reduce using rule 39 (valor -> STRING .)
    ;               reduce using rule 39 (valor -> STRING .)
    RPAREN          reduce using rule 39 (valor -> STRING .)
    ,               reduce using rule 39 (valor -> STRING .)


state 43

    (40) valor -> TRUE .

    RSBRACKET       reduce using rule 40 (valor -> TRUE .)
    MINUS           reduce using rule 40 (valor -> TRUE .)
    PLUS            reduce using rule 40 (valor -> TRUE .)
    TIMES           reduce using rule 40 (valor -> TRUE .)
    DIVIDE          reduce using rule 40 (valor -> TRUE .)
    MODULE          reduce using rule 40 (valor -> TRUE .)
    OR              reduce using rule 40 (valor -> TRUE .)
    AND             reduce using rule 40 (valor -> TRUE .)
    EQUALS          reduce using rule 40 (valor -> TRUE .)
    NOTEQUALS       reduce using rule 40 (valor -> TRUE .)
    GREATER         reduce using rule 40 (valor -> TRUE .)
    LOWER           reduce using rule 40 (valor -> TRUE .)
    ;               reduce using rule 40 (valor -> TRUE .)
    RPAREN          reduce using rule 40 (valor -> TRUE .)
    ,               reduce using rule 40 (valor -> TRUE .)


state 44

    (41) valor -> FALSE .

    RSBRACKET       reduce using rule 41 (valor -> FALSE .)
    MINUS           reduce using rule 41 (valor -> FALSE .)
    PLUS            reduce using rule 41 (valor -> FALSE .)
    TIMES           reduce using rule 41 (valor -> FALSE .)
    DIVIDE          reduce using rule 41 (valor -> FALSE .)
    MODULE          reduce using rule 41 (valor -> FALSE .)
    OR              reduce using rule 41 (valor -> FALSE .)
    AND             reduce using rule 41 (valor -> FALSE .)
    EQUALS          reduce using rule 41 (valor -> FALSE .)
    NOTEQUALS       reduce using rule 41 (valor -> FALSE .)
    GREATER         reduce using rule 41 (valor -> FALSE .)
    LOWER           reduce using rule 41 (valor -> FALSE .)
    ;               reduce using rule 41 (valor -> FALSE .)
    RPAREN          reduce using rule 41 (valor -> FALSE .)
    ,               reduce using rule 41 (valor -> FALSE .)


state 45

    (42) valor -> NULL .

    RSBRACKET       reduce using rule 42 (valor -> NULL .)
    MINUS           reduce using rule 42 (valor -> NULL .)
    PLUS            reduce using rule 42 (valor -> NULL .)
    TIMES           reduce using rule 42 (valor -> NULL .)
    DIVIDE          reduce using rule 42 (valor -> NULL .)
    MODULE          reduce using rule 42 (valor -> NULL .)
    OR              reduce using rule 42 (valor -> NULL .)
    AND             reduce using rule 42 (valor -> NULL .)
    EQUALS          reduce using rule 42 (valor -> NULL .)
    NOTEQUALS       reduce using rule 42 (valor -> NULL .)
    GREATER         reduce using rule 42 (valor -> NULL .)
    LOWER           reduce using rule 42 (valor -> NULL .)
    ;               reduce using rule 42 (valor -> NULL .)
    RPAREN          reduce using rule 42 (valor -> NULL .)
    ,               reduce using rule 42 (valor -> NULL .)


state 46

    (43) valor -> NOT . valor
    (37) valor -> . ID
    (38) valor -> . number
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (66) number -> . INTV
    (67) number -> . FLOATV

    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    valor                          shift and go to state 65
    number                         shift and go to state 41

state 47

    (66) number -> INTV .

    RSBRACKET       reduce using rule 66 (number -> INTV .)
    MINUS           reduce using rule 66 (number -> INTV .)
    PLUS            reduce using rule 66 (number -> INTV .)
    TIMES           reduce using rule 66 (number -> INTV .)
    DIVIDE          reduce using rule 66 (number -> INTV .)
    MODULE          reduce using rule 66 (number -> INTV .)
    OR              reduce using rule 66 (number -> INTV .)
    AND             reduce using rule 66 (number -> INTV .)
    EQUALS          reduce using rule 66 (number -> INTV .)
    NOTEQUALS       reduce using rule 66 (number -> INTV .)
    GREATER         reduce using rule 66 (number -> INTV .)
    LOWER           reduce using rule 66 (number -> INTV .)
    ;               reduce using rule 66 (number -> INTV .)
    RPAREN          reduce using rule 66 (number -> INTV .)
    ,               reduce using rule 66 (number -> INTV .)


state 48

    (67) number -> FLOATV .

    RSBRACKET       reduce using rule 67 (number -> FLOATV .)
    MINUS           reduce using rule 67 (number -> FLOATV .)
    PLUS            reduce using rule 67 (number -> FLOATV .)
    TIMES           reduce using rule 67 (number -> FLOATV .)
    DIVIDE          reduce using rule 67 (number -> FLOATV .)
    MODULE          reduce using rule 67 (number -> FLOATV .)
    OR              reduce using rule 67 (number -> FLOATV .)
    AND             reduce using rule 67 (number -> FLOATV .)
    EQUALS          reduce using rule 67 (number -> FLOATV .)
    NOTEQUALS       reduce using rule 67 (number -> FLOATV .)
    GREATER         reduce using rule 67 (number -> FLOATV .)
    LOWER           reduce using rule 67 (number -> FLOATV .)
    ;               reduce using rule 67 (number -> FLOATV .)
    RPAREN          reduce using rule 67 (number -> FLOATV .)
    ,               reduce using rule 67 (number -> FLOATV .)


state 49

    (46) asignacion -> ID ASSIGN expresion .
    (51) expresion -> expresion . operadoresMat expresion
    (52) expresion -> expresion . operadoresLog expresion
    (61) operadoresMat -> . MINUS
    (62) operadoresMat -> . PLUS
    (63) operadoresMat -> . TIMES
    (64) operadoresMat -> . DIVIDE
    (65) operadoresMat -> . MODULE
    (53) operadoresLog -> . OR
    (54) operadoresLog -> . AND
    (55) operadoresLog -> . EQUALS
    (56) operadoresLog -> . NOTEQUALS
    (57) operadoresLog -> . GREATER
    (58) operadoresLog -> . LOWER
    (59) operadoresLog -> . GREATER ASSIGN
    (60) operadoresLog -> . LOWER ASSIGN

    ;               reduce using rule 46 (asignacion -> ID ASSIGN expresion .)
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULE          shift and go to state 72
    OR              shift and go to state 73
    AND             shift and go to state 74
    EQUALS          shift and go to state 75
    NOTEQUALS       shift and go to state 76
    GREATER         shift and go to state 77
    LOWER           shift and go to state 78

    operadoresMat                  shift and go to state 66
    operadoresLog                  shift and go to state 67

state 50

    (49) expresion -> LPAREN . expresion RPAREN
    (49) expresion -> . LPAREN expresion RPAREN
    (50) expresion -> . valor
    (51) expresion -> . expresion operadoresMat expresion
    (52) expresion -> . expresion operadoresLog expresion
    (37) valor -> . ID
    (38) valor -> . number
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (66) number -> . INTV
    (67) number -> . FLOATV

    LPAREN          shift and go to state 50
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    expresion                      shift and go to state 79
    valor                          shift and go to state 51
    number                         shift and go to state 41

state 51

    (50) expresion -> valor .

    MINUS           reduce using rule 50 (expresion -> valor .)
    PLUS            reduce using rule 50 (expresion -> valor .)
    TIMES           reduce using rule 50 (expresion -> valor .)
    DIVIDE          reduce using rule 50 (expresion -> valor .)
    MODULE          reduce using rule 50 (expresion -> valor .)
    OR              reduce using rule 50 (expresion -> valor .)
    AND             reduce using rule 50 (expresion -> valor .)
    EQUALS          reduce using rule 50 (expresion -> valor .)
    NOTEQUALS       reduce using rule 50 (expresion -> valor .)
    GREATER         reduce using rule 50 (expresion -> valor .)
    LOWER           reduce using rule 50 (expresion -> valor .)
    ;               reduce using rule 50 (expresion -> valor .)
    RPAREN          reduce using rule 50 (expresion -> valor .)


state 52

    (21) llamada -> ID LPAREN args . RPAREN
    (36) args -> args . , args

    RPAREN          shift and go to state 80
    ,               shift and go to state 81


state 53

    (22) llamada -> ID LPAREN RPAREN .

    ;               reduce using rule 22 (llamada -> ID LPAREN RPAREN .)


state 54

    (35) args -> valor .

    RPAREN          reduce using rule 35 (args -> valor .)
    ,               reduce using rule 35 (args -> valor .)


state 55

    (47) asignacion -> declarador ID ASSIGN . expresion
    (49) expresion -> . LPAREN expresion RPAREN
    (50) expresion -> . valor
    (51) expresion -> . expresion operadoresMat expresion
    (52) expresion -> . expresion operadoresLog expresion
    (37) valor -> . ID
    (38) valor -> . number
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (66) number -> . INTV
    (67) number -> . FLOATV

    LPAREN          shift and go to state 50
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    expresion                      shift and go to state 82
    valor                          shift and go to state 51
    number                         shift and go to state 41

state 56

    (48) declaracion -> declarador ID ; .

    FUNCTION        reduce using rule 48 (declaracion -> declarador ID ; .)
    ID              reduce using rule 48 (declaracion -> declarador ID ; .)
    IF              reduce using rule 48 (declaracion -> declarador ID ; .)
    ELSE            reduce using rule 48 (declaracion -> declarador ID ; .)
    VAR             reduce using rule 48 (declaracion -> declarador ID ; .)
    VAL             reduce using rule 48 (declaracion -> declarador ID ; .)
    WHILE           reduce using rule 48 (declaracion -> declarador ID ; .)
    FOR             reduce using rule 48 (declaracion -> declarador ID ; .)
    $end            reduce using rule 48 (declaracion -> declarador ID ; .)
    RCBRACKET       reduce using rule 48 (declaracion -> declarador ID ; .)
    RETURN          reduce using rule 48 (declaracion -> declarador ID ; .)


state 57

    (13) estructuraControl -> IF LPAREN expresion . RPAREN instrucciones
    (51) expresion -> expresion . operadoresMat expresion
    (52) expresion -> expresion . operadoresLog expresion
    (61) operadoresMat -> . MINUS
    (62) operadoresMat -> . PLUS
    (63) operadoresMat -> . TIMES
    (64) operadoresMat -> . DIVIDE
    (65) operadoresMat -> . MODULE
    (53) operadoresLog -> . OR
    (54) operadoresLog -> . AND
    (55) operadoresLog -> . EQUALS
    (56) operadoresLog -> . NOTEQUALS
    (57) operadoresLog -> . GREATER
    (58) operadoresLog -> . LOWER
    (59) operadoresLog -> . GREATER ASSIGN
    (60) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 83
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULE          shift and go to state 72
    OR              shift and go to state 73
    AND             shift and go to state 74
    EQUALS          shift and go to state 75
    NOTEQUALS       shift and go to state 76
    GREATER         shift and go to state 77
    LOWER           shift and go to state 78

    operadoresMat                  shift and go to state 66
    operadoresLog                  shift and go to state 67

state 58

    (9) instrucciones -> LCBRACKET cuerpo . RCBRACKET

    RCBRACKET       shift and go to state 84


state 59

    (17) while -> WHILE LPAREN expresion . RPAREN
    (51) expresion -> expresion . operadoresMat expresion
    (52) expresion -> expresion . operadoresLog expresion
    (61) operadoresMat -> . MINUS
    (62) operadoresMat -> . PLUS
    (63) operadoresMat -> . TIMES
    (64) operadoresMat -> . DIVIDE
    (65) operadoresMat -> . MODULE
    (53) operadoresLog -> . OR
    (54) operadoresLog -> . AND
    (55) operadoresLog -> . EQUALS
    (56) operadoresLog -> . NOTEQUALS
    (57) operadoresLog -> . GREATER
    (58) operadoresLog -> . LOWER
    (59) operadoresLog -> . GREATER ASSIGN
    (60) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 85
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULE          shift and go to state 72
    OR              shift and go to state 73
    AND             shift and go to state 74
    EQUALS          shift and go to state 75
    NOTEQUALS       shift and go to state 76
    GREATER         shift and go to state 77
    LOWER           shift and go to state 78

    operadoresMat                  shift and go to state 66
    operadoresLog                  shift and go to state 67

state 60

    (18) for -> FOR LPAREN ID . IN ID RPAREN

    IN              shift and go to state 86


state 61

    (33) params -> ID . : dato

    :               shift and go to state 87


state 62

    (19) function -> FUNCTION ID LPAREN params . RPAREN instruccionesF
    (34) params -> params . , params

    RPAREN          shift and go to state 88
    ,               shift and go to state 89


state 63

    (20) function -> FUNCTION ID LPAREN RPAREN . instruccionesF
    (11) instruccionesF -> . LCBRACKET cuerpo retorno RCBRACKET

    LCBRACKET       shift and go to state 91

    instruccionesF                 shift and go to state 90

state 64

    (23) function -> ID LSBRACKET valor RSBRACKET .

    FUNCTION        reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    ID              reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    IF              reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    ELSE            reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    VAR             reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    VAL             reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    WHILE           reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    FOR             reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)


state 65

    (43) valor -> NOT valor .

    RSBRACKET       reduce using rule 43 (valor -> NOT valor .)
    MINUS           reduce using rule 43 (valor -> NOT valor .)
    PLUS            reduce using rule 43 (valor -> NOT valor .)
    TIMES           reduce using rule 43 (valor -> NOT valor .)
    DIVIDE          reduce using rule 43 (valor -> NOT valor .)
    MODULE          reduce using rule 43 (valor -> NOT valor .)
    OR              reduce using rule 43 (valor -> NOT valor .)
    AND             reduce using rule 43 (valor -> NOT valor .)
    EQUALS          reduce using rule 43 (valor -> NOT valor .)
    NOTEQUALS       reduce using rule 43 (valor -> NOT valor .)
    GREATER         reduce using rule 43 (valor -> NOT valor .)
    LOWER           reduce using rule 43 (valor -> NOT valor .)
    ;               reduce using rule 43 (valor -> NOT valor .)
    RPAREN          reduce using rule 43 (valor -> NOT valor .)
    ,               reduce using rule 43 (valor -> NOT valor .)


state 66

    (51) expresion -> expresion operadoresMat . expresion
    (49) expresion -> . LPAREN expresion RPAREN
    (50) expresion -> . valor
    (51) expresion -> . expresion operadoresMat expresion
    (52) expresion -> . expresion operadoresLog expresion
    (37) valor -> . ID
    (38) valor -> . number
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (66) number -> . INTV
    (67) number -> . FLOATV

    LPAREN          shift and go to state 50
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    expresion                      shift and go to state 92
    valor                          shift and go to state 51
    number                         shift and go to state 41

state 67

    (52) expresion -> expresion operadoresLog . expresion
    (49) expresion -> . LPAREN expresion RPAREN
    (50) expresion -> . valor
    (51) expresion -> . expresion operadoresMat expresion
    (52) expresion -> . expresion operadoresLog expresion
    (37) valor -> . ID
    (38) valor -> . number
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (66) number -> . INTV
    (67) number -> . FLOATV

    LPAREN          shift and go to state 50
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    expresion                      shift and go to state 93
    valor                          shift and go to state 51
    number                         shift and go to state 41

state 68

    (61) operadoresMat -> MINUS .

    LPAREN          reduce using rule 61 (operadoresMat -> MINUS .)
    ID              reduce using rule 61 (operadoresMat -> MINUS .)
    STRING          reduce using rule 61 (operadoresMat -> MINUS .)
    TRUE            reduce using rule 61 (operadoresMat -> MINUS .)
    FALSE           reduce using rule 61 (operadoresMat -> MINUS .)
    NULL            reduce using rule 61 (operadoresMat -> MINUS .)
    NOT             reduce using rule 61 (operadoresMat -> MINUS .)
    INTV            reduce using rule 61 (operadoresMat -> MINUS .)
    FLOATV          reduce using rule 61 (operadoresMat -> MINUS .)


state 69

    (62) operadoresMat -> PLUS .

    LPAREN          reduce using rule 62 (operadoresMat -> PLUS .)
    ID              reduce using rule 62 (operadoresMat -> PLUS .)
    STRING          reduce using rule 62 (operadoresMat -> PLUS .)
    TRUE            reduce using rule 62 (operadoresMat -> PLUS .)
    FALSE           reduce using rule 62 (operadoresMat -> PLUS .)
    NULL            reduce using rule 62 (operadoresMat -> PLUS .)
    NOT             reduce using rule 62 (operadoresMat -> PLUS .)
    INTV            reduce using rule 62 (operadoresMat -> PLUS .)
    FLOATV          reduce using rule 62 (operadoresMat -> PLUS .)


state 70

    (63) operadoresMat -> TIMES .

    LPAREN          reduce using rule 63 (operadoresMat -> TIMES .)
    ID              reduce using rule 63 (operadoresMat -> TIMES .)
    STRING          reduce using rule 63 (operadoresMat -> TIMES .)
    TRUE            reduce using rule 63 (operadoresMat -> TIMES .)
    FALSE           reduce using rule 63 (operadoresMat -> TIMES .)
    NULL            reduce using rule 63 (operadoresMat -> TIMES .)
    NOT             reduce using rule 63 (operadoresMat -> TIMES .)
    INTV            reduce using rule 63 (operadoresMat -> TIMES .)
    FLOATV          reduce using rule 63 (operadoresMat -> TIMES .)


state 71

    (64) operadoresMat -> DIVIDE .

    LPAREN          reduce using rule 64 (operadoresMat -> DIVIDE .)
    ID              reduce using rule 64 (operadoresMat -> DIVIDE .)
    STRING          reduce using rule 64 (operadoresMat -> DIVIDE .)
    TRUE            reduce using rule 64 (operadoresMat -> DIVIDE .)
    FALSE           reduce using rule 64 (operadoresMat -> DIVIDE .)
    NULL            reduce using rule 64 (operadoresMat -> DIVIDE .)
    NOT             reduce using rule 64 (operadoresMat -> DIVIDE .)
    INTV            reduce using rule 64 (operadoresMat -> DIVIDE .)
    FLOATV          reduce using rule 64 (operadoresMat -> DIVIDE .)


state 72

    (65) operadoresMat -> MODULE .

    LPAREN          reduce using rule 65 (operadoresMat -> MODULE .)
    ID              reduce using rule 65 (operadoresMat -> MODULE .)
    STRING          reduce using rule 65 (operadoresMat -> MODULE .)
    TRUE            reduce using rule 65 (operadoresMat -> MODULE .)
    FALSE           reduce using rule 65 (operadoresMat -> MODULE .)
    NULL            reduce using rule 65 (operadoresMat -> MODULE .)
    NOT             reduce using rule 65 (operadoresMat -> MODULE .)
    INTV            reduce using rule 65 (operadoresMat -> MODULE .)
    FLOATV          reduce using rule 65 (operadoresMat -> MODULE .)


state 73

    (53) operadoresLog -> OR .

    LPAREN          reduce using rule 53 (operadoresLog -> OR .)
    ID              reduce using rule 53 (operadoresLog -> OR .)
    STRING          reduce using rule 53 (operadoresLog -> OR .)
    TRUE            reduce using rule 53 (operadoresLog -> OR .)
    FALSE           reduce using rule 53 (operadoresLog -> OR .)
    NULL            reduce using rule 53 (operadoresLog -> OR .)
    NOT             reduce using rule 53 (operadoresLog -> OR .)
    INTV            reduce using rule 53 (operadoresLog -> OR .)
    FLOATV          reduce using rule 53 (operadoresLog -> OR .)


state 74

    (54) operadoresLog -> AND .

    LPAREN          reduce using rule 54 (operadoresLog -> AND .)
    ID              reduce using rule 54 (operadoresLog -> AND .)
    STRING          reduce using rule 54 (operadoresLog -> AND .)
    TRUE            reduce using rule 54 (operadoresLog -> AND .)
    FALSE           reduce using rule 54 (operadoresLog -> AND .)
    NULL            reduce using rule 54 (operadoresLog -> AND .)
    NOT             reduce using rule 54 (operadoresLog -> AND .)
    INTV            reduce using rule 54 (operadoresLog -> AND .)
    FLOATV          reduce using rule 54 (operadoresLog -> AND .)


state 75

    (55) operadoresLog -> EQUALS .

    LPAREN          reduce using rule 55 (operadoresLog -> EQUALS .)
    ID              reduce using rule 55 (operadoresLog -> EQUALS .)
    STRING          reduce using rule 55 (operadoresLog -> EQUALS .)
    TRUE            reduce using rule 55 (operadoresLog -> EQUALS .)
    FALSE           reduce using rule 55 (operadoresLog -> EQUALS .)
    NULL            reduce using rule 55 (operadoresLog -> EQUALS .)
    NOT             reduce using rule 55 (operadoresLog -> EQUALS .)
    INTV            reduce using rule 55 (operadoresLog -> EQUALS .)
    FLOATV          reduce using rule 55 (operadoresLog -> EQUALS .)


state 76

    (56) operadoresLog -> NOTEQUALS .

    LPAREN          reduce using rule 56 (operadoresLog -> NOTEQUALS .)
    ID              reduce using rule 56 (operadoresLog -> NOTEQUALS .)
    STRING          reduce using rule 56 (operadoresLog -> NOTEQUALS .)
    TRUE            reduce using rule 56 (operadoresLog -> NOTEQUALS .)
    FALSE           reduce using rule 56 (operadoresLog -> NOTEQUALS .)
    NULL            reduce using rule 56 (operadoresLog -> NOTEQUALS .)
    NOT             reduce using rule 56 (operadoresLog -> NOTEQUALS .)
    INTV            reduce using rule 56 (operadoresLog -> NOTEQUALS .)
    FLOATV          reduce using rule 56 (operadoresLog -> NOTEQUALS .)


state 77

    (57) operadoresLog -> GREATER .
    (59) operadoresLog -> GREATER . ASSIGN

    LPAREN          reduce using rule 57 (operadoresLog -> GREATER .)
    ID              reduce using rule 57 (operadoresLog -> GREATER .)
    STRING          reduce using rule 57 (operadoresLog -> GREATER .)
    TRUE            reduce using rule 57 (operadoresLog -> GREATER .)
    FALSE           reduce using rule 57 (operadoresLog -> GREATER .)
    NULL            reduce using rule 57 (operadoresLog -> GREATER .)
    NOT             reduce using rule 57 (operadoresLog -> GREATER .)
    INTV            reduce using rule 57 (operadoresLog -> GREATER .)
    FLOATV          reduce using rule 57 (operadoresLog -> GREATER .)
    ASSIGN          shift and go to state 94


state 78

    (58) operadoresLog -> LOWER .
    (60) operadoresLog -> LOWER . ASSIGN

    LPAREN          reduce using rule 58 (operadoresLog -> LOWER .)
    ID              reduce using rule 58 (operadoresLog -> LOWER .)
    STRING          reduce using rule 58 (operadoresLog -> LOWER .)
    TRUE            reduce using rule 58 (operadoresLog -> LOWER .)
    FALSE           reduce using rule 58 (operadoresLog -> LOWER .)
    NULL            reduce using rule 58 (operadoresLog -> LOWER .)
    NOT             reduce using rule 58 (operadoresLog -> LOWER .)
    INTV            reduce using rule 58 (operadoresLog -> LOWER .)
    FLOATV          reduce using rule 58 (operadoresLog -> LOWER .)
    ASSIGN          shift and go to state 95


state 79

    (49) expresion -> LPAREN expresion . RPAREN
    (51) expresion -> expresion . operadoresMat expresion
    (52) expresion -> expresion . operadoresLog expresion
    (61) operadoresMat -> . MINUS
    (62) operadoresMat -> . PLUS
    (63) operadoresMat -> . TIMES
    (64) operadoresMat -> . DIVIDE
    (65) operadoresMat -> . MODULE
    (53) operadoresLog -> . OR
    (54) operadoresLog -> . AND
    (55) operadoresLog -> . EQUALS
    (56) operadoresLog -> . NOTEQUALS
    (57) operadoresLog -> . GREATER
    (58) operadoresLog -> . LOWER
    (59) operadoresLog -> . GREATER ASSIGN
    (60) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 96
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULE          shift and go to state 72
    OR              shift and go to state 73
    AND             shift and go to state 74
    EQUALS          shift and go to state 75
    NOTEQUALS       shift and go to state 76
    GREATER         shift and go to state 77
    LOWER           shift and go to state 78

    operadoresMat                  shift and go to state 66
    operadoresLog                  shift and go to state 67

state 80

    (21) llamada -> ID LPAREN args RPAREN .

    ;               reduce using rule 21 (llamada -> ID LPAREN args RPAREN .)


state 81

    (36) args -> args , . args
    (35) args -> . valor
    (36) args -> . args , args
    (37) valor -> . ID
    (38) valor -> . number
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (66) number -> . INTV
    (67) number -> . FLOATV

    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    args                           shift and go to state 97
    valor                          shift and go to state 54
    number                         shift and go to state 41

state 82

    (47) asignacion -> declarador ID ASSIGN expresion .
    (51) expresion -> expresion . operadoresMat expresion
    (52) expresion -> expresion . operadoresLog expresion
    (61) operadoresMat -> . MINUS
    (62) operadoresMat -> . PLUS
    (63) operadoresMat -> . TIMES
    (64) operadoresMat -> . DIVIDE
    (65) operadoresMat -> . MODULE
    (53) operadoresLog -> . OR
    (54) operadoresLog -> . AND
    (55) operadoresLog -> . EQUALS
    (56) operadoresLog -> . NOTEQUALS
    (57) operadoresLog -> . GREATER
    (58) operadoresLog -> . LOWER
    (59) operadoresLog -> . GREATER ASSIGN
    (60) operadoresLog -> . LOWER ASSIGN

    ;               reduce using rule 47 (asignacion -> declarador ID ASSIGN expresion .)
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULE          shift and go to state 72
    OR              shift and go to state 73
    AND             shift and go to state 74
    EQUALS          shift and go to state 75
    NOTEQUALS       shift and go to state 76
    GREATER         shift and go to state 77
    LOWER           shift and go to state 78

    operadoresMat                  shift and go to state 66
    operadoresLog                  shift and go to state 67

state 83

    (13) estructuraControl -> IF LPAREN expresion RPAREN . instrucciones
    (9) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (10) instrucciones -> . sentencia
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . estructuraControl
    (6) sentencia -> . bucles
    (7) sentencia -> . llamada ;
    (8) sentencia -> . declaracion
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (48) declaracion -> . declarador ID ;
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN

    LCBRACKET       shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    VAR             shift and go to state 16
    VAL             shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19

    instrucciones                  shift and go to state 98
    sentencia                      shift and go to state 32
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 84

    (9) instrucciones -> LCBRACKET cuerpo RCBRACKET .

    FUNCTION        reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    ID              reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    IF              reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    ELSE            reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    VAR             reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    VAL             reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    WHILE           reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    FOR             reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    $end            reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    RCBRACKET       reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    RETURN          reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)


state 85

    (17) while -> WHILE LPAREN expresion RPAREN .

    LCBRACKET       reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    ID              reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    IF              reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    ELSE            reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    VAR             reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    VAL             reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    WHILE           reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    FOR             reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)


state 86

    (18) for -> FOR LPAREN ID IN . ID RPAREN

    ID              shift and go to state 99


state 87

    (33) params -> ID : . dato
    (24) dato -> . INT
    (25) dato -> . FLOAT
    (26) dato -> . BYTE
    (27) dato -> . SHORT
    (28) dato -> . DOUBLE
    (29) dato -> . ID
    (30) dato -> . LONG
    (31) dato -> . CHAR
    (32) dato -> . BOOLEAN

    INT             shift and go to state 102
    FLOAT           shift and go to state 103
    BYTE            shift and go to state 104
    SHORT           shift and go to state 105
    DOUBLE          shift and go to state 106
    ID              shift and go to state 100
    LONG            shift and go to state 107
    CHAR            shift and go to state 108
    BOOLEAN         shift and go to state 109

    dato                           shift and go to state 101

state 88

    (19) function -> FUNCTION ID LPAREN params RPAREN . instruccionesF
    (11) instruccionesF -> . LCBRACKET cuerpo retorno RCBRACKET

    LCBRACKET       shift and go to state 91

    instruccionesF                 shift and go to state 110

state 89

    (34) params -> params , . params
    (33) params -> . ID : dato
    (34) params -> . params , params

    ID              shift and go to state 61

    params                         shift and go to state 111

state 90

    (20) function -> FUNCTION ID LPAREN RPAREN instruccionesF .

    FUNCTION        reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    ID              reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    IF              reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    ELSE            reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    VAR             reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    VAL             reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    WHILE           reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    FOR             reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)


state 91

    (11) instruccionesF -> LCBRACKET . cuerpo retorno RCBRACKET
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . sentencia cuerpo
    (3) cuerpo -> . function cuerpo
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . estructuraControl
    (6) sentencia -> . bucles
    (7) sentencia -> . llamada ;
    (8) sentencia -> . declaracion
    (19) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (20) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (23) function -> . ID LSBRACKET valor RSBRACKET
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (48) declaracion -> . declarador ID ;
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN

    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    VAR             shift and go to state 16
    VAL             shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19

    cuerpo                         shift and go to state 112
    sentencia                      shift and go to state 2
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 92

    (51) expresion -> expresion operadoresMat expresion .
    (51) expresion -> expresion . operadoresMat expresion
    (52) expresion -> expresion . operadoresLog expresion
    (61) operadoresMat -> . MINUS
    (62) operadoresMat -> . PLUS
    (63) operadoresMat -> . TIMES
    (64) operadoresMat -> . DIVIDE
    (65) operadoresMat -> . MODULE
    (53) operadoresLog -> . OR
    (54) operadoresLog -> . AND
    (55) operadoresLog -> . EQUALS
    (56) operadoresLog -> . NOTEQUALS
    (57) operadoresLog -> . GREATER
    (58) operadoresLog -> . LOWER
    (59) operadoresLog -> . GREATER ASSIGN
    (60) operadoresLog -> . LOWER ASSIGN

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
    ;               reduce using rule 51 (expresion -> expresion operadoresMat expresion .)
    RPAREN          reduce using rule 51 (expresion -> expresion operadoresMat expresion .)
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULE          shift and go to state 72
    OR              shift and go to state 73
    AND             shift and go to state 74
    EQUALS          shift and go to state 75
    NOTEQUALS       shift and go to state 76
    GREATER         shift and go to state 77
    LOWER           shift and go to state 78

  ! MINUS           [ reduce using rule 51 (expresion -> expresion operadoresMat expresion .) ]
  ! PLUS            [ reduce using rule 51 (expresion -> expresion operadoresMat expresion .) ]
  ! TIMES           [ reduce using rule 51 (expresion -> expresion operadoresMat expresion .) ]
  ! DIVIDE          [ reduce using rule 51 (expresion -> expresion operadoresMat expresion .) ]
  ! MODULE          [ reduce using rule 51 (expresion -> expresion operadoresMat expresion .) ]
  ! OR              [ reduce using rule 51 (expresion -> expresion operadoresMat expresion .) ]
  ! AND             [ reduce using rule 51 (expresion -> expresion operadoresMat expresion .) ]
  ! EQUALS          [ reduce using rule 51 (expresion -> expresion operadoresMat expresion .) ]
  ! NOTEQUALS       [ reduce using rule 51 (expresion -> expresion operadoresMat expresion .) ]
  ! GREATER         [ reduce using rule 51 (expresion -> expresion operadoresMat expresion .) ]
  ! LOWER           [ reduce using rule 51 (expresion -> expresion operadoresMat expresion .) ]

    operadoresMat                  shift and go to state 66
    operadoresLog                  shift and go to state 67

state 93

    (52) expresion -> expresion operadoresLog expresion .
    (51) expresion -> expresion . operadoresMat expresion
    (52) expresion -> expresion . operadoresLog expresion
    (61) operadoresMat -> . MINUS
    (62) operadoresMat -> . PLUS
    (63) operadoresMat -> . TIMES
    (64) operadoresMat -> . DIVIDE
    (65) operadoresMat -> . MODULE
    (53) operadoresLog -> . OR
    (54) operadoresLog -> . AND
    (55) operadoresLog -> . EQUALS
    (56) operadoresLog -> . NOTEQUALS
    (57) operadoresLog -> . GREATER
    (58) operadoresLog -> . LOWER
    (59) operadoresLog -> . GREATER ASSIGN
    (60) operadoresLog -> . LOWER ASSIGN

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
    ;               reduce using rule 52 (expresion -> expresion operadoresLog expresion .)
    RPAREN          reduce using rule 52 (expresion -> expresion operadoresLog expresion .)
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULE          shift and go to state 72
    OR              shift and go to state 73
    AND             shift and go to state 74
    EQUALS          shift and go to state 75
    NOTEQUALS       shift and go to state 76
    GREATER         shift and go to state 77
    LOWER           shift and go to state 78

  ! MINUS           [ reduce using rule 52 (expresion -> expresion operadoresLog expresion .) ]
  ! PLUS            [ reduce using rule 52 (expresion -> expresion operadoresLog expresion .) ]
  ! TIMES           [ reduce using rule 52 (expresion -> expresion operadoresLog expresion .) ]
  ! DIVIDE          [ reduce using rule 52 (expresion -> expresion operadoresLog expresion .) ]
  ! MODULE          [ reduce using rule 52 (expresion -> expresion operadoresLog expresion .) ]
  ! OR              [ reduce using rule 52 (expresion -> expresion operadoresLog expresion .) ]
  ! AND             [ reduce using rule 52 (expresion -> expresion operadoresLog expresion .) ]
  ! EQUALS          [ reduce using rule 52 (expresion -> expresion operadoresLog expresion .) ]
  ! NOTEQUALS       [ reduce using rule 52 (expresion -> expresion operadoresLog expresion .) ]
  ! GREATER         [ reduce using rule 52 (expresion -> expresion operadoresLog expresion .) ]
  ! LOWER           [ reduce using rule 52 (expresion -> expresion operadoresLog expresion .) ]

    operadoresLog                  shift and go to state 67
    operadoresMat                  shift and go to state 66

state 94

    (59) operadoresLog -> GREATER ASSIGN .

    LPAREN          reduce using rule 59 (operadoresLog -> GREATER ASSIGN .)
    ID              reduce using rule 59 (operadoresLog -> GREATER ASSIGN .)
    STRING          reduce using rule 59 (operadoresLog -> GREATER ASSIGN .)
    TRUE            reduce using rule 59 (operadoresLog -> GREATER ASSIGN .)
    FALSE           reduce using rule 59 (operadoresLog -> GREATER ASSIGN .)
    NULL            reduce using rule 59 (operadoresLog -> GREATER ASSIGN .)
    NOT             reduce using rule 59 (operadoresLog -> GREATER ASSIGN .)
    INTV            reduce using rule 59 (operadoresLog -> GREATER ASSIGN .)
    FLOATV          reduce using rule 59 (operadoresLog -> GREATER ASSIGN .)


state 95

    (60) operadoresLog -> LOWER ASSIGN .

    LPAREN          reduce using rule 60 (operadoresLog -> LOWER ASSIGN .)
    ID              reduce using rule 60 (operadoresLog -> LOWER ASSIGN .)
    STRING          reduce using rule 60 (operadoresLog -> LOWER ASSIGN .)
    TRUE            reduce using rule 60 (operadoresLog -> LOWER ASSIGN .)
    FALSE           reduce using rule 60 (operadoresLog -> LOWER ASSIGN .)
    NULL            reduce using rule 60 (operadoresLog -> LOWER ASSIGN .)
    NOT             reduce using rule 60 (operadoresLog -> LOWER ASSIGN .)
    INTV            reduce using rule 60 (operadoresLog -> LOWER ASSIGN .)
    FLOATV          reduce using rule 60 (operadoresLog -> LOWER ASSIGN .)


state 96

    (49) expresion -> LPAREN expresion RPAREN .

    MINUS           reduce using rule 49 (expresion -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 49 (expresion -> LPAREN expresion RPAREN .)
    TIMES           reduce using rule 49 (expresion -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 49 (expresion -> LPAREN expresion RPAREN .)
    MODULE          reduce using rule 49 (expresion -> LPAREN expresion RPAREN .)
    OR              reduce using rule 49 (expresion -> LPAREN expresion RPAREN .)
    AND             reduce using rule 49 (expresion -> LPAREN expresion RPAREN .)
    EQUALS          reduce using rule 49 (expresion -> LPAREN expresion RPAREN .)
    NOTEQUALS       reduce using rule 49 (expresion -> LPAREN expresion RPAREN .)
    GREATER         reduce using rule 49 (expresion -> LPAREN expresion RPAREN .)
    LOWER           reduce using rule 49 (expresion -> LPAREN expresion RPAREN .)
    ;               reduce using rule 49 (expresion -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 49 (expresion -> LPAREN expresion RPAREN .)


state 97

    (36) args -> args , args .
    (36) args -> args . , args

  ! shift/reduce conflict for , resolved as shift
    RPAREN          reduce using rule 36 (args -> args , args .)
    ,               shift and go to state 81

  ! ,               [ reduce using rule 36 (args -> args , args .) ]


state 98

    (13) estructuraControl -> IF LPAREN expresion RPAREN instrucciones .

    FUNCTION        reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    ID              reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    IF              reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    ELSE            reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    VAR             reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    VAL             reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    WHILE           reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    FOR             reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    $end            reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    RCBRACKET       reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    RETURN          reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)


state 99

    (18) for -> FOR LPAREN ID IN ID . RPAREN

    RPAREN          shift and go to state 113


state 100

    (29) dato -> ID .

    RPAREN          reduce using rule 29 (dato -> ID .)
    ,               reduce using rule 29 (dato -> ID .)


state 101

    (33) params -> ID : dato .

    RPAREN          reduce using rule 33 (params -> ID : dato .)
    ,               reduce using rule 33 (params -> ID : dato .)


state 102

    (24) dato -> INT .

    RPAREN          reduce using rule 24 (dato -> INT .)
    ,               reduce using rule 24 (dato -> INT .)


state 103

    (25) dato -> FLOAT .

    RPAREN          reduce using rule 25 (dato -> FLOAT .)
    ,               reduce using rule 25 (dato -> FLOAT .)


state 104

    (26) dato -> BYTE .

    RPAREN          reduce using rule 26 (dato -> BYTE .)
    ,               reduce using rule 26 (dato -> BYTE .)


state 105

    (27) dato -> SHORT .

    RPAREN          reduce using rule 27 (dato -> SHORT .)
    ,               reduce using rule 27 (dato -> SHORT .)


state 106

    (28) dato -> DOUBLE .

    RPAREN          reduce using rule 28 (dato -> DOUBLE .)
    ,               reduce using rule 28 (dato -> DOUBLE .)


state 107

    (30) dato -> LONG .

    RPAREN          reduce using rule 30 (dato -> LONG .)
    ,               reduce using rule 30 (dato -> LONG .)


state 108

    (31) dato -> CHAR .

    RPAREN          reduce using rule 31 (dato -> CHAR .)
    ,               reduce using rule 31 (dato -> CHAR .)


state 109

    (32) dato -> BOOLEAN .

    RPAREN          reduce using rule 32 (dato -> BOOLEAN .)
    ,               reduce using rule 32 (dato -> BOOLEAN .)


state 110

    (19) function -> FUNCTION ID LPAREN params RPAREN instruccionesF .

    FUNCTION        reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    ID              reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    IF              reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    ELSE            reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    VAR             reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    VAL             reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    WHILE           reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    FOR             reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)


state 111

    (34) params -> params , params .
    (34) params -> params . , params

  ! shift/reduce conflict for , resolved as shift
    RPAREN          reduce using rule 34 (params -> params , params .)
    ,               shift and go to state 89

  ! ,               [ reduce using rule 34 (params -> params , params .) ]


state 112

    (11) instruccionesF -> LCBRACKET cuerpo . retorno RCBRACKET
    (12) retorno -> . RETURN valor ;

    RETURN          shift and go to state 115

    retorno                        shift and go to state 114

state 113

    (18) for -> FOR LPAREN ID IN ID RPAREN .

    LCBRACKET       reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    ID              reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    IF              reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    ELSE            reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    VAR             reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    VAL             reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    WHILE           reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    FOR             reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)


state 114

    (11) instruccionesF -> LCBRACKET cuerpo retorno . RCBRACKET

    RCBRACKET       shift and go to state 116


state 115

    (12) retorno -> RETURN . valor ;
    (37) valor -> . ID
    (38) valor -> . number
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (66) number -> . INTV
    (67) number -> . FLOATV

    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    valor                          shift and go to state 117
    number                         shift and go to state 41

state 116

    (11) instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .

    FUNCTION        reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    ID              reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    IF              reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    ELSE            reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    VAR             reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    VAL             reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    WHILE           reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    FOR             reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)


state 117

    (12) retorno -> RETURN valor . ;

    ;               shift and go to state 118


state 118

    (12) retorno -> RETURN valor ; .

    RCBRACKET       reduce using rule 12 (retorno -> RETURN valor ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 92 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 92 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 92 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 92 resolved as shift
WARNING: shift/reduce conflict for OR in state 92 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 92 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 92 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 92 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 93 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 93 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 93 resolved as shift
WARNING: shift/reduce conflict for OR in state 93 resolved as shift
WARNING: shift/reduce conflict for AND in state 93 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 93 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 93 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 93 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 93 resolved as shift
WARNING: shift/reduce conflict for , in state 97 resolved as shift
WARNING: shift/reduce conflict for , in state 111 resolved as shift
