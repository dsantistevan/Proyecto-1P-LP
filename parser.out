Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOLEAN
    BYTE
    CHAR
    DOUBLE
    FALSE
    FLOAT
    FUNCTION
    GREATER
    INT
    LONG
    LOWER
    LSBRACKET
    NULL
    RETURN
    RSBRACKET
    SHORT
    TRUE
    VAL
    VAR

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> asignacion
Rule 2     cuerpo -> expresion
Rule 3     cuerpo -> sentencia
Rule 4     cuerpo -> bucles
Rule 5     instrucciones -> LCBRACKET cuerpo RCBRACKET
Rule 6     instrucciones -> cuerpo
Rule 7     sentencia -> IF LPAREN expresion RPAREN instrucciones
Rule 8     sentencia -> ELSE instrucciones
Rule 9     bucles -> while instrucciones
Rule 10    bucles -> for instrucciones
Rule 11    while -> WHILE LPAREN expresion RPAREN
Rule 12    for -> FOR LPAREN ID IN ID RPAREN
Rule 13    valor -> number
Rule 14    valor -> ID
Rule 15    valor -> STRING
Rule 16    valor -> NOT valor
Rule 17    asignacion -> ID ASSIGN expresion ;
Rule 18    expresion -> valor
Rule 19    expresion -> expresion operadoresMat expresion
Rule 20    expresion -> expresion operadoresLog expresion
Rule 21    operadoresLog -> OR
Rule 22    operadoresLog -> AND
Rule 23    operadoresLog -> EQUALS
Rule 24    operadoresLog -> NOTEQUALS
Rule 25    operadoresMat -> MINUS
Rule 26    operadoresMat -> PLUS
Rule 27    operadoresMat -> TIMES
Rule 28    operadoresMat -> DIVIDE
Rule 29    operadoresMat -> MODULE
Rule 30    number -> INTV
Rule 31    number -> FLOATV

Terminals, with rules where they appear

;                    : 17
AND                  : 22
ASSIGN               : 17
BOOLEAN              : 
BYTE                 : 
CHAR                 : 
DIVIDE               : 28
DOUBLE               : 
ELSE                 : 8
EQUALS               : 23
FALSE                : 
FLOAT                : 
FLOATV               : 31
FOR                  : 12
FUNCTION             : 
GREATER              : 
ID                   : 12 12 14 17
IF                   : 7
IN                   : 12
INT                  : 
INTV                 : 30
LCBRACKET            : 5
LONG                 : 
LOWER                : 
LPAREN               : 7 11 12
LSBRACKET            : 
MINUS                : 25
MODULE               : 29
NOT                  : 16
NOTEQUALS            : 24
NULL                 : 
OR                   : 21
PLUS                 : 26
RCBRACKET            : 5
RETURN               : 
RPAREN               : 7 11 12
RSBRACKET            : 
SHORT                : 
STRING               : 15
TIMES                : 27
TRUE                 : 
VAL                  : 
VAR                  : 
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

asignacion           : 1
bucles               : 4
cuerpo               : 5 6 0
expresion            : 2 7 11 17 19 19 20 20
for                  : 10
instrucciones        : 7 8 9 10
number               : 13
operadoresLog        : 20
operadoresMat        : 19
sentencia            : 3
valor                : 16 18
while                : 9

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . asignacion
    (2) cuerpo -> . expresion
    (3) cuerpo -> . sentencia
    (4) cuerpo -> . bucles
    (17) asignacion -> . ID ASSIGN expresion ;
    (18) expresion -> . valor
    (19) expresion -> . expresion operadoresMat expresion
    (20) expresion -> . expresion operadoresLog expresion
    (7) sentencia -> . IF LPAREN expresion RPAREN instrucciones
    (8) sentencia -> . ELSE instrucciones
    (9) bucles -> . while instrucciones
    (10) bucles -> . for instrucciones
    (13) valor -> . number
    (14) valor -> . ID
    (15) valor -> . STRING
    (16) valor -> . NOT valor
    (11) while -> . WHILE LPAREN expresion RPAREN
    (12) for -> . FOR LPAREN ID IN ID RPAREN
    (30) number -> . INTV
    (31) number -> . FLOATV

    ID              shift and go to state 6
    IF              shift and go to state 8
    ELSE            shift and go to state 9
    STRING          shift and go to state 13
    NOT             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    INTV            shift and go to state 17
    FLOATV          shift and go to state 18

    cuerpo                         shift and go to state 1
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    bucles                         shift and go to state 5
    valor                          shift and go to state 7
    while                          shift and go to state 10
    for                            shift and go to state 11
    number                         shift and go to state 12

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> asignacion .

    $end            reduce using rule 1 (cuerpo -> asignacion .)
    RCBRACKET       reduce using rule 1 (cuerpo -> asignacion .)


state 3

    (2) cuerpo -> expresion .
    (19) expresion -> expresion . operadoresMat expresion
    (20) expresion -> expresion . operadoresLog expresion
    (25) operadoresMat -> . MINUS
    (26) operadoresMat -> . PLUS
    (27) operadoresMat -> . TIMES
    (28) operadoresMat -> . DIVIDE
    (29) operadoresMat -> . MODULE
    (21) operadoresLog -> . OR
    (22) operadoresLog -> . AND
    (23) operadoresLog -> . EQUALS
    (24) operadoresLog -> . NOTEQUALS

    $end            reduce using rule 2 (cuerpo -> expresion .)
    RCBRACKET       reduce using rule 2 (cuerpo -> expresion .)
    MINUS           shift and go to state 21
    PLUS            shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    MODULE          shift and go to state 25
    OR              shift and go to state 26
    AND             shift and go to state 27
    EQUALS          shift and go to state 28
    NOTEQUALS       shift and go to state 29

    operadoresMat                  shift and go to state 19
    operadoresLog                  shift and go to state 20

state 4

    (3) cuerpo -> sentencia .

    $end            reduce using rule 3 (cuerpo -> sentencia .)
    RCBRACKET       reduce using rule 3 (cuerpo -> sentencia .)


state 5

    (4) cuerpo -> bucles .

    $end            reduce using rule 4 (cuerpo -> bucles .)
    RCBRACKET       reduce using rule 4 (cuerpo -> bucles .)


state 6

    (17) asignacion -> ID . ASSIGN expresion ;
    (14) valor -> ID .

    ASSIGN          shift and go to state 30
    MINUS           reduce using rule 14 (valor -> ID .)
    PLUS            reduce using rule 14 (valor -> ID .)
    TIMES           reduce using rule 14 (valor -> ID .)
    DIVIDE          reduce using rule 14 (valor -> ID .)
    MODULE          reduce using rule 14 (valor -> ID .)
    OR              reduce using rule 14 (valor -> ID .)
    AND             reduce using rule 14 (valor -> ID .)
    EQUALS          reduce using rule 14 (valor -> ID .)
    NOTEQUALS       reduce using rule 14 (valor -> ID .)
    $end            reduce using rule 14 (valor -> ID .)
    RCBRACKET       reduce using rule 14 (valor -> ID .)


state 7

    (18) expresion -> valor .

    MINUS           reduce using rule 18 (expresion -> valor .)
    PLUS            reduce using rule 18 (expresion -> valor .)
    TIMES           reduce using rule 18 (expresion -> valor .)
    DIVIDE          reduce using rule 18 (expresion -> valor .)
    MODULE          reduce using rule 18 (expresion -> valor .)
    OR              reduce using rule 18 (expresion -> valor .)
    AND             reduce using rule 18 (expresion -> valor .)
    EQUALS          reduce using rule 18 (expresion -> valor .)
    NOTEQUALS       reduce using rule 18 (expresion -> valor .)
    $end            reduce using rule 18 (expresion -> valor .)
    RCBRACKET       reduce using rule 18 (expresion -> valor .)
    ;               reduce using rule 18 (expresion -> valor .)
    RPAREN          reduce using rule 18 (expresion -> valor .)


state 8

    (7) sentencia -> IF . LPAREN expresion RPAREN instrucciones

    LPAREN          shift and go to state 31


state 9

    (8) sentencia -> ELSE . instrucciones
    (5) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (6) instrucciones -> . cuerpo
    (1) cuerpo -> . asignacion
    (2) cuerpo -> . expresion
    (3) cuerpo -> . sentencia
    (4) cuerpo -> . bucles
    (17) asignacion -> . ID ASSIGN expresion ;
    (18) expresion -> . valor
    (19) expresion -> . expresion operadoresMat expresion
    (20) expresion -> . expresion operadoresLog expresion
    (7) sentencia -> . IF LPAREN expresion RPAREN instrucciones
    (8) sentencia -> . ELSE instrucciones
    (9) bucles -> . while instrucciones
    (10) bucles -> . for instrucciones
    (13) valor -> . number
    (14) valor -> . ID
    (15) valor -> . STRING
    (16) valor -> . NOT valor
    (11) while -> . WHILE LPAREN expresion RPAREN
    (12) for -> . FOR LPAREN ID IN ID RPAREN
    (30) number -> . INTV
    (31) number -> . FLOATV

    LCBRACKET       shift and go to state 33
    ID              shift and go to state 6
    IF              shift and go to state 8
    ELSE            shift and go to state 9
    STRING          shift and go to state 13
    NOT             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    INTV            shift and go to state 17
    FLOATV          shift and go to state 18

    instrucciones                  shift and go to state 32
    cuerpo                         shift and go to state 34
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    bucles                         shift and go to state 5
    valor                          shift and go to state 7
    while                          shift and go to state 10
    for                            shift and go to state 11
    number                         shift and go to state 12

state 10

    (9) bucles -> while . instrucciones
    (5) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (6) instrucciones -> . cuerpo
    (1) cuerpo -> . asignacion
    (2) cuerpo -> . expresion
    (3) cuerpo -> . sentencia
    (4) cuerpo -> . bucles
    (17) asignacion -> . ID ASSIGN expresion ;
    (18) expresion -> . valor
    (19) expresion -> . expresion operadoresMat expresion
    (20) expresion -> . expresion operadoresLog expresion
    (7) sentencia -> . IF LPAREN expresion RPAREN instrucciones
    (8) sentencia -> . ELSE instrucciones
    (9) bucles -> . while instrucciones
    (10) bucles -> . for instrucciones
    (13) valor -> . number
    (14) valor -> . ID
    (15) valor -> . STRING
    (16) valor -> . NOT valor
    (11) while -> . WHILE LPAREN expresion RPAREN
    (12) for -> . FOR LPAREN ID IN ID RPAREN
    (30) number -> . INTV
    (31) number -> . FLOATV

    LCBRACKET       shift and go to state 33
    ID              shift and go to state 6
    IF              shift and go to state 8
    ELSE            shift and go to state 9
    STRING          shift and go to state 13
    NOT             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    INTV            shift and go to state 17
    FLOATV          shift and go to state 18

    while                          shift and go to state 10
    instrucciones                  shift and go to state 35
    cuerpo                         shift and go to state 34
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    bucles                         shift and go to state 5
    valor                          shift and go to state 7
    for                            shift and go to state 11
    number                         shift and go to state 12

state 11

    (10) bucles -> for . instrucciones
    (5) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (6) instrucciones -> . cuerpo
    (1) cuerpo -> . asignacion
    (2) cuerpo -> . expresion
    (3) cuerpo -> . sentencia
    (4) cuerpo -> . bucles
    (17) asignacion -> . ID ASSIGN expresion ;
    (18) expresion -> . valor
    (19) expresion -> . expresion operadoresMat expresion
    (20) expresion -> . expresion operadoresLog expresion
    (7) sentencia -> . IF LPAREN expresion RPAREN instrucciones
    (8) sentencia -> . ELSE instrucciones
    (9) bucles -> . while instrucciones
    (10) bucles -> . for instrucciones
    (13) valor -> . number
    (14) valor -> . ID
    (15) valor -> . STRING
    (16) valor -> . NOT valor
    (11) while -> . WHILE LPAREN expresion RPAREN
    (12) for -> . FOR LPAREN ID IN ID RPAREN
    (30) number -> . INTV
    (31) number -> . FLOATV

    LCBRACKET       shift and go to state 33
    ID              shift and go to state 6
    IF              shift and go to state 8
    ELSE            shift and go to state 9
    STRING          shift and go to state 13
    NOT             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    INTV            shift and go to state 17
    FLOATV          shift and go to state 18

    for                            shift and go to state 11
    instrucciones                  shift and go to state 36
    cuerpo                         shift and go to state 34
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    bucles                         shift and go to state 5
    valor                          shift and go to state 7
    while                          shift and go to state 10
    number                         shift and go to state 12

state 12

    (13) valor -> number .

    MINUS           reduce using rule 13 (valor -> number .)
    PLUS            reduce using rule 13 (valor -> number .)
    TIMES           reduce using rule 13 (valor -> number .)
    DIVIDE          reduce using rule 13 (valor -> number .)
    MODULE          reduce using rule 13 (valor -> number .)
    OR              reduce using rule 13 (valor -> number .)
    AND             reduce using rule 13 (valor -> number .)
    EQUALS          reduce using rule 13 (valor -> number .)
    NOTEQUALS       reduce using rule 13 (valor -> number .)
    $end            reduce using rule 13 (valor -> number .)
    RCBRACKET       reduce using rule 13 (valor -> number .)
    ;               reduce using rule 13 (valor -> number .)
    RPAREN          reduce using rule 13 (valor -> number .)


state 13

    (15) valor -> STRING .

    MINUS           reduce using rule 15 (valor -> STRING .)
    PLUS            reduce using rule 15 (valor -> STRING .)
    TIMES           reduce using rule 15 (valor -> STRING .)
    DIVIDE          reduce using rule 15 (valor -> STRING .)
    MODULE          reduce using rule 15 (valor -> STRING .)
    OR              reduce using rule 15 (valor -> STRING .)
    AND             reduce using rule 15 (valor -> STRING .)
    EQUALS          reduce using rule 15 (valor -> STRING .)
    NOTEQUALS       reduce using rule 15 (valor -> STRING .)
    $end            reduce using rule 15 (valor -> STRING .)
    RCBRACKET       reduce using rule 15 (valor -> STRING .)
    ;               reduce using rule 15 (valor -> STRING .)
    RPAREN          reduce using rule 15 (valor -> STRING .)


state 14

    (16) valor -> NOT . valor
    (13) valor -> . number
    (14) valor -> . ID
    (15) valor -> . STRING
    (16) valor -> . NOT valor
    (30) number -> . INTV
    (31) number -> . FLOATV

    ID              shift and go to state 38
    STRING          shift and go to state 13
    NOT             shift and go to state 14
    INTV            shift and go to state 17
    FLOATV          shift and go to state 18

    valor                          shift and go to state 37
    number                         shift and go to state 12

state 15

    (11) while -> WHILE . LPAREN expresion RPAREN

    LPAREN          shift and go to state 39


state 16

    (12) for -> FOR . LPAREN ID IN ID RPAREN

    LPAREN          shift and go to state 40


state 17

    (30) number -> INTV .

    MINUS           reduce using rule 30 (number -> INTV .)
    PLUS            reduce using rule 30 (number -> INTV .)
    TIMES           reduce using rule 30 (number -> INTV .)
    DIVIDE          reduce using rule 30 (number -> INTV .)
    MODULE          reduce using rule 30 (number -> INTV .)
    OR              reduce using rule 30 (number -> INTV .)
    AND             reduce using rule 30 (number -> INTV .)
    EQUALS          reduce using rule 30 (number -> INTV .)
    NOTEQUALS       reduce using rule 30 (number -> INTV .)
    $end            reduce using rule 30 (number -> INTV .)
    RCBRACKET       reduce using rule 30 (number -> INTV .)
    ;               reduce using rule 30 (number -> INTV .)
    RPAREN          reduce using rule 30 (number -> INTV .)


state 18

    (31) number -> FLOATV .

    MINUS           reduce using rule 31 (number -> FLOATV .)
    PLUS            reduce using rule 31 (number -> FLOATV .)
    TIMES           reduce using rule 31 (number -> FLOATV .)
    DIVIDE          reduce using rule 31 (number -> FLOATV .)
    MODULE          reduce using rule 31 (number -> FLOATV .)
    OR              reduce using rule 31 (number -> FLOATV .)
    AND             reduce using rule 31 (number -> FLOATV .)
    EQUALS          reduce using rule 31 (number -> FLOATV .)
    NOTEQUALS       reduce using rule 31 (number -> FLOATV .)
    $end            reduce using rule 31 (number -> FLOATV .)
    RCBRACKET       reduce using rule 31 (number -> FLOATV .)
    ;               reduce using rule 31 (number -> FLOATV .)
    RPAREN          reduce using rule 31 (number -> FLOATV .)


state 19

    (19) expresion -> expresion operadoresMat . expresion
    (18) expresion -> . valor
    (19) expresion -> . expresion operadoresMat expresion
    (20) expresion -> . expresion operadoresLog expresion
    (13) valor -> . number
    (14) valor -> . ID
    (15) valor -> . STRING
    (16) valor -> . NOT valor
    (30) number -> . INTV
    (31) number -> . FLOATV

    ID              shift and go to state 38
    STRING          shift and go to state 13
    NOT             shift and go to state 14
    INTV            shift and go to state 17
    FLOATV          shift and go to state 18

    expresion                      shift and go to state 41
    valor                          shift and go to state 7
    number                         shift and go to state 12

state 20

    (20) expresion -> expresion operadoresLog . expresion
    (18) expresion -> . valor
    (19) expresion -> . expresion operadoresMat expresion
    (20) expresion -> . expresion operadoresLog expresion
    (13) valor -> . number
    (14) valor -> . ID
    (15) valor -> . STRING
    (16) valor -> . NOT valor
    (30) number -> . INTV
    (31) number -> . FLOATV

    ID              shift and go to state 38
    STRING          shift and go to state 13
    NOT             shift and go to state 14
    INTV            shift and go to state 17
    FLOATV          shift and go to state 18

    expresion                      shift and go to state 42
    valor                          shift and go to state 7
    number                         shift and go to state 12

state 21

    (25) operadoresMat -> MINUS .

    ID              reduce using rule 25 (operadoresMat -> MINUS .)
    STRING          reduce using rule 25 (operadoresMat -> MINUS .)
    NOT             reduce using rule 25 (operadoresMat -> MINUS .)
    INTV            reduce using rule 25 (operadoresMat -> MINUS .)
    FLOATV          reduce using rule 25 (operadoresMat -> MINUS .)


state 22

    (26) operadoresMat -> PLUS .

    ID              reduce using rule 26 (operadoresMat -> PLUS .)
    STRING          reduce using rule 26 (operadoresMat -> PLUS .)
    NOT             reduce using rule 26 (operadoresMat -> PLUS .)
    INTV            reduce using rule 26 (operadoresMat -> PLUS .)
    FLOATV          reduce using rule 26 (operadoresMat -> PLUS .)


state 23

    (27) operadoresMat -> TIMES .

    ID              reduce using rule 27 (operadoresMat -> TIMES .)
    STRING          reduce using rule 27 (operadoresMat -> TIMES .)
    NOT             reduce using rule 27 (operadoresMat -> TIMES .)
    INTV            reduce using rule 27 (operadoresMat -> TIMES .)
    FLOATV          reduce using rule 27 (operadoresMat -> TIMES .)


state 24

    (28) operadoresMat -> DIVIDE .

    ID              reduce using rule 28 (operadoresMat -> DIVIDE .)
    STRING          reduce using rule 28 (operadoresMat -> DIVIDE .)
    NOT             reduce using rule 28 (operadoresMat -> DIVIDE .)
    INTV            reduce using rule 28 (operadoresMat -> DIVIDE .)
    FLOATV          reduce using rule 28 (operadoresMat -> DIVIDE .)


state 25

    (29) operadoresMat -> MODULE .

    ID              reduce using rule 29 (operadoresMat -> MODULE .)
    STRING          reduce using rule 29 (operadoresMat -> MODULE .)
    NOT             reduce using rule 29 (operadoresMat -> MODULE .)
    INTV            reduce using rule 29 (operadoresMat -> MODULE .)
    FLOATV          reduce using rule 29 (operadoresMat -> MODULE .)


state 26

    (21) operadoresLog -> OR .

    ID              reduce using rule 21 (operadoresLog -> OR .)
    STRING          reduce using rule 21 (operadoresLog -> OR .)
    NOT             reduce using rule 21 (operadoresLog -> OR .)
    INTV            reduce using rule 21 (operadoresLog -> OR .)
    FLOATV          reduce using rule 21 (operadoresLog -> OR .)


state 27

    (22) operadoresLog -> AND .

    ID              reduce using rule 22 (operadoresLog -> AND .)
    STRING          reduce using rule 22 (operadoresLog -> AND .)
    NOT             reduce using rule 22 (operadoresLog -> AND .)
    INTV            reduce using rule 22 (operadoresLog -> AND .)
    FLOATV          reduce using rule 22 (operadoresLog -> AND .)


state 28

    (23) operadoresLog -> EQUALS .

    ID              reduce using rule 23 (operadoresLog -> EQUALS .)
    STRING          reduce using rule 23 (operadoresLog -> EQUALS .)
    NOT             reduce using rule 23 (operadoresLog -> EQUALS .)
    INTV            reduce using rule 23 (operadoresLog -> EQUALS .)
    FLOATV          reduce using rule 23 (operadoresLog -> EQUALS .)


state 29

    (24) operadoresLog -> NOTEQUALS .

    ID              reduce using rule 24 (operadoresLog -> NOTEQUALS .)
    STRING          reduce using rule 24 (operadoresLog -> NOTEQUALS .)
    NOT             reduce using rule 24 (operadoresLog -> NOTEQUALS .)
    INTV            reduce using rule 24 (operadoresLog -> NOTEQUALS .)
    FLOATV          reduce using rule 24 (operadoresLog -> NOTEQUALS .)


state 30

    (17) asignacion -> ID ASSIGN . expresion ;
    (18) expresion -> . valor
    (19) expresion -> . expresion operadoresMat expresion
    (20) expresion -> . expresion operadoresLog expresion
    (13) valor -> . number
    (14) valor -> . ID
    (15) valor -> . STRING
    (16) valor -> . NOT valor
    (30) number -> . INTV
    (31) number -> . FLOATV

    ID              shift and go to state 38
    STRING          shift and go to state 13
    NOT             shift and go to state 14
    INTV            shift and go to state 17
    FLOATV          shift and go to state 18

    expresion                      shift and go to state 43
    valor                          shift and go to state 7
    number                         shift and go to state 12

state 31

    (7) sentencia -> IF LPAREN . expresion RPAREN instrucciones
    (18) expresion -> . valor
    (19) expresion -> . expresion operadoresMat expresion
    (20) expresion -> . expresion operadoresLog expresion
    (13) valor -> . number
    (14) valor -> . ID
    (15) valor -> . STRING
    (16) valor -> . NOT valor
    (30) number -> . INTV
    (31) number -> . FLOATV

    ID              shift and go to state 38
    STRING          shift and go to state 13
    NOT             shift and go to state 14
    INTV            shift and go to state 17
    FLOATV          shift and go to state 18

    expresion                      shift and go to state 44
    valor                          shift and go to state 7
    number                         shift and go to state 12

state 32

    (8) sentencia -> ELSE instrucciones .

    $end            reduce using rule 8 (sentencia -> ELSE instrucciones .)
    RCBRACKET       reduce using rule 8 (sentencia -> ELSE instrucciones .)


state 33

    (5) instrucciones -> LCBRACKET . cuerpo RCBRACKET
    (1) cuerpo -> . asignacion
    (2) cuerpo -> . expresion
    (3) cuerpo -> . sentencia
    (4) cuerpo -> . bucles
    (17) asignacion -> . ID ASSIGN expresion ;
    (18) expresion -> . valor
    (19) expresion -> . expresion operadoresMat expresion
    (20) expresion -> . expresion operadoresLog expresion
    (7) sentencia -> . IF LPAREN expresion RPAREN instrucciones
    (8) sentencia -> . ELSE instrucciones
    (9) bucles -> . while instrucciones
    (10) bucles -> . for instrucciones
    (13) valor -> . number
    (14) valor -> . ID
    (15) valor -> . STRING
    (16) valor -> . NOT valor
    (11) while -> . WHILE LPAREN expresion RPAREN
    (12) for -> . FOR LPAREN ID IN ID RPAREN
    (30) number -> . INTV
    (31) number -> . FLOATV

    ID              shift and go to state 6
    IF              shift and go to state 8
    ELSE            shift and go to state 9
    STRING          shift and go to state 13
    NOT             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    INTV            shift and go to state 17
    FLOATV          shift and go to state 18

    cuerpo                         shift and go to state 45
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    bucles                         shift and go to state 5
    valor                          shift and go to state 7
    while                          shift and go to state 10
    for                            shift and go to state 11
    number                         shift and go to state 12

state 34

    (6) instrucciones -> cuerpo .

    $end            reduce using rule 6 (instrucciones -> cuerpo .)
    RCBRACKET       reduce using rule 6 (instrucciones -> cuerpo .)


state 35

    (9) bucles -> while instrucciones .

    $end            reduce using rule 9 (bucles -> while instrucciones .)
    RCBRACKET       reduce using rule 9 (bucles -> while instrucciones .)


state 36

    (10) bucles -> for instrucciones .

    $end            reduce using rule 10 (bucles -> for instrucciones .)
    RCBRACKET       reduce using rule 10 (bucles -> for instrucciones .)


state 37

    (16) valor -> NOT valor .

    MINUS           reduce using rule 16 (valor -> NOT valor .)
    PLUS            reduce using rule 16 (valor -> NOT valor .)
    TIMES           reduce using rule 16 (valor -> NOT valor .)
    DIVIDE          reduce using rule 16 (valor -> NOT valor .)
    MODULE          reduce using rule 16 (valor -> NOT valor .)
    OR              reduce using rule 16 (valor -> NOT valor .)
    AND             reduce using rule 16 (valor -> NOT valor .)
    EQUALS          reduce using rule 16 (valor -> NOT valor .)
    NOTEQUALS       reduce using rule 16 (valor -> NOT valor .)
    $end            reduce using rule 16 (valor -> NOT valor .)
    RCBRACKET       reduce using rule 16 (valor -> NOT valor .)
    ;               reduce using rule 16 (valor -> NOT valor .)
    RPAREN          reduce using rule 16 (valor -> NOT valor .)


state 38

    (14) valor -> ID .

    MINUS           reduce using rule 14 (valor -> ID .)
    PLUS            reduce using rule 14 (valor -> ID .)
    TIMES           reduce using rule 14 (valor -> ID .)
    DIVIDE          reduce using rule 14 (valor -> ID .)
    MODULE          reduce using rule 14 (valor -> ID .)
    OR              reduce using rule 14 (valor -> ID .)
    AND             reduce using rule 14 (valor -> ID .)
    EQUALS          reduce using rule 14 (valor -> ID .)
    NOTEQUALS       reduce using rule 14 (valor -> ID .)
    $end            reduce using rule 14 (valor -> ID .)
    RCBRACKET       reduce using rule 14 (valor -> ID .)
    ;               reduce using rule 14 (valor -> ID .)
    RPAREN          reduce using rule 14 (valor -> ID .)


state 39

    (11) while -> WHILE LPAREN . expresion RPAREN
    (18) expresion -> . valor
    (19) expresion -> . expresion operadoresMat expresion
    (20) expresion -> . expresion operadoresLog expresion
    (13) valor -> . number
    (14) valor -> . ID
    (15) valor -> . STRING
    (16) valor -> . NOT valor
    (30) number -> . INTV
    (31) number -> . FLOATV

    ID              shift and go to state 38
    STRING          shift and go to state 13
    NOT             shift and go to state 14
    INTV            shift and go to state 17
    FLOATV          shift and go to state 18

    expresion                      shift and go to state 46
    valor                          shift and go to state 7
    number                         shift and go to state 12

state 40

    (12) for -> FOR LPAREN . ID IN ID RPAREN

    ID              shift and go to state 47


state 41

    (19) expresion -> expresion operadoresMat expresion .
    (19) expresion -> expresion . operadoresMat expresion
    (20) expresion -> expresion . operadoresLog expresion
    (25) operadoresMat -> . MINUS
    (26) operadoresMat -> . PLUS
    (27) operadoresMat -> . TIMES
    (28) operadoresMat -> . DIVIDE
    (29) operadoresMat -> . MODULE
    (21) operadoresLog -> . OR
    (22) operadoresLog -> . AND
    (23) operadoresLog -> . EQUALS
    (24) operadoresLog -> . NOTEQUALS

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
    $end            reduce using rule 19 (expresion -> expresion operadoresMat expresion .)
    RCBRACKET       reduce using rule 19 (expresion -> expresion operadoresMat expresion .)
    ;               reduce using rule 19 (expresion -> expresion operadoresMat expresion .)
    RPAREN          reduce using rule 19 (expresion -> expresion operadoresMat expresion .)
    MINUS           shift and go to state 21
    PLUS            shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    MODULE          shift and go to state 25
    OR              shift and go to state 26
    AND             shift and go to state 27
    EQUALS          shift and go to state 28
    NOTEQUALS       shift and go to state 29

  ! MINUS           [ reduce using rule 19 (expresion -> expresion operadoresMat expresion .) ]
  ! PLUS            [ reduce using rule 19 (expresion -> expresion operadoresMat expresion .) ]
  ! TIMES           [ reduce using rule 19 (expresion -> expresion operadoresMat expresion .) ]
  ! DIVIDE          [ reduce using rule 19 (expresion -> expresion operadoresMat expresion .) ]
  ! MODULE          [ reduce using rule 19 (expresion -> expresion operadoresMat expresion .) ]
  ! OR              [ reduce using rule 19 (expresion -> expresion operadoresMat expresion .) ]
  ! AND             [ reduce using rule 19 (expresion -> expresion operadoresMat expresion .) ]
  ! EQUALS          [ reduce using rule 19 (expresion -> expresion operadoresMat expresion .) ]
  ! NOTEQUALS       [ reduce using rule 19 (expresion -> expresion operadoresMat expresion .) ]

    operadoresMat                  shift and go to state 19
    operadoresLog                  shift and go to state 20

state 42

    (20) expresion -> expresion operadoresLog expresion .
    (19) expresion -> expresion . operadoresMat expresion
    (20) expresion -> expresion . operadoresLog expresion
    (25) operadoresMat -> . MINUS
    (26) operadoresMat -> . PLUS
    (27) operadoresMat -> . TIMES
    (28) operadoresMat -> . DIVIDE
    (29) operadoresMat -> . MODULE
    (21) operadoresLog -> . OR
    (22) operadoresLog -> . AND
    (23) operadoresLog -> . EQUALS
    (24) operadoresLog -> . NOTEQUALS

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
    $end            reduce using rule 20 (expresion -> expresion operadoresLog expresion .)
    RCBRACKET       reduce using rule 20 (expresion -> expresion operadoresLog expresion .)
    ;               reduce using rule 20 (expresion -> expresion operadoresLog expresion .)
    RPAREN          reduce using rule 20 (expresion -> expresion operadoresLog expresion .)
    MINUS           shift and go to state 21
    PLUS            shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    MODULE          shift and go to state 25
    OR              shift and go to state 26
    AND             shift and go to state 27
    EQUALS          shift and go to state 28
    NOTEQUALS       shift and go to state 29

  ! MINUS           [ reduce using rule 20 (expresion -> expresion operadoresLog expresion .) ]
  ! PLUS            [ reduce using rule 20 (expresion -> expresion operadoresLog expresion .) ]
  ! TIMES           [ reduce using rule 20 (expresion -> expresion operadoresLog expresion .) ]
  ! DIVIDE          [ reduce using rule 20 (expresion -> expresion operadoresLog expresion .) ]
  ! MODULE          [ reduce using rule 20 (expresion -> expresion operadoresLog expresion .) ]
  ! OR              [ reduce using rule 20 (expresion -> expresion operadoresLog expresion .) ]
  ! AND             [ reduce using rule 20 (expresion -> expresion operadoresLog expresion .) ]
  ! EQUALS          [ reduce using rule 20 (expresion -> expresion operadoresLog expresion .) ]
  ! NOTEQUALS       [ reduce using rule 20 (expresion -> expresion operadoresLog expresion .) ]

    operadoresLog                  shift and go to state 20
    operadoresMat                  shift and go to state 19

state 43

    (17) asignacion -> ID ASSIGN expresion . ;
    (19) expresion -> expresion . operadoresMat expresion
    (20) expresion -> expresion . operadoresLog expresion
    (25) operadoresMat -> . MINUS
    (26) operadoresMat -> . PLUS
    (27) operadoresMat -> . TIMES
    (28) operadoresMat -> . DIVIDE
    (29) operadoresMat -> . MODULE
    (21) operadoresLog -> . OR
    (22) operadoresLog -> . AND
    (23) operadoresLog -> . EQUALS
    (24) operadoresLog -> . NOTEQUALS

    ;               shift and go to state 48
    MINUS           shift and go to state 21
    PLUS            shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    MODULE          shift and go to state 25
    OR              shift and go to state 26
    AND             shift and go to state 27
    EQUALS          shift and go to state 28
    NOTEQUALS       shift and go to state 29

    operadoresMat                  shift and go to state 19
    operadoresLog                  shift and go to state 20

state 44

    (7) sentencia -> IF LPAREN expresion . RPAREN instrucciones
    (19) expresion -> expresion . operadoresMat expresion
    (20) expresion -> expresion . operadoresLog expresion
    (25) operadoresMat -> . MINUS
    (26) operadoresMat -> . PLUS
    (27) operadoresMat -> . TIMES
    (28) operadoresMat -> . DIVIDE
    (29) operadoresMat -> . MODULE
    (21) operadoresLog -> . OR
    (22) operadoresLog -> . AND
    (23) operadoresLog -> . EQUALS
    (24) operadoresLog -> . NOTEQUALS

    RPAREN          shift and go to state 49
    MINUS           shift and go to state 21
    PLUS            shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    MODULE          shift and go to state 25
    OR              shift and go to state 26
    AND             shift and go to state 27
    EQUALS          shift and go to state 28
    NOTEQUALS       shift and go to state 29

    operadoresMat                  shift and go to state 19
    operadoresLog                  shift and go to state 20

state 45

    (5) instrucciones -> LCBRACKET cuerpo . RCBRACKET

    RCBRACKET       shift and go to state 50


state 46

    (11) while -> WHILE LPAREN expresion . RPAREN
    (19) expresion -> expresion . operadoresMat expresion
    (20) expresion -> expresion . operadoresLog expresion
    (25) operadoresMat -> . MINUS
    (26) operadoresMat -> . PLUS
    (27) operadoresMat -> . TIMES
    (28) operadoresMat -> . DIVIDE
    (29) operadoresMat -> . MODULE
    (21) operadoresLog -> . OR
    (22) operadoresLog -> . AND
    (23) operadoresLog -> . EQUALS
    (24) operadoresLog -> . NOTEQUALS

    RPAREN          shift and go to state 51
    MINUS           shift and go to state 21
    PLUS            shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    MODULE          shift and go to state 25
    OR              shift and go to state 26
    AND             shift and go to state 27
    EQUALS          shift and go to state 28
    NOTEQUALS       shift and go to state 29

    operadoresMat                  shift and go to state 19
    operadoresLog                  shift and go to state 20

state 47

    (12) for -> FOR LPAREN ID . IN ID RPAREN

    IN              shift and go to state 52


state 48

    (17) asignacion -> ID ASSIGN expresion ; .

    $end            reduce using rule 17 (asignacion -> ID ASSIGN expresion ; .)
    RCBRACKET       reduce using rule 17 (asignacion -> ID ASSIGN expresion ; .)


state 49

    (7) sentencia -> IF LPAREN expresion RPAREN . instrucciones
    (5) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (6) instrucciones -> . cuerpo
    (1) cuerpo -> . asignacion
    (2) cuerpo -> . expresion
    (3) cuerpo -> . sentencia
    (4) cuerpo -> . bucles
    (17) asignacion -> . ID ASSIGN expresion ;
    (18) expresion -> . valor
    (19) expresion -> . expresion operadoresMat expresion
    (20) expresion -> . expresion operadoresLog expresion
    (7) sentencia -> . IF LPAREN expresion RPAREN instrucciones
    (8) sentencia -> . ELSE instrucciones
    (9) bucles -> . while instrucciones
    (10) bucles -> . for instrucciones
    (13) valor -> . number
    (14) valor -> . ID
    (15) valor -> . STRING
    (16) valor -> . NOT valor
    (11) while -> . WHILE LPAREN expresion RPAREN
    (12) for -> . FOR LPAREN ID IN ID RPAREN
    (30) number -> . INTV
    (31) number -> . FLOATV

    LCBRACKET       shift and go to state 33
    ID              shift and go to state 6
    IF              shift and go to state 8
    ELSE            shift and go to state 9
    STRING          shift and go to state 13
    NOT             shift and go to state 14
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    INTV            shift and go to state 17
    FLOATV          shift and go to state 18

    expresion                      shift and go to state 3
    instrucciones                  shift and go to state 53
    cuerpo                         shift and go to state 34
    asignacion                     shift and go to state 2
    sentencia                      shift and go to state 4
    bucles                         shift and go to state 5
    valor                          shift and go to state 7
    while                          shift and go to state 10
    for                            shift and go to state 11
    number                         shift and go to state 12

state 50

    (5) instrucciones -> LCBRACKET cuerpo RCBRACKET .

    $end            reduce using rule 5 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    RCBRACKET       reduce using rule 5 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)


state 51

    (11) while -> WHILE LPAREN expresion RPAREN .

    LCBRACKET       reduce using rule 11 (while -> WHILE LPAREN expresion RPAREN .)
    ID              reduce using rule 11 (while -> WHILE LPAREN expresion RPAREN .)
    IF              reduce using rule 11 (while -> WHILE LPAREN expresion RPAREN .)
    ELSE            reduce using rule 11 (while -> WHILE LPAREN expresion RPAREN .)
    STRING          reduce using rule 11 (while -> WHILE LPAREN expresion RPAREN .)
    NOT             reduce using rule 11 (while -> WHILE LPAREN expresion RPAREN .)
    WHILE           reduce using rule 11 (while -> WHILE LPAREN expresion RPAREN .)
    FOR             reduce using rule 11 (while -> WHILE LPAREN expresion RPAREN .)
    INTV            reduce using rule 11 (while -> WHILE LPAREN expresion RPAREN .)
    FLOATV          reduce using rule 11 (while -> WHILE LPAREN expresion RPAREN .)


state 52

    (12) for -> FOR LPAREN ID IN . ID RPAREN

    ID              shift and go to state 54


state 53

    (7) sentencia -> IF LPAREN expresion RPAREN instrucciones .

    $end            reduce using rule 7 (sentencia -> IF LPAREN expresion RPAREN instrucciones .)
    RCBRACKET       reduce using rule 7 (sentencia -> IF LPAREN expresion RPAREN instrucciones .)


state 54

    (12) for -> FOR LPAREN ID IN ID . RPAREN

    RPAREN          shift and go to state 55


state 55

    (12) for -> FOR LPAREN ID IN ID RPAREN .

    LCBRACKET       reduce using rule 12 (for -> FOR LPAREN ID IN ID RPAREN .)
    ID              reduce using rule 12 (for -> FOR LPAREN ID IN ID RPAREN .)
    IF              reduce using rule 12 (for -> FOR LPAREN ID IN ID RPAREN .)
    ELSE            reduce using rule 12 (for -> FOR LPAREN ID IN ID RPAREN .)
    STRING          reduce using rule 12 (for -> FOR LPAREN ID IN ID RPAREN .)
    NOT             reduce using rule 12 (for -> FOR LPAREN ID IN ID RPAREN .)
    WHILE           reduce using rule 12 (for -> FOR LPAREN ID IN ID RPAREN .)
    FOR             reduce using rule 12 (for -> FOR LPAREN ID IN ID RPAREN .)
    INTV            reduce using rule 12 (for -> FOR LPAREN ID IN ID RPAREN .)
    FLOATV          reduce using rule 12 (for -> FOR LPAREN ID IN ID RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 41 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 41 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 41 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 41 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 41 resolved as shift
WARNING: shift/reduce conflict for OR in state 41 resolved as shift
WARNING: shift/reduce conflict for AND in state 41 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 41 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 41 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 42 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 42 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 42 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 42 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 42 resolved as shift
WARNING: shift/reduce conflict for OR in state 42 resolved as shift
WARNING: shift/reduce conflict for AND in state 42 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 42 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 42 resolved as shift
