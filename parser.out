Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> sentencia
Rule 2     cuerpo -> sentencia cuerpo
Rule 3     cuerpo -> function cuerpo
Rule 4     sentencia -> asignacion ;
Rule 5     sentencia -> expresion
Rule 6     sentencia -> estructuraControl
Rule 7     sentencia -> bucles
Rule 8     sentencia -> llamada ;
Rule 9     instrucciones -> LCBRACKET cuerpo RCBRACKET
Rule 10    instrucciones -> sentencia
Rule 11    instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET
Rule 12    retorno -> RETURN valor ;
Rule 13    estructuraControl -> IF LPAREN expresion RPAREN instrucciones
Rule 14    estructuraControl -> ELSE instrucciones
Rule 15    bucles -> while instrucciones
Rule 16    bucles -> for instrucciones
Rule 17    while -> WHILE LPAREN expresion RPAREN
Rule 18    for -> FOR LPAREN ID IN ID RPAREN
Rule 19    function -> FUNCTION ID LPAREN params RPAREN instruccionesF
Rule 20    function -> FUNCTION ID LPAREN RPAREN instruccionesF
Rule 21    llamada -> ID LPAREN args RPAREN
Rule 22    llamada -> ID LPAREN RPAREN
Rule 23    function -> ID LSBRACKET valor RSBRACKET
Rule 24    dato -> INT
Rule 25    dato -> FLOAT
Rule 26    dato -> BYTE
Rule 27    dato -> SHORT
Rule 28    dato -> DOUBLE
Rule 29    dato -> ID
Rule 30    dato -> LONG
Rule 31    dato -> CHAR
Rule 32    dato -> BOOLEAN
Rule 33    params -> ID : dato
Rule 34    params -> params , params
Rule 35    args -> valor
Rule 36    args -> args , args
Rule 37    valor -> number
Rule 38    valor -> ID
Rule 39    valor -> STRING
Rule 40    valor -> TRUE
Rule 41    valor -> FALSE
Rule 42    valor -> NULL
Rule 43    valor -> NOT valor
Rule 44    declarador -> VAR
Rule 45    declarador -> VAL
Rule 46    asignacion -> ID ASSIGN expresion
Rule 47    asignacion -> declarador ID ASSIGN expresion
Rule 48    declarador -> VAR ID
Rule 49    declarador -> VAL ID
Rule 50    expresion -> LPAREN expresion RPAREN
Rule 51    expresion -> valor
Rule 52    expresion -> expresion operadoresMat expresion
Rule 53    expresion -> expresion operadoresLog expresion
Rule 54    operadoresLog -> OR
Rule 55    operadoresLog -> AND
Rule 56    operadoresLog -> EQUALS
Rule 57    operadoresLog -> NOTEQUALS
Rule 58    operadoresLog -> GREATER
Rule 59    operadoresLog -> LOWER
Rule 60    operadoresLog -> GREATER ASSIGN
Rule 61    operadoresLog -> LOWER ASSIGN
Rule 62    operadoresMat -> MINUS
Rule 63    operadoresMat -> PLUS
Rule 64    operadoresMat -> TIMES
Rule 65    operadoresMat -> DIVIDE
Rule 66    operadoresMat -> MODULE
Rule 67    number -> INTV
Rule 68    number -> FLOATV

Terminals, with rules where they appear

,                    : 34 36
:                    : 33
;                    : 4 8 12
AND                  : 55
ASSIGN               : 46 47 60 61
BOOLEAN              : 32
BYTE                 : 26
CHAR                 : 31
DIVIDE               : 65
DOUBLE               : 28
ELSE                 : 14
EQUALS               : 56
FALSE                : 41
FLOAT                : 25
FLOATV               : 68
FOR                  : 18
FUNCTION             : 19 20
GREATER              : 58 60
ID                   : 18 18 19 20 21 22 23 29 33 38 46 47 48 49
IF                   : 13
IN                   : 18
INT                  : 24
INTV                 : 67
LCBRACKET            : 9 11
LONG                 : 30
LOWER                : 59 61
LPAREN               : 13 17 18 19 20 21 22 50
LSBRACKET            : 23
MINUS                : 62
MODULE               : 66
NOT                  : 43
NOTEQUALS            : 57
NULL                 : 42
OR                   : 54
PLUS                 : 63
RCBRACKET            : 9 11
RETURN               : 12
RPAREN               : 13 17 18 19 20 21 22 50
RSBRACKET            : 23
SHORT                : 27
STRING               : 39
TIMES                : 64
TRUE                 : 40
VAL                  : 45 49
VAR                  : 44 48
WHILE                : 17
error                : 

Nonterminals, with rules where they appear

args                 : 21 36 36
asignacion           : 4
bucles               : 7
cuerpo               : 2 3 9 11 0
dato                 : 33
declarador           : 47
estructuraControl    : 6
expresion            : 5 13 17 46 47 50 52 52 53 53
for                  : 16
function             : 3
instrucciones        : 13 14 15 16
instruccionesF       : 19 20
llamada              : 8
number               : 37
operadoresLog        : 53
operadoresMat        : 52
params               : 19 34 34
retorno              : 11
sentencia            : 1 2 10
valor                : 12 23 35 43 51
while                : 15

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . sentencia cuerpo
    (3) cuerpo -> . function cuerpo
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . expresion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada ;
    (19) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (20) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (23) function -> . ID LSBRACKET valor RSBRACKET
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (50) expresion -> . LPAREN expresion RPAREN
    (51) expresion -> . valor
    (52) expresion -> . expresion operadoresMat expresion
    (53) expresion -> . expresion operadoresLog expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (48) declarador -> . VAR ID
    (49) declarador -> . VAL ID
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN
    (67) number -> . INTV
    (68) number -> . FLOATV

    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    LPAREN          shift and go to state 11
    IF              shift and go to state 14
    ELSE            shift and go to state 15
    VAR             shift and go to state 18
    VAL             shift and go to state 19
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    cuerpo                         shift and go to state 1
    sentencia                      shift and go to state 2
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    estructuraControl              shift and go to state 6
    bucles                         shift and go to state 7
    llamada                        shift and go to state 8
    valor                          shift and go to state 12
    declarador                     shift and go to state 13
    while                          shift and go to state 16
    for                            shift and go to state 17
    number                         shift and go to state 20

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> sentencia .
    (2) cuerpo -> sentencia . cuerpo
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . sentencia cuerpo
    (3) cuerpo -> . function cuerpo
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . expresion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada ;
    (19) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (20) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (23) function -> . ID LSBRACKET valor RSBRACKET
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (50) expresion -> . LPAREN expresion RPAREN
    (51) expresion -> . valor
    (52) expresion -> . expresion operadoresMat expresion
    (53) expresion -> . expresion operadoresLog expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (48) declarador -> . VAR ID
    (49) declarador -> . VAL ID
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN
    (67) number -> . INTV
    (68) number -> . FLOATV

    $end            reduce using rule 1 (cuerpo -> sentencia .)
    RCBRACKET       reduce using rule 1 (cuerpo -> sentencia .)
    RETURN          reduce using rule 1 (cuerpo -> sentencia .)
    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    LPAREN          shift and go to state 11
    IF              shift and go to state 14
    ELSE            shift and go to state 15
    VAR             shift and go to state 18
    VAL             shift and go to state 19
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    sentencia                      shift and go to state 2
    cuerpo                         shift and go to state 30
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    estructuraControl              shift and go to state 6
    bucles                         shift and go to state 7
    llamada                        shift and go to state 8
    valor                          shift and go to state 12
    declarador                     shift and go to state 13
    while                          shift and go to state 16
    for                            shift and go to state 17
    number                         shift and go to state 20

state 3

    (3) cuerpo -> function . cuerpo
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . sentencia cuerpo
    (3) cuerpo -> . function cuerpo
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . expresion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada ;
    (19) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (20) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (23) function -> . ID LSBRACKET valor RSBRACKET
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (50) expresion -> . LPAREN expresion RPAREN
    (51) expresion -> . valor
    (52) expresion -> . expresion operadoresMat expresion
    (53) expresion -> . expresion operadoresLog expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (48) declarador -> . VAR ID
    (49) declarador -> . VAL ID
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN
    (67) number -> . INTV
    (68) number -> . FLOATV

    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    LPAREN          shift and go to state 11
    IF              shift and go to state 14
    ELSE            shift and go to state 15
    VAR             shift and go to state 18
    VAL             shift and go to state 19
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    function                       shift and go to state 3
    cuerpo                         shift and go to state 31
    sentencia                      shift and go to state 2
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    estructuraControl              shift and go to state 6
    bucles                         shift and go to state 7
    llamada                        shift and go to state 8
    valor                          shift and go to state 12
    declarador                     shift and go to state 13
    while                          shift and go to state 16
    for                            shift and go to state 17
    number                         shift and go to state 20

state 4

    (4) sentencia -> asignacion . ;

    ;               shift and go to state 32


state 5

    (5) sentencia -> expresion .
    (52) expresion -> expresion . operadoresMat expresion
    (53) expresion -> expresion . operadoresLog expresion
    (62) operadoresMat -> . MINUS
    (63) operadoresMat -> . PLUS
    (64) operadoresMat -> . TIMES
    (65) operadoresMat -> . DIVIDE
    (66) operadoresMat -> . MODULE
    (54) operadoresLog -> . OR
    (55) operadoresLog -> . AND
    (56) operadoresLog -> . EQUALS
    (57) operadoresLog -> . NOTEQUALS
    (58) operadoresLog -> . GREATER
    (59) operadoresLog -> . LOWER
    (60) operadoresLog -> . GREATER ASSIGN
    (61) operadoresLog -> . LOWER ASSIGN

    FUNCTION        reduce using rule 5 (sentencia -> expresion .)
    ID              reduce using rule 5 (sentencia -> expresion .)
    LPAREN          reduce using rule 5 (sentencia -> expresion .)
    IF              reduce using rule 5 (sentencia -> expresion .)
    ELSE            reduce using rule 5 (sentencia -> expresion .)
    VAR             reduce using rule 5 (sentencia -> expresion .)
    VAL             reduce using rule 5 (sentencia -> expresion .)
    STRING          reduce using rule 5 (sentencia -> expresion .)
    TRUE            reduce using rule 5 (sentencia -> expresion .)
    FALSE           reduce using rule 5 (sentencia -> expresion .)
    NULL            reduce using rule 5 (sentencia -> expresion .)
    NOT             reduce using rule 5 (sentencia -> expresion .)
    WHILE           reduce using rule 5 (sentencia -> expresion .)
    FOR             reduce using rule 5 (sentencia -> expresion .)
    INTV            reduce using rule 5 (sentencia -> expresion .)
    FLOATV          reduce using rule 5 (sentencia -> expresion .)
    $end            reduce using rule 5 (sentencia -> expresion .)
    RCBRACKET       reduce using rule 5 (sentencia -> expresion .)
    RETURN          reduce using rule 5 (sentencia -> expresion .)
    MINUS           shift and go to state 35
    PLUS            shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MODULE          shift and go to state 39
    OR              shift and go to state 40
    AND             shift and go to state 41
    EQUALS          shift and go to state 42
    NOTEQUALS       shift and go to state 43
    GREATER         shift and go to state 44
    LOWER           shift and go to state 45

    operadoresMat                  shift and go to state 33
    operadoresLog                  shift and go to state 34

state 6

    (6) sentencia -> estructuraControl .

    FUNCTION        reduce using rule 6 (sentencia -> estructuraControl .)
    ID              reduce using rule 6 (sentencia -> estructuraControl .)
    LPAREN          reduce using rule 6 (sentencia -> estructuraControl .)
    IF              reduce using rule 6 (sentencia -> estructuraControl .)
    ELSE            reduce using rule 6 (sentencia -> estructuraControl .)
    VAR             reduce using rule 6 (sentencia -> estructuraControl .)
    VAL             reduce using rule 6 (sentencia -> estructuraControl .)
    STRING          reduce using rule 6 (sentencia -> estructuraControl .)
    TRUE            reduce using rule 6 (sentencia -> estructuraControl .)
    FALSE           reduce using rule 6 (sentencia -> estructuraControl .)
    NULL            reduce using rule 6 (sentencia -> estructuraControl .)
    NOT             reduce using rule 6 (sentencia -> estructuraControl .)
    WHILE           reduce using rule 6 (sentencia -> estructuraControl .)
    FOR             reduce using rule 6 (sentencia -> estructuraControl .)
    INTV            reduce using rule 6 (sentencia -> estructuraControl .)
    FLOATV          reduce using rule 6 (sentencia -> estructuraControl .)
    $end            reduce using rule 6 (sentencia -> estructuraControl .)
    RCBRACKET       reduce using rule 6 (sentencia -> estructuraControl .)
    RETURN          reduce using rule 6 (sentencia -> estructuraControl .)


state 7

    (7) sentencia -> bucles .

    FUNCTION        reduce using rule 7 (sentencia -> bucles .)
    ID              reduce using rule 7 (sentencia -> bucles .)
    LPAREN          reduce using rule 7 (sentencia -> bucles .)
    IF              reduce using rule 7 (sentencia -> bucles .)
    ELSE            reduce using rule 7 (sentencia -> bucles .)
    VAR             reduce using rule 7 (sentencia -> bucles .)
    VAL             reduce using rule 7 (sentencia -> bucles .)
    STRING          reduce using rule 7 (sentencia -> bucles .)
    TRUE            reduce using rule 7 (sentencia -> bucles .)
    FALSE           reduce using rule 7 (sentencia -> bucles .)
    NULL            reduce using rule 7 (sentencia -> bucles .)
    NOT             reduce using rule 7 (sentencia -> bucles .)
    WHILE           reduce using rule 7 (sentencia -> bucles .)
    FOR             reduce using rule 7 (sentencia -> bucles .)
    INTV            reduce using rule 7 (sentencia -> bucles .)
    FLOATV          reduce using rule 7 (sentencia -> bucles .)
    $end            reduce using rule 7 (sentencia -> bucles .)
    RCBRACKET       reduce using rule 7 (sentencia -> bucles .)
    RETURN          reduce using rule 7 (sentencia -> bucles .)


state 8

    (8) sentencia -> llamada . ;

    ;               shift and go to state 46


state 9

    (19) function -> FUNCTION . ID LPAREN params RPAREN instruccionesF
    (20) function -> FUNCTION . ID LPAREN RPAREN instruccionesF

    ID              shift and go to state 47


state 10

    (23) function -> ID . LSBRACKET valor RSBRACKET
    (46) asignacion -> ID . ASSIGN expresion
    (21) llamada -> ID . LPAREN args RPAREN
    (22) llamada -> ID . LPAREN RPAREN
    (38) valor -> ID .

  ! shift/reduce conflict for LPAREN resolved as shift
    LSBRACKET       shift and go to state 48
    ASSIGN          shift and go to state 49
    LPAREN          shift and go to state 50
    MINUS           reduce using rule 38 (valor -> ID .)
    PLUS            reduce using rule 38 (valor -> ID .)
    TIMES           reduce using rule 38 (valor -> ID .)
    DIVIDE          reduce using rule 38 (valor -> ID .)
    MODULE          reduce using rule 38 (valor -> ID .)
    OR              reduce using rule 38 (valor -> ID .)
    AND             reduce using rule 38 (valor -> ID .)
    EQUALS          reduce using rule 38 (valor -> ID .)
    NOTEQUALS       reduce using rule 38 (valor -> ID .)
    GREATER         reduce using rule 38 (valor -> ID .)
    LOWER           reduce using rule 38 (valor -> ID .)
    FUNCTION        reduce using rule 38 (valor -> ID .)
    ID              reduce using rule 38 (valor -> ID .)
    IF              reduce using rule 38 (valor -> ID .)
    ELSE            reduce using rule 38 (valor -> ID .)
    VAR             reduce using rule 38 (valor -> ID .)
    VAL             reduce using rule 38 (valor -> ID .)
    STRING          reduce using rule 38 (valor -> ID .)
    TRUE            reduce using rule 38 (valor -> ID .)
    FALSE           reduce using rule 38 (valor -> ID .)
    NULL            reduce using rule 38 (valor -> ID .)
    NOT             reduce using rule 38 (valor -> ID .)
    WHILE           reduce using rule 38 (valor -> ID .)
    FOR             reduce using rule 38 (valor -> ID .)
    INTV            reduce using rule 38 (valor -> ID .)
    FLOATV          reduce using rule 38 (valor -> ID .)
    $end            reduce using rule 38 (valor -> ID .)
    RCBRACKET       reduce using rule 38 (valor -> ID .)
    RETURN          reduce using rule 38 (valor -> ID .)

  ! LPAREN          [ reduce using rule 38 (valor -> ID .) ]


state 11

    (50) expresion -> LPAREN . expresion RPAREN
    (50) expresion -> . LPAREN expresion RPAREN
    (51) expresion -> . valor
    (52) expresion -> . expresion operadoresMat expresion
    (53) expresion -> . expresion operadoresLog expresion
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (67) number -> . INTV
    (68) number -> . FLOATV

    LPAREN          shift and go to state 11
    ID              shift and go to state 52
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    expresion                      shift and go to state 51
    valor                          shift and go to state 12
    number                         shift and go to state 20

state 12

    (51) expresion -> valor .

    MINUS           reduce using rule 51 (expresion -> valor .)
    PLUS            reduce using rule 51 (expresion -> valor .)
    TIMES           reduce using rule 51 (expresion -> valor .)
    DIVIDE          reduce using rule 51 (expresion -> valor .)
    MODULE          reduce using rule 51 (expresion -> valor .)
    OR              reduce using rule 51 (expresion -> valor .)
    AND             reduce using rule 51 (expresion -> valor .)
    EQUALS          reduce using rule 51 (expresion -> valor .)
    NOTEQUALS       reduce using rule 51 (expresion -> valor .)
    GREATER         reduce using rule 51 (expresion -> valor .)
    LOWER           reduce using rule 51 (expresion -> valor .)
    FUNCTION        reduce using rule 51 (expresion -> valor .)
    ID              reduce using rule 51 (expresion -> valor .)
    LPAREN          reduce using rule 51 (expresion -> valor .)
    IF              reduce using rule 51 (expresion -> valor .)
    ELSE            reduce using rule 51 (expresion -> valor .)
    VAR             reduce using rule 51 (expresion -> valor .)
    VAL             reduce using rule 51 (expresion -> valor .)
    STRING          reduce using rule 51 (expresion -> valor .)
    TRUE            reduce using rule 51 (expresion -> valor .)
    FALSE           reduce using rule 51 (expresion -> valor .)
    NULL            reduce using rule 51 (expresion -> valor .)
    NOT             reduce using rule 51 (expresion -> valor .)
    WHILE           reduce using rule 51 (expresion -> valor .)
    FOR             reduce using rule 51 (expresion -> valor .)
    INTV            reduce using rule 51 (expresion -> valor .)
    FLOATV          reduce using rule 51 (expresion -> valor .)
    $end            reduce using rule 51 (expresion -> valor .)
    RCBRACKET       reduce using rule 51 (expresion -> valor .)
    RETURN          reduce using rule 51 (expresion -> valor .)
    RPAREN          reduce using rule 51 (expresion -> valor .)
    ;               reduce using rule 51 (expresion -> valor .)


state 13

    (47) asignacion -> declarador . ID ASSIGN expresion

    ID              shift and go to state 53


state 14

    (13) estructuraControl -> IF . LPAREN expresion RPAREN instrucciones

    LPAREN          shift and go to state 54


state 15

    (14) estructuraControl -> ELSE . instrucciones
    (9) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (10) instrucciones -> . sentencia
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . expresion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada ;
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (50) expresion -> . LPAREN expresion RPAREN
    (51) expresion -> . valor
    (52) expresion -> . expresion operadoresMat expresion
    (53) expresion -> . expresion operadoresLog expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (48) declarador -> . VAR ID
    (49) declarador -> . VAL ID
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN
    (67) number -> . INTV
    (68) number -> . FLOATV

    LCBRACKET       shift and go to state 56
    ID              shift and go to state 58
    LPAREN          shift and go to state 11
    IF              shift and go to state 14
    ELSE            shift and go to state 15
    VAR             shift and go to state 18
    VAL             shift and go to state 19
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    instrucciones                  shift and go to state 55
    sentencia                      shift and go to state 57
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    estructuraControl              shift and go to state 6
    bucles                         shift and go to state 7
    llamada                        shift and go to state 8
    declarador                     shift and go to state 13
    valor                          shift and go to state 12
    while                          shift and go to state 16
    for                            shift and go to state 17
    number                         shift and go to state 20

state 16

    (15) bucles -> while . instrucciones
    (9) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (10) instrucciones -> . sentencia
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . expresion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada ;
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (50) expresion -> . LPAREN expresion RPAREN
    (51) expresion -> . valor
    (52) expresion -> . expresion operadoresMat expresion
    (53) expresion -> . expresion operadoresLog expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (48) declarador -> . VAR ID
    (49) declarador -> . VAL ID
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN
    (67) number -> . INTV
    (68) number -> . FLOATV

    LCBRACKET       shift and go to state 56
    ID              shift and go to state 58
    LPAREN          shift and go to state 11
    IF              shift and go to state 14
    ELSE            shift and go to state 15
    VAR             shift and go to state 18
    VAL             shift and go to state 19
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    while                          shift and go to state 16
    instrucciones                  shift and go to state 59
    sentencia                      shift and go to state 57
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    estructuraControl              shift and go to state 6
    bucles                         shift and go to state 7
    llamada                        shift and go to state 8
    declarador                     shift and go to state 13
    valor                          shift and go to state 12
    for                            shift and go to state 17
    number                         shift and go to state 20

state 17

    (16) bucles -> for . instrucciones
    (9) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (10) instrucciones -> . sentencia
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . expresion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada ;
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (50) expresion -> . LPAREN expresion RPAREN
    (51) expresion -> . valor
    (52) expresion -> . expresion operadoresMat expresion
    (53) expresion -> . expresion operadoresLog expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (48) declarador -> . VAR ID
    (49) declarador -> . VAL ID
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN
    (67) number -> . INTV
    (68) number -> . FLOATV

    LCBRACKET       shift and go to state 56
    ID              shift and go to state 58
    LPAREN          shift and go to state 11
    IF              shift and go to state 14
    ELSE            shift and go to state 15
    VAR             shift and go to state 18
    VAL             shift and go to state 19
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    for                            shift and go to state 17
    instrucciones                  shift and go to state 60
    sentencia                      shift and go to state 57
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    estructuraControl              shift and go to state 6
    bucles                         shift and go to state 7
    llamada                        shift and go to state 8
    declarador                     shift and go to state 13
    valor                          shift and go to state 12
    while                          shift and go to state 16
    number                         shift and go to state 20

state 18

    (44) declarador -> VAR .
    (48) declarador -> VAR . ID

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 61

  ! ID              [ reduce using rule 44 (declarador -> VAR .) ]


state 19

    (45) declarador -> VAL .
    (49) declarador -> VAL . ID

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 62

  ! ID              [ reduce using rule 45 (declarador -> VAL .) ]


state 20

    (37) valor -> number .

    MINUS           reduce using rule 37 (valor -> number .)
    PLUS            reduce using rule 37 (valor -> number .)
    TIMES           reduce using rule 37 (valor -> number .)
    DIVIDE          reduce using rule 37 (valor -> number .)
    MODULE          reduce using rule 37 (valor -> number .)
    OR              reduce using rule 37 (valor -> number .)
    AND             reduce using rule 37 (valor -> number .)
    EQUALS          reduce using rule 37 (valor -> number .)
    NOTEQUALS       reduce using rule 37 (valor -> number .)
    GREATER         reduce using rule 37 (valor -> number .)
    LOWER           reduce using rule 37 (valor -> number .)
    FUNCTION        reduce using rule 37 (valor -> number .)
    ID              reduce using rule 37 (valor -> number .)
    LPAREN          reduce using rule 37 (valor -> number .)
    IF              reduce using rule 37 (valor -> number .)
    ELSE            reduce using rule 37 (valor -> number .)
    VAR             reduce using rule 37 (valor -> number .)
    VAL             reduce using rule 37 (valor -> number .)
    STRING          reduce using rule 37 (valor -> number .)
    TRUE            reduce using rule 37 (valor -> number .)
    FALSE           reduce using rule 37 (valor -> number .)
    NULL            reduce using rule 37 (valor -> number .)
    NOT             reduce using rule 37 (valor -> number .)
    WHILE           reduce using rule 37 (valor -> number .)
    FOR             reduce using rule 37 (valor -> number .)
    INTV            reduce using rule 37 (valor -> number .)
    FLOATV          reduce using rule 37 (valor -> number .)
    $end            reduce using rule 37 (valor -> number .)
    RCBRACKET       reduce using rule 37 (valor -> number .)
    RETURN          reduce using rule 37 (valor -> number .)
    RPAREN          reduce using rule 37 (valor -> number .)
    ;               reduce using rule 37 (valor -> number .)
    RSBRACKET       reduce using rule 37 (valor -> number .)
    ,               reduce using rule 37 (valor -> number .)


state 21

    (39) valor -> STRING .

    MINUS           reduce using rule 39 (valor -> STRING .)
    PLUS            reduce using rule 39 (valor -> STRING .)
    TIMES           reduce using rule 39 (valor -> STRING .)
    DIVIDE          reduce using rule 39 (valor -> STRING .)
    MODULE          reduce using rule 39 (valor -> STRING .)
    OR              reduce using rule 39 (valor -> STRING .)
    AND             reduce using rule 39 (valor -> STRING .)
    EQUALS          reduce using rule 39 (valor -> STRING .)
    NOTEQUALS       reduce using rule 39 (valor -> STRING .)
    GREATER         reduce using rule 39 (valor -> STRING .)
    LOWER           reduce using rule 39 (valor -> STRING .)
    FUNCTION        reduce using rule 39 (valor -> STRING .)
    ID              reduce using rule 39 (valor -> STRING .)
    LPAREN          reduce using rule 39 (valor -> STRING .)
    IF              reduce using rule 39 (valor -> STRING .)
    ELSE            reduce using rule 39 (valor -> STRING .)
    VAR             reduce using rule 39 (valor -> STRING .)
    VAL             reduce using rule 39 (valor -> STRING .)
    STRING          reduce using rule 39 (valor -> STRING .)
    TRUE            reduce using rule 39 (valor -> STRING .)
    FALSE           reduce using rule 39 (valor -> STRING .)
    NULL            reduce using rule 39 (valor -> STRING .)
    NOT             reduce using rule 39 (valor -> STRING .)
    WHILE           reduce using rule 39 (valor -> STRING .)
    FOR             reduce using rule 39 (valor -> STRING .)
    INTV            reduce using rule 39 (valor -> STRING .)
    FLOATV          reduce using rule 39 (valor -> STRING .)
    $end            reduce using rule 39 (valor -> STRING .)
    RCBRACKET       reduce using rule 39 (valor -> STRING .)
    RETURN          reduce using rule 39 (valor -> STRING .)
    RPAREN          reduce using rule 39 (valor -> STRING .)
    ;               reduce using rule 39 (valor -> STRING .)
    RSBRACKET       reduce using rule 39 (valor -> STRING .)
    ,               reduce using rule 39 (valor -> STRING .)


state 22

    (40) valor -> TRUE .

    MINUS           reduce using rule 40 (valor -> TRUE .)
    PLUS            reduce using rule 40 (valor -> TRUE .)
    TIMES           reduce using rule 40 (valor -> TRUE .)
    DIVIDE          reduce using rule 40 (valor -> TRUE .)
    MODULE          reduce using rule 40 (valor -> TRUE .)
    OR              reduce using rule 40 (valor -> TRUE .)
    AND             reduce using rule 40 (valor -> TRUE .)
    EQUALS          reduce using rule 40 (valor -> TRUE .)
    NOTEQUALS       reduce using rule 40 (valor -> TRUE .)
    GREATER         reduce using rule 40 (valor -> TRUE .)
    LOWER           reduce using rule 40 (valor -> TRUE .)
    FUNCTION        reduce using rule 40 (valor -> TRUE .)
    ID              reduce using rule 40 (valor -> TRUE .)
    LPAREN          reduce using rule 40 (valor -> TRUE .)
    IF              reduce using rule 40 (valor -> TRUE .)
    ELSE            reduce using rule 40 (valor -> TRUE .)
    VAR             reduce using rule 40 (valor -> TRUE .)
    VAL             reduce using rule 40 (valor -> TRUE .)
    STRING          reduce using rule 40 (valor -> TRUE .)
    TRUE            reduce using rule 40 (valor -> TRUE .)
    FALSE           reduce using rule 40 (valor -> TRUE .)
    NULL            reduce using rule 40 (valor -> TRUE .)
    NOT             reduce using rule 40 (valor -> TRUE .)
    WHILE           reduce using rule 40 (valor -> TRUE .)
    FOR             reduce using rule 40 (valor -> TRUE .)
    INTV            reduce using rule 40 (valor -> TRUE .)
    FLOATV          reduce using rule 40 (valor -> TRUE .)
    $end            reduce using rule 40 (valor -> TRUE .)
    RCBRACKET       reduce using rule 40 (valor -> TRUE .)
    RETURN          reduce using rule 40 (valor -> TRUE .)
    RPAREN          reduce using rule 40 (valor -> TRUE .)
    ;               reduce using rule 40 (valor -> TRUE .)
    RSBRACKET       reduce using rule 40 (valor -> TRUE .)
    ,               reduce using rule 40 (valor -> TRUE .)


state 23

    (41) valor -> FALSE .

    MINUS           reduce using rule 41 (valor -> FALSE .)
    PLUS            reduce using rule 41 (valor -> FALSE .)
    TIMES           reduce using rule 41 (valor -> FALSE .)
    DIVIDE          reduce using rule 41 (valor -> FALSE .)
    MODULE          reduce using rule 41 (valor -> FALSE .)
    OR              reduce using rule 41 (valor -> FALSE .)
    AND             reduce using rule 41 (valor -> FALSE .)
    EQUALS          reduce using rule 41 (valor -> FALSE .)
    NOTEQUALS       reduce using rule 41 (valor -> FALSE .)
    GREATER         reduce using rule 41 (valor -> FALSE .)
    LOWER           reduce using rule 41 (valor -> FALSE .)
    FUNCTION        reduce using rule 41 (valor -> FALSE .)
    ID              reduce using rule 41 (valor -> FALSE .)
    LPAREN          reduce using rule 41 (valor -> FALSE .)
    IF              reduce using rule 41 (valor -> FALSE .)
    ELSE            reduce using rule 41 (valor -> FALSE .)
    VAR             reduce using rule 41 (valor -> FALSE .)
    VAL             reduce using rule 41 (valor -> FALSE .)
    STRING          reduce using rule 41 (valor -> FALSE .)
    TRUE            reduce using rule 41 (valor -> FALSE .)
    FALSE           reduce using rule 41 (valor -> FALSE .)
    NULL            reduce using rule 41 (valor -> FALSE .)
    NOT             reduce using rule 41 (valor -> FALSE .)
    WHILE           reduce using rule 41 (valor -> FALSE .)
    FOR             reduce using rule 41 (valor -> FALSE .)
    INTV            reduce using rule 41 (valor -> FALSE .)
    FLOATV          reduce using rule 41 (valor -> FALSE .)
    $end            reduce using rule 41 (valor -> FALSE .)
    RCBRACKET       reduce using rule 41 (valor -> FALSE .)
    RETURN          reduce using rule 41 (valor -> FALSE .)
    RPAREN          reduce using rule 41 (valor -> FALSE .)
    ;               reduce using rule 41 (valor -> FALSE .)
    RSBRACKET       reduce using rule 41 (valor -> FALSE .)
    ,               reduce using rule 41 (valor -> FALSE .)


state 24

    (42) valor -> NULL .

    MINUS           reduce using rule 42 (valor -> NULL .)
    PLUS            reduce using rule 42 (valor -> NULL .)
    TIMES           reduce using rule 42 (valor -> NULL .)
    DIVIDE          reduce using rule 42 (valor -> NULL .)
    MODULE          reduce using rule 42 (valor -> NULL .)
    OR              reduce using rule 42 (valor -> NULL .)
    AND             reduce using rule 42 (valor -> NULL .)
    EQUALS          reduce using rule 42 (valor -> NULL .)
    NOTEQUALS       reduce using rule 42 (valor -> NULL .)
    GREATER         reduce using rule 42 (valor -> NULL .)
    LOWER           reduce using rule 42 (valor -> NULL .)
    FUNCTION        reduce using rule 42 (valor -> NULL .)
    ID              reduce using rule 42 (valor -> NULL .)
    LPAREN          reduce using rule 42 (valor -> NULL .)
    IF              reduce using rule 42 (valor -> NULL .)
    ELSE            reduce using rule 42 (valor -> NULL .)
    VAR             reduce using rule 42 (valor -> NULL .)
    VAL             reduce using rule 42 (valor -> NULL .)
    STRING          reduce using rule 42 (valor -> NULL .)
    TRUE            reduce using rule 42 (valor -> NULL .)
    FALSE           reduce using rule 42 (valor -> NULL .)
    NULL            reduce using rule 42 (valor -> NULL .)
    NOT             reduce using rule 42 (valor -> NULL .)
    WHILE           reduce using rule 42 (valor -> NULL .)
    FOR             reduce using rule 42 (valor -> NULL .)
    INTV            reduce using rule 42 (valor -> NULL .)
    FLOATV          reduce using rule 42 (valor -> NULL .)
    $end            reduce using rule 42 (valor -> NULL .)
    RCBRACKET       reduce using rule 42 (valor -> NULL .)
    RETURN          reduce using rule 42 (valor -> NULL .)
    RPAREN          reduce using rule 42 (valor -> NULL .)
    ;               reduce using rule 42 (valor -> NULL .)
    RSBRACKET       reduce using rule 42 (valor -> NULL .)
    ,               reduce using rule 42 (valor -> NULL .)


state 25

    (43) valor -> NOT . valor
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (67) number -> . INTV
    (68) number -> . FLOATV

    ID              shift and go to state 52
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    valor                          shift and go to state 63
    number                         shift and go to state 20

state 26

    (17) while -> WHILE . LPAREN expresion RPAREN

    LPAREN          shift and go to state 64


state 27

    (18) for -> FOR . LPAREN ID IN ID RPAREN

    LPAREN          shift and go to state 65


state 28

    (67) number -> INTV .

    MINUS           reduce using rule 67 (number -> INTV .)
    PLUS            reduce using rule 67 (number -> INTV .)
    TIMES           reduce using rule 67 (number -> INTV .)
    DIVIDE          reduce using rule 67 (number -> INTV .)
    MODULE          reduce using rule 67 (number -> INTV .)
    OR              reduce using rule 67 (number -> INTV .)
    AND             reduce using rule 67 (number -> INTV .)
    EQUALS          reduce using rule 67 (number -> INTV .)
    NOTEQUALS       reduce using rule 67 (number -> INTV .)
    GREATER         reduce using rule 67 (number -> INTV .)
    LOWER           reduce using rule 67 (number -> INTV .)
    FUNCTION        reduce using rule 67 (number -> INTV .)
    ID              reduce using rule 67 (number -> INTV .)
    LPAREN          reduce using rule 67 (number -> INTV .)
    IF              reduce using rule 67 (number -> INTV .)
    ELSE            reduce using rule 67 (number -> INTV .)
    VAR             reduce using rule 67 (number -> INTV .)
    VAL             reduce using rule 67 (number -> INTV .)
    STRING          reduce using rule 67 (number -> INTV .)
    TRUE            reduce using rule 67 (number -> INTV .)
    FALSE           reduce using rule 67 (number -> INTV .)
    NULL            reduce using rule 67 (number -> INTV .)
    NOT             reduce using rule 67 (number -> INTV .)
    WHILE           reduce using rule 67 (number -> INTV .)
    FOR             reduce using rule 67 (number -> INTV .)
    INTV            reduce using rule 67 (number -> INTV .)
    FLOATV          reduce using rule 67 (number -> INTV .)
    $end            reduce using rule 67 (number -> INTV .)
    RCBRACKET       reduce using rule 67 (number -> INTV .)
    RETURN          reduce using rule 67 (number -> INTV .)
    RPAREN          reduce using rule 67 (number -> INTV .)
    ;               reduce using rule 67 (number -> INTV .)
    RSBRACKET       reduce using rule 67 (number -> INTV .)
    ,               reduce using rule 67 (number -> INTV .)


state 29

    (68) number -> FLOATV .

    MINUS           reduce using rule 68 (number -> FLOATV .)
    PLUS            reduce using rule 68 (number -> FLOATV .)
    TIMES           reduce using rule 68 (number -> FLOATV .)
    DIVIDE          reduce using rule 68 (number -> FLOATV .)
    MODULE          reduce using rule 68 (number -> FLOATV .)
    OR              reduce using rule 68 (number -> FLOATV .)
    AND             reduce using rule 68 (number -> FLOATV .)
    EQUALS          reduce using rule 68 (number -> FLOATV .)
    NOTEQUALS       reduce using rule 68 (number -> FLOATV .)
    GREATER         reduce using rule 68 (number -> FLOATV .)
    LOWER           reduce using rule 68 (number -> FLOATV .)
    FUNCTION        reduce using rule 68 (number -> FLOATV .)
    ID              reduce using rule 68 (number -> FLOATV .)
    LPAREN          reduce using rule 68 (number -> FLOATV .)
    IF              reduce using rule 68 (number -> FLOATV .)
    ELSE            reduce using rule 68 (number -> FLOATV .)
    VAR             reduce using rule 68 (number -> FLOATV .)
    VAL             reduce using rule 68 (number -> FLOATV .)
    STRING          reduce using rule 68 (number -> FLOATV .)
    TRUE            reduce using rule 68 (number -> FLOATV .)
    FALSE           reduce using rule 68 (number -> FLOATV .)
    NULL            reduce using rule 68 (number -> FLOATV .)
    NOT             reduce using rule 68 (number -> FLOATV .)
    WHILE           reduce using rule 68 (number -> FLOATV .)
    FOR             reduce using rule 68 (number -> FLOATV .)
    INTV            reduce using rule 68 (number -> FLOATV .)
    FLOATV          reduce using rule 68 (number -> FLOATV .)
    $end            reduce using rule 68 (number -> FLOATV .)
    RCBRACKET       reduce using rule 68 (number -> FLOATV .)
    RETURN          reduce using rule 68 (number -> FLOATV .)
    RPAREN          reduce using rule 68 (number -> FLOATV .)
    ;               reduce using rule 68 (number -> FLOATV .)
    RSBRACKET       reduce using rule 68 (number -> FLOATV .)
    ,               reduce using rule 68 (number -> FLOATV .)


state 30

    (2) cuerpo -> sentencia cuerpo .

    $end            reduce using rule 2 (cuerpo -> sentencia cuerpo .)
    RCBRACKET       reduce using rule 2 (cuerpo -> sentencia cuerpo .)
    RETURN          reduce using rule 2 (cuerpo -> sentencia cuerpo .)


state 31

    (3) cuerpo -> function cuerpo .

    $end            reduce using rule 3 (cuerpo -> function cuerpo .)
    RCBRACKET       reduce using rule 3 (cuerpo -> function cuerpo .)
    RETURN          reduce using rule 3 (cuerpo -> function cuerpo .)


state 32

    (4) sentencia -> asignacion ; .

    FUNCTION        reduce using rule 4 (sentencia -> asignacion ; .)
    ID              reduce using rule 4 (sentencia -> asignacion ; .)
    LPAREN          reduce using rule 4 (sentencia -> asignacion ; .)
    IF              reduce using rule 4 (sentencia -> asignacion ; .)
    ELSE            reduce using rule 4 (sentencia -> asignacion ; .)
    VAR             reduce using rule 4 (sentencia -> asignacion ; .)
    VAL             reduce using rule 4 (sentencia -> asignacion ; .)
    STRING          reduce using rule 4 (sentencia -> asignacion ; .)
    TRUE            reduce using rule 4 (sentencia -> asignacion ; .)
    FALSE           reduce using rule 4 (sentencia -> asignacion ; .)
    NULL            reduce using rule 4 (sentencia -> asignacion ; .)
    NOT             reduce using rule 4 (sentencia -> asignacion ; .)
    WHILE           reduce using rule 4 (sentencia -> asignacion ; .)
    FOR             reduce using rule 4 (sentencia -> asignacion ; .)
    INTV            reduce using rule 4 (sentencia -> asignacion ; .)
    FLOATV          reduce using rule 4 (sentencia -> asignacion ; .)
    $end            reduce using rule 4 (sentencia -> asignacion ; .)
    RCBRACKET       reduce using rule 4 (sentencia -> asignacion ; .)
    RETURN          reduce using rule 4 (sentencia -> asignacion ; .)


state 33

    (52) expresion -> expresion operadoresMat . expresion
    (50) expresion -> . LPAREN expresion RPAREN
    (51) expresion -> . valor
    (52) expresion -> . expresion operadoresMat expresion
    (53) expresion -> . expresion operadoresLog expresion
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (67) number -> . INTV
    (68) number -> . FLOATV

    LPAREN          shift and go to state 11
    ID              shift and go to state 52
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    expresion                      shift and go to state 66
    valor                          shift and go to state 12
    number                         shift and go to state 20

state 34

    (53) expresion -> expresion operadoresLog . expresion
    (50) expresion -> . LPAREN expresion RPAREN
    (51) expresion -> . valor
    (52) expresion -> . expresion operadoresMat expresion
    (53) expresion -> . expresion operadoresLog expresion
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (67) number -> . INTV
    (68) number -> . FLOATV

    LPAREN          shift and go to state 11
    ID              shift and go to state 52
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    expresion                      shift and go to state 67
    valor                          shift and go to state 12
    number                         shift and go to state 20

state 35

    (62) operadoresMat -> MINUS .

    LPAREN          reduce using rule 62 (operadoresMat -> MINUS .)
    ID              reduce using rule 62 (operadoresMat -> MINUS .)
    STRING          reduce using rule 62 (operadoresMat -> MINUS .)
    TRUE            reduce using rule 62 (operadoresMat -> MINUS .)
    FALSE           reduce using rule 62 (operadoresMat -> MINUS .)
    NULL            reduce using rule 62 (operadoresMat -> MINUS .)
    NOT             reduce using rule 62 (operadoresMat -> MINUS .)
    INTV            reduce using rule 62 (operadoresMat -> MINUS .)
    FLOATV          reduce using rule 62 (operadoresMat -> MINUS .)


state 36

    (63) operadoresMat -> PLUS .

    LPAREN          reduce using rule 63 (operadoresMat -> PLUS .)
    ID              reduce using rule 63 (operadoresMat -> PLUS .)
    STRING          reduce using rule 63 (operadoresMat -> PLUS .)
    TRUE            reduce using rule 63 (operadoresMat -> PLUS .)
    FALSE           reduce using rule 63 (operadoresMat -> PLUS .)
    NULL            reduce using rule 63 (operadoresMat -> PLUS .)
    NOT             reduce using rule 63 (operadoresMat -> PLUS .)
    INTV            reduce using rule 63 (operadoresMat -> PLUS .)
    FLOATV          reduce using rule 63 (operadoresMat -> PLUS .)


state 37

    (64) operadoresMat -> TIMES .

    LPAREN          reduce using rule 64 (operadoresMat -> TIMES .)
    ID              reduce using rule 64 (operadoresMat -> TIMES .)
    STRING          reduce using rule 64 (operadoresMat -> TIMES .)
    TRUE            reduce using rule 64 (operadoresMat -> TIMES .)
    FALSE           reduce using rule 64 (operadoresMat -> TIMES .)
    NULL            reduce using rule 64 (operadoresMat -> TIMES .)
    NOT             reduce using rule 64 (operadoresMat -> TIMES .)
    INTV            reduce using rule 64 (operadoresMat -> TIMES .)
    FLOATV          reduce using rule 64 (operadoresMat -> TIMES .)


state 38

    (65) operadoresMat -> DIVIDE .

    LPAREN          reduce using rule 65 (operadoresMat -> DIVIDE .)
    ID              reduce using rule 65 (operadoresMat -> DIVIDE .)
    STRING          reduce using rule 65 (operadoresMat -> DIVIDE .)
    TRUE            reduce using rule 65 (operadoresMat -> DIVIDE .)
    FALSE           reduce using rule 65 (operadoresMat -> DIVIDE .)
    NULL            reduce using rule 65 (operadoresMat -> DIVIDE .)
    NOT             reduce using rule 65 (operadoresMat -> DIVIDE .)
    INTV            reduce using rule 65 (operadoresMat -> DIVIDE .)
    FLOATV          reduce using rule 65 (operadoresMat -> DIVIDE .)


state 39

    (66) operadoresMat -> MODULE .

    LPAREN          reduce using rule 66 (operadoresMat -> MODULE .)
    ID              reduce using rule 66 (operadoresMat -> MODULE .)
    STRING          reduce using rule 66 (operadoresMat -> MODULE .)
    TRUE            reduce using rule 66 (operadoresMat -> MODULE .)
    FALSE           reduce using rule 66 (operadoresMat -> MODULE .)
    NULL            reduce using rule 66 (operadoresMat -> MODULE .)
    NOT             reduce using rule 66 (operadoresMat -> MODULE .)
    INTV            reduce using rule 66 (operadoresMat -> MODULE .)
    FLOATV          reduce using rule 66 (operadoresMat -> MODULE .)


state 40

    (54) operadoresLog -> OR .

    LPAREN          reduce using rule 54 (operadoresLog -> OR .)
    ID              reduce using rule 54 (operadoresLog -> OR .)
    STRING          reduce using rule 54 (operadoresLog -> OR .)
    TRUE            reduce using rule 54 (operadoresLog -> OR .)
    FALSE           reduce using rule 54 (operadoresLog -> OR .)
    NULL            reduce using rule 54 (operadoresLog -> OR .)
    NOT             reduce using rule 54 (operadoresLog -> OR .)
    INTV            reduce using rule 54 (operadoresLog -> OR .)
    FLOATV          reduce using rule 54 (operadoresLog -> OR .)


state 41

    (55) operadoresLog -> AND .

    LPAREN          reduce using rule 55 (operadoresLog -> AND .)
    ID              reduce using rule 55 (operadoresLog -> AND .)
    STRING          reduce using rule 55 (operadoresLog -> AND .)
    TRUE            reduce using rule 55 (operadoresLog -> AND .)
    FALSE           reduce using rule 55 (operadoresLog -> AND .)
    NULL            reduce using rule 55 (operadoresLog -> AND .)
    NOT             reduce using rule 55 (operadoresLog -> AND .)
    INTV            reduce using rule 55 (operadoresLog -> AND .)
    FLOATV          reduce using rule 55 (operadoresLog -> AND .)


state 42

    (56) operadoresLog -> EQUALS .

    LPAREN          reduce using rule 56 (operadoresLog -> EQUALS .)
    ID              reduce using rule 56 (operadoresLog -> EQUALS .)
    STRING          reduce using rule 56 (operadoresLog -> EQUALS .)
    TRUE            reduce using rule 56 (operadoresLog -> EQUALS .)
    FALSE           reduce using rule 56 (operadoresLog -> EQUALS .)
    NULL            reduce using rule 56 (operadoresLog -> EQUALS .)
    NOT             reduce using rule 56 (operadoresLog -> EQUALS .)
    INTV            reduce using rule 56 (operadoresLog -> EQUALS .)
    FLOATV          reduce using rule 56 (operadoresLog -> EQUALS .)


state 43

    (57) operadoresLog -> NOTEQUALS .

    LPAREN          reduce using rule 57 (operadoresLog -> NOTEQUALS .)
    ID              reduce using rule 57 (operadoresLog -> NOTEQUALS .)
    STRING          reduce using rule 57 (operadoresLog -> NOTEQUALS .)
    TRUE            reduce using rule 57 (operadoresLog -> NOTEQUALS .)
    FALSE           reduce using rule 57 (operadoresLog -> NOTEQUALS .)
    NULL            reduce using rule 57 (operadoresLog -> NOTEQUALS .)
    NOT             reduce using rule 57 (operadoresLog -> NOTEQUALS .)
    INTV            reduce using rule 57 (operadoresLog -> NOTEQUALS .)
    FLOATV          reduce using rule 57 (operadoresLog -> NOTEQUALS .)


state 44

    (58) operadoresLog -> GREATER .
    (60) operadoresLog -> GREATER . ASSIGN

    LPAREN          reduce using rule 58 (operadoresLog -> GREATER .)
    ID              reduce using rule 58 (operadoresLog -> GREATER .)
    STRING          reduce using rule 58 (operadoresLog -> GREATER .)
    TRUE            reduce using rule 58 (operadoresLog -> GREATER .)
    FALSE           reduce using rule 58 (operadoresLog -> GREATER .)
    NULL            reduce using rule 58 (operadoresLog -> GREATER .)
    NOT             reduce using rule 58 (operadoresLog -> GREATER .)
    INTV            reduce using rule 58 (operadoresLog -> GREATER .)
    FLOATV          reduce using rule 58 (operadoresLog -> GREATER .)
    ASSIGN          shift and go to state 68


state 45

    (59) operadoresLog -> LOWER .
    (61) operadoresLog -> LOWER . ASSIGN

    LPAREN          reduce using rule 59 (operadoresLog -> LOWER .)
    ID              reduce using rule 59 (operadoresLog -> LOWER .)
    STRING          reduce using rule 59 (operadoresLog -> LOWER .)
    TRUE            reduce using rule 59 (operadoresLog -> LOWER .)
    FALSE           reduce using rule 59 (operadoresLog -> LOWER .)
    NULL            reduce using rule 59 (operadoresLog -> LOWER .)
    NOT             reduce using rule 59 (operadoresLog -> LOWER .)
    INTV            reduce using rule 59 (operadoresLog -> LOWER .)
    FLOATV          reduce using rule 59 (operadoresLog -> LOWER .)
    ASSIGN          shift and go to state 69


state 46

    (8) sentencia -> llamada ; .

    FUNCTION        reduce using rule 8 (sentencia -> llamada ; .)
    ID              reduce using rule 8 (sentencia -> llamada ; .)
    LPAREN          reduce using rule 8 (sentencia -> llamada ; .)
    IF              reduce using rule 8 (sentencia -> llamada ; .)
    ELSE            reduce using rule 8 (sentencia -> llamada ; .)
    VAR             reduce using rule 8 (sentencia -> llamada ; .)
    VAL             reduce using rule 8 (sentencia -> llamada ; .)
    STRING          reduce using rule 8 (sentencia -> llamada ; .)
    TRUE            reduce using rule 8 (sentencia -> llamada ; .)
    FALSE           reduce using rule 8 (sentencia -> llamada ; .)
    NULL            reduce using rule 8 (sentencia -> llamada ; .)
    NOT             reduce using rule 8 (sentencia -> llamada ; .)
    WHILE           reduce using rule 8 (sentencia -> llamada ; .)
    FOR             reduce using rule 8 (sentencia -> llamada ; .)
    INTV            reduce using rule 8 (sentencia -> llamada ; .)
    FLOATV          reduce using rule 8 (sentencia -> llamada ; .)
    $end            reduce using rule 8 (sentencia -> llamada ; .)
    RCBRACKET       reduce using rule 8 (sentencia -> llamada ; .)
    RETURN          reduce using rule 8 (sentencia -> llamada ; .)


state 47

    (19) function -> FUNCTION ID . LPAREN params RPAREN instruccionesF
    (20) function -> FUNCTION ID . LPAREN RPAREN instruccionesF

    LPAREN          shift and go to state 70


state 48

    (23) function -> ID LSBRACKET . valor RSBRACKET
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (67) number -> . INTV
    (68) number -> . FLOATV

    ID              shift and go to state 52
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    valor                          shift and go to state 71
    number                         shift and go to state 20

state 49

    (46) asignacion -> ID ASSIGN . expresion
    (50) expresion -> . LPAREN expresion RPAREN
    (51) expresion -> . valor
    (52) expresion -> . expresion operadoresMat expresion
    (53) expresion -> . expresion operadoresLog expresion
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (67) number -> . INTV
    (68) number -> . FLOATV

    LPAREN          shift and go to state 11
    ID              shift and go to state 52
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    expresion                      shift and go to state 72
    valor                          shift and go to state 12
    number                         shift and go to state 20

state 50

    (21) llamada -> ID LPAREN . args RPAREN
    (22) llamada -> ID LPAREN . RPAREN
    (35) args -> . valor
    (36) args -> . args , args
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (67) number -> . INTV
    (68) number -> . FLOATV

    RPAREN          shift and go to state 74
    ID              shift and go to state 52
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    args                           shift and go to state 73
    valor                          shift and go to state 75
    number                         shift and go to state 20

state 51

    (50) expresion -> LPAREN expresion . RPAREN
    (52) expresion -> expresion . operadoresMat expresion
    (53) expresion -> expresion . operadoresLog expresion
    (62) operadoresMat -> . MINUS
    (63) operadoresMat -> . PLUS
    (64) operadoresMat -> . TIMES
    (65) operadoresMat -> . DIVIDE
    (66) operadoresMat -> . MODULE
    (54) operadoresLog -> . OR
    (55) operadoresLog -> . AND
    (56) operadoresLog -> . EQUALS
    (57) operadoresLog -> . NOTEQUALS
    (58) operadoresLog -> . GREATER
    (59) operadoresLog -> . LOWER
    (60) operadoresLog -> . GREATER ASSIGN
    (61) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 76
    MINUS           shift and go to state 35
    PLUS            shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MODULE          shift and go to state 39
    OR              shift and go to state 40
    AND             shift and go to state 41
    EQUALS          shift and go to state 42
    NOTEQUALS       shift and go to state 43
    GREATER         shift and go to state 44
    LOWER           shift and go to state 45

    operadoresMat                  shift and go to state 33
    operadoresLog                  shift and go to state 34

state 52

    (38) valor -> ID .

    RPAREN          reduce using rule 38 (valor -> ID .)
    MINUS           reduce using rule 38 (valor -> ID .)
    PLUS            reduce using rule 38 (valor -> ID .)
    TIMES           reduce using rule 38 (valor -> ID .)
    DIVIDE          reduce using rule 38 (valor -> ID .)
    MODULE          reduce using rule 38 (valor -> ID .)
    OR              reduce using rule 38 (valor -> ID .)
    AND             reduce using rule 38 (valor -> ID .)
    EQUALS          reduce using rule 38 (valor -> ID .)
    NOTEQUALS       reduce using rule 38 (valor -> ID .)
    GREATER         reduce using rule 38 (valor -> ID .)
    LOWER           reduce using rule 38 (valor -> ID .)
    FUNCTION        reduce using rule 38 (valor -> ID .)
    ID              reduce using rule 38 (valor -> ID .)
    LPAREN          reduce using rule 38 (valor -> ID .)
    IF              reduce using rule 38 (valor -> ID .)
    ELSE            reduce using rule 38 (valor -> ID .)
    VAR             reduce using rule 38 (valor -> ID .)
    VAL             reduce using rule 38 (valor -> ID .)
    STRING          reduce using rule 38 (valor -> ID .)
    TRUE            reduce using rule 38 (valor -> ID .)
    FALSE           reduce using rule 38 (valor -> ID .)
    NULL            reduce using rule 38 (valor -> ID .)
    NOT             reduce using rule 38 (valor -> ID .)
    WHILE           reduce using rule 38 (valor -> ID .)
    FOR             reduce using rule 38 (valor -> ID .)
    INTV            reduce using rule 38 (valor -> ID .)
    FLOATV          reduce using rule 38 (valor -> ID .)
    $end            reduce using rule 38 (valor -> ID .)
    RCBRACKET       reduce using rule 38 (valor -> ID .)
    RETURN          reduce using rule 38 (valor -> ID .)
    ;               reduce using rule 38 (valor -> ID .)
    RSBRACKET       reduce using rule 38 (valor -> ID .)
    ,               reduce using rule 38 (valor -> ID .)


state 53

    (47) asignacion -> declarador ID . ASSIGN expresion

    ASSIGN          shift and go to state 77


state 54

    (13) estructuraControl -> IF LPAREN . expresion RPAREN instrucciones
    (50) expresion -> . LPAREN expresion RPAREN
    (51) expresion -> . valor
    (52) expresion -> . expresion operadoresMat expresion
    (53) expresion -> . expresion operadoresLog expresion
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (67) number -> . INTV
    (68) number -> . FLOATV

    LPAREN          shift and go to state 11
    ID              shift and go to state 52
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    expresion                      shift and go to state 78
    valor                          shift and go to state 12
    number                         shift and go to state 20

state 55

    (14) estructuraControl -> ELSE instrucciones .

    FUNCTION        reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    ID              reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    LPAREN          reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    IF              reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    ELSE            reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    VAR             reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    VAL             reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    STRING          reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    TRUE            reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    FALSE           reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    NULL            reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    NOT             reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    WHILE           reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    FOR             reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    INTV            reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    FLOATV          reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    $end            reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    RCBRACKET       reduce using rule 14 (estructuraControl -> ELSE instrucciones .)
    RETURN          reduce using rule 14 (estructuraControl -> ELSE instrucciones .)


state 56

    (9) instrucciones -> LCBRACKET . cuerpo RCBRACKET
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . sentencia cuerpo
    (3) cuerpo -> . function cuerpo
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . expresion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada ;
    (19) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (20) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (23) function -> . ID LSBRACKET valor RSBRACKET
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (50) expresion -> . LPAREN expresion RPAREN
    (51) expresion -> . valor
    (52) expresion -> . expresion operadoresMat expresion
    (53) expresion -> . expresion operadoresLog expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (48) declarador -> . VAR ID
    (49) declarador -> . VAL ID
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN
    (67) number -> . INTV
    (68) number -> . FLOATV

    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    LPAREN          shift and go to state 11
    IF              shift and go to state 14
    ELSE            shift and go to state 15
    VAR             shift and go to state 18
    VAL             shift and go to state 19
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    cuerpo                         shift and go to state 79
    sentencia                      shift and go to state 2
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    estructuraControl              shift and go to state 6
    bucles                         shift and go to state 7
    llamada                        shift and go to state 8
    valor                          shift and go to state 12
    declarador                     shift and go to state 13
    while                          shift and go to state 16
    for                            shift and go to state 17
    number                         shift and go to state 20

state 57

    (10) instrucciones -> sentencia .

    FUNCTION        reduce using rule 10 (instrucciones -> sentencia .)
    ID              reduce using rule 10 (instrucciones -> sentencia .)
    LPAREN          reduce using rule 10 (instrucciones -> sentencia .)
    IF              reduce using rule 10 (instrucciones -> sentencia .)
    ELSE            reduce using rule 10 (instrucciones -> sentencia .)
    VAR             reduce using rule 10 (instrucciones -> sentencia .)
    VAL             reduce using rule 10 (instrucciones -> sentencia .)
    STRING          reduce using rule 10 (instrucciones -> sentencia .)
    TRUE            reduce using rule 10 (instrucciones -> sentencia .)
    FALSE           reduce using rule 10 (instrucciones -> sentencia .)
    NULL            reduce using rule 10 (instrucciones -> sentencia .)
    NOT             reduce using rule 10 (instrucciones -> sentencia .)
    WHILE           reduce using rule 10 (instrucciones -> sentencia .)
    FOR             reduce using rule 10 (instrucciones -> sentencia .)
    INTV            reduce using rule 10 (instrucciones -> sentencia .)
    FLOATV          reduce using rule 10 (instrucciones -> sentencia .)
    $end            reduce using rule 10 (instrucciones -> sentencia .)
    RCBRACKET       reduce using rule 10 (instrucciones -> sentencia .)
    RETURN          reduce using rule 10 (instrucciones -> sentencia .)


state 58

    (46) asignacion -> ID . ASSIGN expresion
    (21) llamada -> ID . LPAREN args RPAREN
    (22) llamada -> ID . LPAREN RPAREN
    (38) valor -> ID .

  ! shift/reduce conflict for LPAREN resolved as shift
    ASSIGN          shift and go to state 49
    LPAREN          shift and go to state 50
    MINUS           reduce using rule 38 (valor -> ID .)
    PLUS            reduce using rule 38 (valor -> ID .)
    TIMES           reduce using rule 38 (valor -> ID .)
    DIVIDE          reduce using rule 38 (valor -> ID .)
    MODULE          reduce using rule 38 (valor -> ID .)
    OR              reduce using rule 38 (valor -> ID .)
    AND             reduce using rule 38 (valor -> ID .)
    EQUALS          reduce using rule 38 (valor -> ID .)
    NOTEQUALS       reduce using rule 38 (valor -> ID .)
    GREATER         reduce using rule 38 (valor -> ID .)
    LOWER           reduce using rule 38 (valor -> ID .)
    FUNCTION        reduce using rule 38 (valor -> ID .)
    ID              reduce using rule 38 (valor -> ID .)
    IF              reduce using rule 38 (valor -> ID .)
    ELSE            reduce using rule 38 (valor -> ID .)
    VAR             reduce using rule 38 (valor -> ID .)
    VAL             reduce using rule 38 (valor -> ID .)
    STRING          reduce using rule 38 (valor -> ID .)
    TRUE            reduce using rule 38 (valor -> ID .)
    FALSE           reduce using rule 38 (valor -> ID .)
    NULL            reduce using rule 38 (valor -> ID .)
    NOT             reduce using rule 38 (valor -> ID .)
    WHILE           reduce using rule 38 (valor -> ID .)
    FOR             reduce using rule 38 (valor -> ID .)
    INTV            reduce using rule 38 (valor -> ID .)
    FLOATV          reduce using rule 38 (valor -> ID .)
    $end            reduce using rule 38 (valor -> ID .)
    RCBRACKET       reduce using rule 38 (valor -> ID .)
    RETURN          reduce using rule 38 (valor -> ID .)

  ! LPAREN          [ reduce using rule 38 (valor -> ID .) ]


state 59

    (15) bucles -> while instrucciones .

    FUNCTION        reduce using rule 15 (bucles -> while instrucciones .)
    ID              reduce using rule 15 (bucles -> while instrucciones .)
    LPAREN          reduce using rule 15 (bucles -> while instrucciones .)
    IF              reduce using rule 15 (bucles -> while instrucciones .)
    ELSE            reduce using rule 15 (bucles -> while instrucciones .)
    VAR             reduce using rule 15 (bucles -> while instrucciones .)
    VAL             reduce using rule 15 (bucles -> while instrucciones .)
    STRING          reduce using rule 15 (bucles -> while instrucciones .)
    TRUE            reduce using rule 15 (bucles -> while instrucciones .)
    FALSE           reduce using rule 15 (bucles -> while instrucciones .)
    NULL            reduce using rule 15 (bucles -> while instrucciones .)
    NOT             reduce using rule 15 (bucles -> while instrucciones .)
    WHILE           reduce using rule 15 (bucles -> while instrucciones .)
    FOR             reduce using rule 15 (bucles -> while instrucciones .)
    INTV            reduce using rule 15 (bucles -> while instrucciones .)
    FLOATV          reduce using rule 15 (bucles -> while instrucciones .)
    $end            reduce using rule 15 (bucles -> while instrucciones .)
    RCBRACKET       reduce using rule 15 (bucles -> while instrucciones .)
    RETURN          reduce using rule 15 (bucles -> while instrucciones .)


state 60

    (16) bucles -> for instrucciones .

    FUNCTION        reduce using rule 16 (bucles -> for instrucciones .)
    ID              reduce using rule 16 (bucles -> for instrucciones .)
    LPAREN          reduce using rule 16 (bucles -> for instrucciones .)
    IF              reduce using rule 16 (bucles -> for instrucciones .)
    ELSE            reduce using rule 16 (bucles -> for instrucciones .)
    VAR             reduce using rule 16 (bucles -> for instrucciones .)
    VAL             reduce using rule 16 (bucles -> for instrucciones .)
    STRING          reduce using rule 16 (bucles -> for instrucciones .)
    TRUE            reduce using rule 16 (bucles -> for instrucciones .)
    FALSE           reduce using rule 16 (bucles -> for instrucciones .)
    NULL            reduce using rule 16 (bucles -> for instrucciones .)
    NOT             reduce using rule 16 (bucles -> for instrucciones .)
    WHILE           reduce using rule 16 (bucles -> for instrucciones .)
    FOR             reduce using rule 16 (bucles -> for instrucciones .)
    INTV            reduce using rule 16 (bucles -> for instrucciones .)
    FLOATV          reduce using rule 16 (bucles -> for instrucciones .)
    $end            reduce using rule 16 (bucles -> for instrucciones .)
    RCBRACKET       reduce using rule 16 (bucles -> for instrucciones .)
    RETURN          reduce using rule 16 (bucles -> for instrucciones .)


state 61

    (48) declarador -> VAR ID .

    ID              reduce using rule 48 (declarador -> VAR ID .)


state 62

    (49) declarador -> VAL ID .

    ID              reduce using rule 49 (declarador -> VAL ID .)


state 63

    (43) valor -> NOT valor .

    MINUS           reduce using rule 43 (valor -> NOT valor .)
    PLUS            reduce using rule 43 (valor -> NOT valor .)
    TIMES           reduce using rule 43 (valor -> NOT valor .)
    DIVIDE          reduce using rule 43 (valor -> NOT valor .)
    MODULE          reduce using rule 43 (valor -> NOT valor .)
    OR              reduce using rule 43 (valor -> NOT valor .)
    AND             reduce using rule 43 (valor -> NOT valor .)
    EQUALS          reduce using rule 43 (valor -> NOT valor .)
    NOTEQUALS       reduce using rule 43 (valor -> NOT valor .)
    GREATER         reduce using rule 43 (valor -> NOT valor .)
    LOWER           reduce using rule 43 (valor -> NOT valor .)
    FUNCTION        reduce using rule 43 (valor -> NOT valor .)
    ID              reduce using rule 43 (valor -> NOT valor .)
    LPAREN          reduce using rule 43 (valor -> NOT valor .)
    IF              reduce using rule 43 (valor -> NOT valor .)
    ELSE            reduce using rule 43 (valor -> NOT valor .)
    VAR             reduce using rule 43 (valor -> NOT valor .)
    VAL             reduce using rule 43 (valor -> NOT valor .)
    STRING          reduce using rule 43 (valor -> NOT valor .)
    TRUE            reduce using rule 43 (valor -> NOT valor .)
    FALSE           reduce using rule 43 (valor -> NOT valor .)
    NULL            reduce using rule 43 (valor -> NOT valor .)
    NOT             reduce using rule 43 (valor -> NOT valor .)
    WHILE           reduce using rule 43 (valor -> NOT valor .)
    FOR             reduce using rule 43 (valor -> NOT valor .)
    INTV            reduce using rule 43 (valor -> NOT valor .)
    FLOATV          reduce using rule 43 (valor -> NOT valor .)
    $end            reduce using rule 43 (valor -> NOT valor .)
    RCBRACKET       reduce using rule 43 (valor -> NOT valor .)
    RETURN          reduce using rule 43 (valor -> NOT valor .)
    RPAREN          reduce using rule 43 (valor -> NOT valor .)
    ;               reduce using rule 43 (valor -> NOT valor .)
    RSBRACKET       reduce using rule 43 (valor -> NOT valor .)
    ,               reduce using rule 43 (valor -> NOT valor .)


state 64

    (17) while -> WHILE LPAREN . expresion RPAREN
    (50) expresion -> . LPAREN expresion RPAREN
    (51) expresion -> . valor
    (52) expresion -> . expresion operadoresMat expresion
    (53) expresion -> . expresion operadoresLog expresion
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (67) number -> . INTV
    (68) number -> . FLOATV

    LPAREN          shift and go to state 11
    ID              shift and go to state 52
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    expresion                      shift and go to state 80
    valor                          shift and go to state 12
    number                         shift and go to state 20

state 65

    (18) for -> FOR LPAREN . ID IN ID RPAREN

    ID              shift and go to state 81


state 66

    (52) expresion -> expresion operadoresMat expresion .
    (52) expresion -> expresion . operadoresMat expresion
    (53) expresion -> expresion . operadoresLog expresion
    (62) operadoresMat -> . MINUS
    (63) operadoresMat -> . PLUS
    (64) operadoresMat -> . TIMES
    (65) operadoresMat -> . DIVIDE
    (66) operadoresMat -> . MODULE
    (54) operadoresLog -> . OR
    (55) operadoresLog -> . AND
    (56) operadoresLog -> . EQUALS
    (57) operadoresLog -> . NOTEQUALS
    (58) operadoresLog -> . GREATER
    (59) operadoresLog -> . LOWER
    (60) operadoresLog -> . GREATER ASSIGN
    (61) operadoresLog -> . LOWER ASSIGN

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
    FUNCTION        reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    ID              reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    LPAREN          reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    IF              reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    ELSE            reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    VAR             reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    VAL             reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    STRING          reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    TRUE            reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    FALSE           reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    NULL            reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    NOT             reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    WHILE           reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    FOR             reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    INTV            reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    FLOATV          reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    $end            reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    RCBRACKET       reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    RETURN          reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    RPAREN          reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    ;               reduce using rule 52 (expresion -> expresion operadoresMat expresion .)
    MINUS           shift and go to state 35
    PLUS            shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MODULE          shift and go to state 39
    OR              shift and go to state 40
    AND             shift and go to state 41
    EQUALS          shift and go to state 42
    NOTEQUALS       shift and go to state 43
    GREATER         shift and go to state 44
    LOWER           shift and go to state 45

  ! MINUS           [ reduce using rule 52 (expresion -> expresion operadoresMat expresion .) ]
  ! PLUS            [ reduce using rule 52 (expresion -> expresion operadoresMat expresion .) ]
  ! TIMES           [ reduce using rule 52 (expresion -> expresion operadoresMat expresion .) ]
  ! DIVIDE          [ reduce using rule 52 (expresion -> expresion operadoresMat expresion .) ]
  ! MODULE          [ reduce using rule 52 (expresion -> expresion operadoresMat expresion .) ]
  ! OR              [ reduce using rule 52 (expresion -> expresion operadoresMat expresion .) ]
  ! AND             [ reduce using rule 52 (expresion -> expresion operadoresMat expresion .) ]
  ! EQUALS          [ reduce using rule 52 (expresion -> expresion operadoresMat expresion .) ]
  ! NOTEQUALS       [ reduce using rule 52 (expresion -> expresion operadoresMat expresion .) ]
  ! GREATER         [ reduce using rule 52 (expresion -> expresion operadoresMat expresion .) ]
  ! LOWER           [ reduce using rule 52 (expresion -> expresion operadoresMat expresion .) ]

    operadoresMat                  shift and go to state 33
    operadoresLog                  shift and go to state 34

state 67

    (53) expresion -> expresion operadoresLog expresion .
    (52) expresion -> expresion . operadoresMat expresion
    (53) expresion -> expresion . operadoresLog expresion
    (62) operadoresMat -> . MINUS
    (63) operadoresMat -> . PLUS
    (64) operadoresMat -> . TIMES
    (65) operadoresMat -> . DIVIDE
    (66) operadoresMat -> . MODULE
    (54) operadoresLog -> . OR
    (55) operadoresLog -> . AND
    (56) operadoresLog -> . EQUALS
    (57) operadoresLog -> . NOTEQUALS
    (58) operadoresLog -> . GREATER
    (59) operadoresLog -> . LOWER
    (60) operadoresLog -> . GREATER ASSIGN
    (61) operadoresLog -> . LOWER ASSIGN

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
    FUNCTION        reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    ID              reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    LPAREN          reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    IF              reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    ELSE            reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    VAR             reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    VAL             reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    STRING          reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    TRUE            reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    FALSE           reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    NULL            reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    NOT             reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    WHILE           reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    FOR             reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    INTV            reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    FLOATV          reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    $end            reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    RCBRACKET       reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    RETURN          reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    RPAREN          reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    ;               reduce using rule 53 (expresion -> expresion operadoresLog expresion .)
    MINUS           shift and go to state 35
    PLUS            shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MODULE          shift and go to state 39
    OR              shift and go to state 40
    AND             shift and go to state 41
    EQUALS          shift and go to state 42
    NOTEQUALS       shift and go to state 43
    GREATER         shift and go to state 44
    LOWER           shift and go to state 45

  ! MINUS           [ reduce using rule 53 (expresion -> expresion operadoresLog expresion .) ]
  ! PLUS            [ reduce using rule 53 (expresion -> expresion operadoresLog expresion .) ]
  ! TIMES           [ reduce using rule 53 (expresion -> expresion operadoresLog expresion .) ]
  ! DIVIDE          [ reduce using rule 53 (expresion -> expresion operadoresLog expresion .) ]
  ! MODULE          [ reduce using rule 53 (expresion -> expresion operadoresLog expresion .) ]
  ! OR              [ reduce using rule 53 (expresion -> expresion operadoresLog expresion .) ]
  ! AND             [ reduce using rule 53 (expresion -> expresion operadoresLog expresion .) ]
  ! EQUALS          [ reduce using rule 53 (expresion -> expresion operadoresLog expresion .) ]
  ! NOTEQUALS       [ reduce using rule 53 (expresion -> expresion operadoresLog expresion .) ]
  ! GREATER         [ reduce using rule 53 (expresion -> expresion operadoresLog expresion .) ]
  ! LOWER           [ reduce using rule 53 (expresion -> expresion operadoresLog expresion .) ]

    operadoresLog                  shift and go to state 34
    operadoresMat                  shift and go to state 33

state 68

    (60) operadoresLog -> GREATER ASSIGN .

    LPAREN          reduce using rule 60 (operadoresLog -> GREATER ASSIGN .)
    ID              reduce using rule 60 (operadoresLog -> GREATER ASSIGN .)
    STRING          reduce using rule 60 (operadoresLog -> GREATER ASSIGN .)
    TRUE            reduce using rule 60 (operadoresLog -> GREATER ASSIGN .)
    FALSE           reduce using rule 60 (operadoresLog -> GREATER ASSIGN .)
    NULL            reduce using rule 60 (operadoresLog -> GREATER ASSIGN .)
    NOT             reduce using rule 60 (operadoresLog -> GREATER ASSIGN .)
    INTV            reduce using rule 60 (operadoresLog -> GREATER ASSIGN .)
    FLOATV          reduce using rule 60 (operadoresLog -> GREATER ASSIGN .)


state 69

    (61) operadoresLog -> LOWER ASSIGN .

    LPAREN          reduce using rule 61 (operadoresLog -> LOWER ASSIGN .)
    ID              reduce using rule 61 (operadoresLog -> LOWER ASSIGN .)
    STRING          reduce using rule 61 (operadoresLog -> LOWER ASSIGN .)
    TRUE            reduce using rule 61 (operadoresLog -> LOWER ASSIGN .)
    FALSE           reduce using rule 61 (operadoresLog -> LOWER ASSIGN .)
    NULL            reduce using rule 61 (operadoresLog -> LOWER ASSIGN .)
    NOT             reduce using rule 61 (operadoresLog -> LOWER ASSIGN .)
    INTV            reduce using rule 61 (operadoresLog -> LOWER ASSIGN .)
    FLOATV          reduce using rule 61 (operadoresLog -> LOWER ASSIGN .)


state 70

    (19) function -> FUNCTION ID LPAREN . params RPAREN instruccionesF
    (20) function -> FUNCTION ID LPAREN . RPAREN instruccionesF
    (33) params -> . ID : dato
    (34) params -> . params , params

    RPAREN          shift and go to state 84
    ID              shift and go to state 82

    params                         shift and go to state 83

state 71

    (23) function -> ID LSBRACKET valor . RSBRACKET

    RSBRACKET       shift and go to state 85


state 72

    (46) asignacion -> ID ASSIGN expresion .
    (52) expresion -> expresion . operadoresMat expresion
    (53) expresion -> expresion . operadoresLog expresion
    (62) operadoresMat -> . MINUS
    (63) operadoresMat -> . PLUS
    (64) operadoresMat -> . TIMES
    (65) operadoresMat -> . DIVIDE
    (66) operadoresMat -> . MODULE
    (54) operadoresLog -> . OR
    (55) operadoresLog -> . AND
    (56) operadoresLog -> . EQUALS
    (57) operadoresLog -> . NOTEQUALS
    (58) operadoresLog -> . GREATER
    (59) operadoresLog -> . LOWER
    (60) operadoresLog -> . GREATER ASSIGN
    (61) operadoresLog -> . LOWER ASSIGN

    ;               reduce using rule 46 (asignacion -> ID ASSIGN expresion .)
    MINUS           shift and go to state 35
    PLUS            shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MODULE          shift and go to state 39
    OR              shift and go to state 40
    AND             shift and go to state 41
    EQUALS          shift and go to state 42
    NOTEQUALS       shift and go to state 43
    GREATER         shift and go to state 44
    LOWER           shift and go to state 45

    operadoresMat                  shift and go to state 33
    operadoresLog                  shift and go to state 34

state 73

    (21) llamada -> ID LPAREN args . RPAREN
    (36) args -> args . , args

    RPAREN          shift and go to state 86
    ,               shift and go to state 87


state 74

    (22) llamada -> ID LPAREN RPAREN .

    ;               reduce using rule 22 (llamada -> ID LPAREN RPAREN .)


state 75

    (35) args -> valor .

    RPAREN          reduce using rule 35 (args -> valor .)
    ,               reduce using rule 35 (args -> valor .)


state 76

    (50) expresion -> LPAREN expresion RPAREN .

    MINUS           reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    TIMES           reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    MODULE          reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    OR              reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    AND             reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    EQUALS          reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    NOTEQUALS       reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    GREATER         reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    LOWER           reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    FUNCTION        reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    ID              reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    LPAREN          reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    IF              reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    ELSE            reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    VAR             reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    VAL             reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    STRING          reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    TRUE            reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    FALSE           reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    NULL            reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    NOT             reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    WHILE           reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    FOR             reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    INTV            reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    FLOATV          reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    $end            reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    RCBRACKET       reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    RETURN          reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)
    ;               reduce using rule 50 (expresion -> LPAREN expresion RPAREN .)


state 77

    (47) asignacion -> declarador ID ASSIGN . expresion
    (50) expresion -> . LPAREN expresion RPAREN
    (51) expresion -> . valor
    (52) expresion -> . expresion operadoresMat expresion
    (53) expresion -> . expresion operadoresLog expresion
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (67) number -> . INTV
    (68) number -> . FLOATV

    LPAREN          shift and go to state 11
    ID              shift and go to state 52
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    expresion                      shift and go to state 88
    valor                          shift and go to state 12
    number                         shift and go to state 20

state 78

    (13) estructuraControl -> IF LPAREN expresion . RPAREN instrucciones
    (52) expresion -> expresion . operadoresMat expresion
    (53) expresion -> expresion . operadoresLog expresion
    (62) operadoresMat -> . MINUS
    (63) operadoresMat -> . PLUS
    (64) operadoresMat -> . TIMES
    (65) operadoresMat -> . DIVIDE
    (66) operadoresMat -> . MODULE
    (54) operadoresLog -> . OR
    (55) operadoresLog -> . AND
    (56) operadoresLog -> . EQUALS
    (57) operadoresLog -> . NOTEQUALS
    (58) operadoresLog -> . GREATER
    (59) operadoresLog -> . LOWER
    (60) operadoresLog -> . GREATER ASSIGN
    (61) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 89
    MINUS           shift and go to state 35
    PLUS            shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MODULE          shift and go to state 39
    OR              shift and go to state 40
    AND             shift and go to state 41
    EQUALS          shift and go to state 42
    NOTEQUALS       shift and go to state 43
    GREATER         shift and go to state 44
    LOWER           shift and go to state 45

    operadoresMat                  shift and go to state 33
    operadoresLog                  shift and go to state 34

state 79

    (9) instrucciones -> LCBRACKET cuerpo . RCBRACKET

    RCBRACKET       shift and go to state 90


state 80

    (17) while -> WHILE LPAREN expresion . RPAREN
    (52) expresion -> expresion . operadoresMat expresion
    (53) expresion -> expresion . operadoresLog expresion
    (62) operadoresMat -> . MINUS
    (63) operadoresMat -> . PLUS
    (64) operadoresMat -> . TIMES
    (65) operadoresMat -> . DIVIDE
    (66) operadoresMat -> . MODULE
    (54) operadoresLog -> . OR
    (55) operadoresLog -> . AND
    (56) operadoresLog -> . EQUALS
    (57) operadoresLog -> . NOTEQUALS
    (58) operadoresLog -> . GREATER
    (59) operadoresLog -> . LOWER
    (60) operadoresLog -> . GREATER ASSIGN
    (61) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 91
    MINUS           shift and go to state 35
    PLUS            shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MODULE          shift and go to state 39
    OR              shift and go to state 40
    AND             shift and go to state 41
    EQUALS          shift and go to state 42
    NOTEQUALS       shift and go to state 43
    GREATER         shift and go to state 44
    LOWER           shift and go to state 45

    operadoresMat                  shift and go to state 33
    operadoresLog                  shift and go to state 34

state 81

    (18) for -> FOR LPAREN ID . IN ID RPAREN

    IN              shift and go to state 92


state 82

    (33) params -> ID . : dato

    :               shift and go to state 93


state 83

    (19) function -> FUNCTION ID LPAREN params . RPAREN instruccionesF
    (34) params -> params . , params

    RPAREN          shift and go to state 94
    ,               shift and go to state 95


state 84

    (20) function -> FUNCTION ID LPAREN RPAREN . instruccionesF
    (11) instruccionesF -> . LCBRACKET cuerpo retorno RCBRACKET

    LCBRACKET       shift and go to state 97

    instruccionesF                 shift and go to state 96

state 85

    (23) function -> ID LSBRACKET valor RSBRACKET .

    FUNCTION        reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    ID              reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    LPAREN          reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    IF              reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    ELSE            reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    VAR             reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    VAL             reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    STRING          reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    TRUE            reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    FALSE           reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    NULL            reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    NOT             reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    WHILE           reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    FOR             reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    INTV            reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)
    FLOATV          reduce using rule 23 (function -> ID LSBRACKET valor RSBRACKET .)


state 86

    (21) llamada -> ID LPAREN args RPAREN .

    ;               reduce using rule 21 (llamada -> ID LPAREN args RPAREN .)


state 87

    (36) args -> args , . args
    (35) args -> . valor
    (36) args -> . args , args
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (67) number -> . INTV
    (68) number -> . FLOATV

    ID              shift and go to state 52
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    args                           shift and go to state 98
    valor                          shift and go to state 75
    number                         shift and go to state 20

state 88

    (47) asignacion -> declarador ID ASSIGN expresion .
    (52) expresion -> expresion . operadoresMat expresion
    (53) expresion -> expresion . operadoresLog expresion
    (62) operadoresMat -> . MINUS
    (63) operadoresMat -> . PLUS
    (64) operadoresMat -> . TIMES
    (65) operadoresMat -> . DIVIDE
    (66) operadoresMat -> . MODULE
    (54) operadoresLog -> . OR
    (55) operadoresLog -> . AND
    (56) operadoresLog -> . EQUALS
    (57) operadoresLog -> . NOTEQUALS
    (58) operadoresLog -> . GREATER
    (59) operadoresLog -> . LOWER
    (60) operadoresLog -> . GREATER ASSIGN
    (61) operadoresLog -> . LOWER ASSIGN

    ;               reduce using rule 47 (asignacion -> declarador ID ASSIGN expresion .)
    MINUS           shift and go to state 35
    PLUS            shift and go to state 36
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38
    MODULE          shift and go to state 39
    OR              shift and go to state 40
    AND             shift and go to state 41
    EQUALS          shift and go to state 42
    NOTEQUALS       shift and go to state 43
    GREATER         shift and go to state 44
    LOWER           shift and go to state 45

    operadoresMat                  shift and go to state 33
    operadoresLog                  shift and go to state 34

state 89

    (13) estructuraControl -> IF LPAREN expresion RPAREN . instrucciones
    (9) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (10) instrucciones -> . sentencia
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . expresion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada ;
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (50) expresion -> . LPAREN expresion RPAREN
    (51) expresion -> . valor
    (52) expresion -> . expresion operadoresMat expresion
    (53) expresion -> . expresion operadoresLog expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (48) declarador -> . VAR ID
    (49) declarador -> . VAL ID
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN
    (67) number -> . INTV
    (68) number -> . FLOATV

    LCBRACKET       shift and go to state 56
    ID              shift and go to state 58
    LPAREN          shift and go to state 11
    IF              shift and go to state 14
    ELSE            shift and go to state 15
    VAR             shift and go to state 18
    VAL             shift and go to state 19
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    expresion                      shift and go to state 5
    instrucciones                  shift and go to state 99
    sentencia                      shift and go to state 57
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 6
    bucles                         shift and go to state 7
    llamada                        shift and go to state 8
    declarador                     shift and go to state 13
    valor                          shift and go to state 12
    while                          shift and go to state 16
    for                            shift and go to state 17
    number                         shift and go to state 20

state 90

    (9) instrucciones -> LCBRACKET cuerpo RCBRACKET .

    FUNCTION        reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    ID              reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    LPAREN          reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    IF              reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    ELSE            reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    VAR             reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    VAL             reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    STRING          reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    TRUE            reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    FALSE           reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    NULL            reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    NOT             reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    WHILE           reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    FOR             reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    INTV            reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    FLOATV          reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    $end            reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    RCBRACKET       reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    RETURN          reduce using rule 9 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)


state 91

    (17) while -> WHILE LPAREN expresion RPAREN .

    LCBRACKET       reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    ID              reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    LPAREN          reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    IF              reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    ELSE            reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    VAR             reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    VAL             reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    STRING          reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    TRUE            reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    FALSE           reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    NULL            reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    NOT             reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    WHILE           reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    FOR             reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    INTV            reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)
    FLOATV          reduce using rule 17 (while -> WHILE LPAREN expresion RPAREN .)


state 92

    (18) for -> FOR LPAREN ID IN . ID RPAREN

    ID              shift and go to state 100


state 93

    (33) params -> ID : . dato
    (24) dato -> . INT
    (25) dato -> . FLOAT
    (26) dato -> . BYTE
    (27) dato -> . SHORT
    (28) dato -> . DOUBLE
    (29) dato -> . ID
    (30) dato -> . LONG
    (31) dato -> . CHAR
    (32) dato -> . BOOLEAN

    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    BYTE            shift and go to state 105
    SHORT           shift and go to state 106
    DOUBLE          shift and go to state 107
    ID              shift and go to state 101
    LONG            shift and go to state 108
    CHAR            shift and go to state 109
    BOOLEAN         shift and go to state 110

    dato                           shift and go to state 102

state 94

    (19) function -> FUNCTION ID LPAREN params RPAREN . instruccionesF
    (11) instruccionesF -> . LCBRACKET cuerpo retorno RCBRACKET

    LCBRACKET       shift and go to state 97

    instruccionesF                 shift and go to state 111

state 95

    (34) params -> params , . params
    (33) params -> . ID : dato
    (34) params -> . params , params

    ID              shift and go to state 82

    params                         shift and go to state 112

state 96

    (20) function -> FUNCTION ID LPAREN RPAREN instruccionesF .

    FUNCTION        reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    ID              reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    LPAREN          reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    IF              reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    ELSE            reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    VAR             reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    VAL             reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    STRING          reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    TRUE            reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    FALSE           reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    NULL            reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    NOT             reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    WHILE           reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    FOR             reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    INTV            reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    FLOATV          reduce using rule 20 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)


state 97

    (11) instruccionesF -> LCBRACKET . cuerpo retorno RCBRACKET
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . sentencia cuerpo
    (3) cuerpo -> . function cuerpo
    (4) sentencia -> . asignacion ;
    (5) sentencia -> . expresion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada ;
    (19) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (20) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (23) function -> . ID LSBRACKET valor RSBRACKET
    (46) asignacion -> . ID ASSIGN expresion
    (47) asignacion -> . declarador ID ASSIGN expresion
    (50) expresion -> . LPAREN expresion RPAREN
    (51) expresion -> . valor
    (52) expresion -> . expresion operadoresMat expresion
    (53) expresion -> . expresion operadoresLog expresion
    (13) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (14) estructuraControl -> . ELSE instrucciones
    (15) bucles -> . while instrucciones
    (16) bucles -> . for instrucciones
    (21) llamada -> . ID LPAREN args RPAREN
    (22) llamada -> . ID LPAREN RPAREN
    (44) declarador -> . VAR
    (45) declarador -> . VAL
    (48) declarador -> . VAR ID
    (49) declarador -> . VAL ID
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (17) while -> . WHILE LPAREN expresion RPAREN
    (18) for -> . FOR LPAREN ID IN ID RPAREN
    (67) number -> . INTV
    (68) number -> . FLOATV

    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    LPAREN          shift and go to state 11
    IF              shift and go to state 14
    ELSE            shift and go to state 15
    VAR             shift and go to state 18
    VAL             shift and go to state 19
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 27
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    cuerpo                         shift and go to state 113
    sentencia                      shift and go to state 2
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    expresion                      shift and go to state 5
    estructuraControl              shift and go to state 6
    bucles                         shift and go to state 7
    llamada                        shift and go to state 8
    valor                          shift and go to state 12
    declarador                     shift and go to state 13
    while                          shift and go to state 16
    for                            shift and go to state 17
    number                         shift and go to state 20

state 98

    (36) args -> args , args .
    (36) args -> args . , args

  ! shift/reduce conflict for , resolved as shift
    RPAREN          reduce using rule 36 (args -> args , args .)
    ,               shift and go to state 87

  ! ,               [ reduce using rule 36 (args -> args , args .) ]


state 99

    (13) estructuraControl -> IF LPAREN expresion RPAREN instrucciones .

    FUNCTION        reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    ID              reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    LPAREN          reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    IF              reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    ELSE            reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    VAR             reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    VAL             reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    STRING          reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    TRUE            reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    FALSE           reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    NULL            reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    NOT             reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    WHILE           reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    FOR             reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    INTV            reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    FLOATV          reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    $end            reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    RCBRACKET       reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    RETURN          reduce using rule 13 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)


state 100

    (18) for -> FOR LPAREN ID IN ID . RPAREN

    RPAREN          shift and go to state 114


state 101

    (29) dato -> ID .

    RPAREN          reduce using rule 29 (dato -> ID .)
    ,               reduce using rule 29 (dato -> ID .)


state 102

    (33) params -> ID : dato .

    RPAREN          reduce using rule 33 (params -> ID : dato .)
    ,               reduce using rule 33 (params -> ID : dato .)


state 103

    (24) dato -> INT .

    RPAREN          reduce using rule 24 (dato -> INT .)
    ,               reduce using rule 24 (dato -> INT .)


state 104

    (25) dato -> FLOAT .

    RPAREN          reduce using rule 25 (dato -> FLOAT .)
    ,               reduce using rule 25 (dato -> FLOAT .)


state 105

    (26) dato -> BYTE .

    RPAREN          reduce using rule 26 (dato -> BYTE .)
    ,               reduce using rule 26 (dato -> BYTE .)


state 106

    (27) dato -> SHORT .

    RPAREN          reduce using rule 27 (dato -> SHORT .)
    ,               reduce using rule 27 (dato -> SHORT .)


state 107

    (28) dato -> DOUBLE .

    RPAREN          reduce using rule 28 (dato -> DOUBLE .)
    ,               reduce using rule 28 (dato -> DOUBLE .)


state 108

    (30) dato -> LONG .

    RPAREN          reduce using rule 30 (dato -> LONG .)
    ,               reduce using rule 30 (dato -> LONG .)


state 109

    (31) dato -> CHAR .

    RPAREN          reduce using rule 31 (dato -> CHAR .)
    ,               reduce using rule 31 (dato -> CHAR .)


state 110

    (32) dato -> BOOLEAN .

    RPAREN          reduce using rule 32 (dato -> BOOLEAN .)
    ,               reduce using rule 32 (dato -> BOOLEAN .)


state 111

    (19) function -> FUNCTION ID LPAREN params RPAREN instruccionesF .

    FUNCTION        reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    ID              reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    LPAREN          reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    IF              reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    ELSE            reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    VAR             reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    VAL             reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    STRING          reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    TRUE            reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    FALSE           reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    NULL            reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    NOT             reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    WHILE           reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    FOR             reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    INTV            reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    FLOATV          reduce using rule 19 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)


state 112

    (34) params -> params , params .
    (34) params -> params . , params

  ! shift/reduce conflict for , resolved as shift
    RPAREN          reduce using rule 34 (params -> params , params .)
    ,               shift and go to state 95

  ! ,               [ reduce using rule 34 (params -> params , params .) ]


state 113

    (11) instruccionesF -> LCBRACKET cuerpo . retorno RCBRACKET
    (12) retorno -> . RETURN valor ;

    RETURN          shift and go to state 116

    retorno                        shift and go to state 115

state 114

    (18) for -> FOR LPAREN ID IN ID RPAREN .

    LCBRACKET       reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    ID              reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    LPAREN          reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    IF              reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    ELSE            reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    VAR             reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    VAL             reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    STRING          reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    TRUE            reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    FALSE           reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    NULL            reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    NOT             reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    WHILE           reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    FOR             reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    INTV            reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)
    FLOATV          reduce using rule 18 (for -> FOR LPAREN ID IN ID RPAREN .)


state 115

    (11) instruccionesF -> LCBRACKET cuerpo retorno . RCBRACKET

    RCBRACKET       shift and go to state 117


state 116

    (12) retorno -> RETURN . valor ;
    (37) valor -> . number
    (38) valor -> . ID
    (39) valor -> . STRING
    (40) valor -> . TRUE
    (41) valor -> . FALSE
    (42) valor -> . NULL
    (43) valor -> . NOT valor
    (67) number -> . INTV
    (68) number -> . FLOATV

    ID              shift and go to state 52
    STRING          shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23
    NULL            shift and go to state 24
    NOT             shift and go to state 25
    INTV            shift and go to state 28
    FLOATV          shift and go to state 29

    valor                          shift and go to state 118
    number                         shift and go to state 20

state 117

    (11) instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .

    FUNCTION        reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    ID              reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    LPAREN          reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    IF              reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    ELSE            reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    VAR             reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    VAL             reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    STRING          reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    TRUE            reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    FALSE           reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    NULL            reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    NOT             reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    WHILE           reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    FOR             reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    INTV            reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    FLOATV          reduce using rule 11 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)


state 118

    (12) retorno -> RETURN valor . ;

    ;               shift and go to state 119


state 119

    (12) retorno -> RETURN valor ; .

    RCBRACKET       reduce using rule 12 (retorno -> RETURN valor ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 10 resolved as shift
WARNING: shift/reduce conflict for ID in state 18 resolved as shift
WARNING: shift/reduce conflict for ID in state 19 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 66 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 66 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 66 resolved as shift
WARNING: shift/reduce conflict for OR in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 66 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 66 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 66 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 67 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 67 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 67 resolved as shift
WARNING: shift/reduce conflict for OR in state 67 resolved as shift
WARNING: shift/reduce conflict for AND in state 67 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 67 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 67 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 67 resolved as shift
WARNING: shift/reduce conflict for , in state 98 resolved as shift
WARNING: shift/reduce conflict for , in state 112 resolved as shift
