Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COUNT
    FIRST
    GET
    GREATERE
    LAST
    LENGTH
    LIST
    LISTOF
    LOWERE
    MUTABLELIST
    MUTABLELISTOF
    SETOF
    STRINGW

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> sentencia
Rule 2     cuerpo -> function
Rule 3     cuerpo -> sentencia cuerpo
Rule 4     cuerpo -> function cuerpo
Rule 5     sentencia -> asignacion
Rule 6     sentencia -> estructuraControl
Rule 7     sentencia -> bucles
Rule 8     sentencia -> llamada
Rule 9     sentencia -> declaracion
Rule 10    instrucciones -> LCBRACKET cuerpo RCBRACKET
Rule 11    instrucciones -> sentencia
Rule 12    instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET
Rule 13    instruccionesF -> LCBRACKET retorno RCBRACKET
Rule 14    instruccionesF -> : dato LCBRACKET cuerpo retorno RCBRACKET
Rule 15    instruccionesF -> : dato LCBRACKET retorno RCBRACKET
Rule 16    retorno -> RETURN expresion
Rule 17    estructuraControl -> IF LPAREN expresion RPAREN instrucciones
Rule 18    estructuraControl -> ELSE instrucciones
Rule 19    bucles -> while instrucciones
Rule 20    bucles -> for instrucciones
Rule 21    while -> WHILE LPAREN expresion RPAREN
Rule 22    for -> FOR LPAREN ID IN ID RPAREN
Rule 23    function -> FUNCTION ID LPAREN params RPAREN instruccionesF
Rule 24    function -> FUNCTION ID LPAREN RPAREN instruccionesF
Rule 25    llamada -> PRINTLN LPAREN expresion RPAREN
Rule 26    llamada -> ID LPAREN args RPAREN
Rule 27    llamada -> ID LPAREN RPAREN
Rule 28    llamada -> ID . ID LPAREN args RPAREN
Rule 29    llamada -> ID . ID LPAREN RPAREN
Rule 30    function -> ID LSBRACKET expresion RSBRACKET
Rule 31    dato -> INT
Rule 32    dato -> FLOAT
Rule 33    dato -> BYTE
Rule 34    dato -> SHORT
Rule 35    dato -> DOUBLE
Rule 36    dato -> ID
Rule 37    dato -> LONG
Rule 38    dato -> CHAR
Rule 39    dato -> BOOLEAN
Rule 40    params -> ID : dato
Rule 41    params -> params , params
Rule 42    args -> expresion
Rule 43    args -> args , args
Rule 44    valor -> ID
Rule 45    valor -> number
Rule 46    valor -> STRING
Rule 47    valor -> TRUE
Rule 48    valor -> FALSE
Rule 49    valor -> NULL
Rule 50    valor -> NOT valor
Rule 51    declarador -> VAR
Rule 52    declarador -> VAL
Rule 53    asignacion -> ID ASSIGN expresion
Rule 54    asignacion -> declarador ID ASSIGN expresion
Rule 55    declaracion -> declarador ID
Rule 56    expresion -> LPAREN expresion RPAREN
Rule 57    expresion -> valor
Rule 58    expresion -> expresion operadoresMat expresion
Rule 59    expresion -> expresion operadoresLog expresion
Rule 60    operadoresLog -> OR
Rule 61    operadoresLog -> AND
Rule 62    operadoresLog -> EQUALS
Rule 63    operadoresLog -> NOTEQUALS
Rule 64    operadoresLog -> GREATER
Rule 65    operadoresLog -> LOWER
Rule 66    operadoresLog -> GREATER ASSIGN
Rule 67    operadoresLog -> LOWER ASSIGN
Rule 68    operadoresMat -> MINUS
Rule 69    operadoresMat -> PLUS
Rule 70    operadoresMat -> TIMES
Rule 71    operadoresMat -> DIVIDE
Rule 72    operadoresMat -> MODULE
Rule 73    number -> INTV
Rule 74    number -> FLOATV

Terminals, with rules where they appear

,                    : 41 43
.                    : 28 29
:                    : 14 15 40
AND                  : 61
ASSIGN               : 53 54 66 67
BOOLEAN              : 39
BYTE                 : 33
CHAR                 : 38
COUNT                : 
DIVIDE               : 71
DOUBLE               : 35
ELSE                 : 18
EQUALS               : 62
FALSE                : 48
FIRST                : 
FLOAT                : 32
FLOATV               : 74
FOR                  : 22
FUNCTION             : 23 24
GET                  : 
GREATER              : 64 66
GREATERE             : 
ID                   : 22 22 23 24 26 27 28 28 29 29 30 36 40 44 53 54 55
IF                   : 17
IN                   : 22
INT                  : 31
INTV                 : 73
LAST                 : 
LCBRACKET            : 10 12 13 14 15
LENGTH               : 
LIST                 : 
LISTOF               : 
LONG                 : 37
LOWER                : 65 67
LOWERE               : 
LPAREN               : 17 21 22 23 24 25 26 27 28 29 56
LSBRACKET            : 30
MINUS                : 68
MODULE               : 72
MUTABLELIST          : 
MUTABLELISTOF        : 
NOT                  : 50
NOTEQUALS            : 63
NULL                 : 49
OR                   : 60
PLUS                 : 69
PRINTLN              : 25
RCBRACKET            : 10 12 13 14 15
RETURN               : 16
RPAREN               : 17 21 22 23 24 25 26 27 28 29 56
RSBRACKET            : 30
SETOF                : 
SHORT                : 34
STRING               : 46
STRINGW              : 
TIMES                : 70
TRUE                 : 47
VAL                  : 52
VAR                  : 51
WHILE                : 21
error                : 

Nonterminals, with rules where they appear

args                 : 26 28 43 43
asignacion           : 5
bucles               : 7
cuerpo               : 3 4 10 12 14 0
dato                 : 14 15 40
declaracion          : 9
declarador           : 54 55
estructuraControl    : 6
expresion            : 16 17 21 25 30 42 53 54 56 58 58 59 59
for                  : 20
function             : 2 4
instrucciones        : 17 18 19 20
instruccionesF       : 23 24
llamada              : 8
number               : 45
operadoresLog        : 59
operadoresMat        : 58
params               : 23 41 41
retorno              : 12 13 14 15
sentencia            : 1 3 11
valor                : 50 57
while                : 19

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . function
    (3) cuerpo -> . sentencia cuerpo
    (4) cuerpo -> . function cuerpo
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (23) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (24) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (30) function -> . ID LSBRACKET expresion RSBRACKET
    (53) asignacion -> . ID ASSIGN expresion
    (54) asignacion -> . declarador ID ASSIGN expresion
    (17) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (18) estructuraControl -> . ELSE instrucciones
    (19) bucles -> . while instrucciones
    (20) bucles -> . for instrucciones
    (25) llamada -> . PRINTLN LPAREN expresion RPAREN
    (26) llamada -> . ID LPAREN args RPAREN
    (27) llamada -> . ID LPAREN RPAREN
    (28) llamada -> . ID . ID LPAREN args RPAREN
    (29) llamada -> . ID . ID LPAREN RPAREN
    (55) declaracion -> . declarador ID
    (51) declarador -> . VAR
    (52) declarador -> . VAL
    (21) while -> . WHILE LPAREN expresion RPAREN
    (22) for -> . FOR LPAREN ID IN ID RPAREN

    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    cuerpo                         shift and go to state 1
    sentencia                      shift and go to state 2
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> sentencia .
    (3) cuerpo -> sentencia . cuerpo
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . function
    (3) cuerpo -> . sentencia cuerpo
    (4) cuerpo -> . function cuerpo
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (23) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (24) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (30) function -> . ID LSBRACKET expresion RSBRACKET
    (53) asignacion -> . ID ASSIGN expresion
    (54) asignacion -> . declarador ID ASSIGN expresion
    (17) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (18) estructuraControl -> . ELSE instrucciones
    (19) bucles -> . while instrucciones
    (20) bucles -> . for instrucciones
    (25) llamada -> . PRINTLN LPAREN expresion RPAREN
    (26) llamada -> . ID LPAREN args RPAREN
    (27) llamada -> . ID LPAREN RPAREN
    (28) llamada -> . ID . ID LPAREN args RPAREN
    (29) llamada -> . ID . ID LPAREN RPAREN
    (55) declaracion -> . declarador ID
    (51) declarador -> . VAR
    (52) declarador -> . VAL
    (21) while -> . WHILE LPAREN expresion RPAREN
    (22) for -> . FOR LPAREN ID IN ID RPAREN

    $end            reduce using rule 1 (cuerpo -> sentencia .)
    RCBRACKET       reduce using rule 1 (cuerpo -> sentencia .)
    RETURN          reduce using rule 1 (cuerpo -> sentencia .)
    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    sentencia                      shift and go to state 2
    cuerpo                         shift and go to state 21
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 3

    (2) cuerpo -> function .
    (4) cuerpo -> function . cuerpo
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . function
    (3) cuerpo -> . sentencia cuerpo
    (4) cuerpo -> . function cuerpo
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (23) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (24) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (30) function -> . ID LSBRACKET expresion RSBRACKET
    (53) asignacion -> . ID ASSIGN expresion
    (54) asignacion -> . declarador ID ASSIGN expresion
    (17) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (18) estructuraControl -> . ELSE instrucciones
    (19) bucles -> . while instrucciones
    (20) bucles -> . for instrucciones
    (25) llamada -> . PRINTLN LPAREN expresion RPAREN
    (26) llamada -> . ID LPAREN args RPAREN
    (27) llamada -> . ID LPAREN RPAREN
    (28) llamada -> . ID . ID LPAREN args RPAREN
    (29) llamada -> . ID . ID LPAREN RPAREN
    (55) declaracion -> . declarador ID
    (51) declarador -> . VAR
    (52) declarador -> . VAL
    (21) while -> . WHILE LPAREN expresion RPAREN
    (22) for -> . FOR LPAREN ID IN ID RPAREN

    $end            reduce using rule 2 (cuerpo -> function .)
    RCBRACKET       reduce using rule 2 (cuerpo -> function .)
    RETURN          reduce using rule 2 (cuerpo -> function .)
    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    function                       shift and go to state 3
    cuerpo                         shift and go to state 22
    sentencia                      shift and go to state 2
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 4

    (5) sentencia -> asignacion .

    FUNCTION        reduce using rule 5 (sentencia -> asignacion .)
    ID              reduce using rule 5 (sentencia -> asignacion .)
    IF              reduce using rule 5 (sentencia -> asignacion .)
    ELSE            reduce using rule 5 (sentencia -> asignacion .)
    PRINTLN         reduce using rule 5 (sentencia -> asignacion .)
    VAR             reduce using rule 5 (sentencia -> asignacion .)
    VAL             reduce using rule 5 (sentencia -> asignacion .)
    WHILE           reduce using rule 5 (sentencia -> asignacion .)
    FOR             reduce using rule 5 (sentencia -> asignacion .)
    $end            reduce using rule 5 (sentencia -> asignacion .)
    RCBRACKET       reduce using rule 5 (sentencia -> asignacion .)
    RETURN          reduce using rule 5 (sentencia -> asignacion .)


state 5

    (6) sentencia -> estructuraControl .

    FUNCTION        reduce using rule 6 (sentencia -> estructuraControl .)
    ID              reduce using rule 6 (sentencia -> estructuraControl .)
    IF              reduce using rule 6 (sentencia -> estructuraControl .)
    ELSE            reduce using rule 6 (sentencia -> estructuraControl .)
    PRINTLN         reduce using rule 6 (sentencia -> estructuraControl .)
    VAR             reduce using rule 6 (sentencia -> estructuraControl .)
    VAL             reduce using rule 6 (sentencia -> estructuraControl .)
    WHILE           reduce using rule 6 (sentencia -> estructuraControl .)
    FOR             reduce using rule 6 (sentencia -> estructuraControl .)
    $end            reduce using rule 6 (sentencia -> estructuraControl .)
    RCBRACKET       reduce using rule 6 (sentencia -> estructuraControl .)
    RETURN          reduce using rule 6 (sentencia -> estructuraControl .)


state 6

    (7) sentencia -> bucles .

    FUNCTION        reduce using rule 7 (sentencia -> bucles .)
    ID              reduce using rule 7 (sentencia -> bucles .)
    IF              reduce using rule 7 (sentencia -> bucles .)
    ELSE            reduce using rule 7 (sentencia -> bucles .)
    PRINTLN         reduce using rule 7 (sentencia -> bucles .)
    VAR             reduce using rule 7 (sentencia -> bucles .)
    VAL             reduce using rule 7 (sentencia -> bucles .)
    WHILE           reduce using rule 7 (sentencia -> bucles .)
    FOR             reduce using rule 7 (sentencia -> bucles .)
    $end            reduce using rule 7 (sentencia -> bucles .)
    RCBRACKET       reduce using rule 7 (sentencia -> bucles .)
    RETURN          reduce using rule 7 (sentencia -> bucles .)


state 7

    (8) sentencia -> llamada .

    FUNCTION        reduce using rule 8 (sentencia -> llamada .)
    ID              reduce using rule 8 (sentencia -> llamada .)
    IF              reduce using rule 8 (sentencia -> llamada .)
    ELSE            reduce using rule 8 (sentencia -> llamada .)
    PRINTLN         reduce using rule 8 (sentencia -> llamada .)
    VAR             reduce using rule 8 (sentencia -> llamada .)
    VAL             reduce using rule 8 (sentencia -> llamada .)
    WHILE           reduce using rule 8 (sentencia -> llamada .)
    FOR             reduce using rule 8 (sentencia -> llamada .)
    $end            reduce using rule 8 (sentencia -> llamada .)
    RCBRACKET       reduce using rule 8 (sentencia -> llamada .)
    RETURN          reduce using rule 8 (sentencia -> llamada .)


state 8

    (9) sentencia -> declaracion .

    FUNCTION        reduce using rule 9 (sentencia -> declaracion .)
    ID              reduce using rule 9 (sentencia -> declaracion .)
    IF              reduce using rule 9 (sentencia -> declaracion .)
    ELSE            reduce using rule 9 (sentencia -> declaracion .)
    PRINTLN         reduce using rule 9 (sentencia -> declaracion .)
    VAR             reduce using rule 9 (sentencia -> declaracion .)
    VAL             reduce using rule 9 (sentencia -> declaracion .)
    WHILE           reduce using rule 9 (sentencia -> declaracion .)
    FOR             reduce using rule 9 (sentencia -> declaracion .)
    $end            reduce using rule 9 (sentencia -> declaracion .)
    RCBRACKET       reduce using rule 9 (sentencia -> declaracion .)
    RETURN          reduce using rule 9 (sentencia -> declaracion .)


state 9

    (23) function -> FUNCTION . ID LPAREN params RPAREN instruccionesF
    (24) function -> FUNCTION . ID LPAREN RPAREN instruccionesF

    ID              shift and go to state 23


state 10

    (30) function -> ID . LSBRACKET expresion RSBRACKET
    (53) asignacion -> ID . ASSIGN expresion
    (26) llamada -> ID . LPAREN args RPAREN
    (27) llamada -> ID . LPAREN RPAREN
    (28) llamada -> ID . . ID LPAREN args RPAREN
    (29) llamada -> ID . . ID LPAREN RPAREN

    LSBRACKET       shift and go to state 24
    ASSIGN          shift and go to state 25
    LPAREN          shift and go to state 26
    .               shift and go to state 27


state 11

    (54) asignacion -> declarador . ID ASSIGN expresion
    (55) declaracion -> declarador . ID

    ID              shift and go to state 28


state 12

    (17) estructuraControl -> IF . LPAREN expresion RPAREN instrucciones

    LPAREN          shift and go to state 29


state 13

    (18) estructuraControl -> ELSE . instrucciones
    (10) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (11) instrucciones -> . sentencia
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (53) asignacion -> . ID ASSIGN expresion
    (54) asignacion -> . declarador ID ASSIGN expresion
    (17) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (18) estructuraControl -> . ELSE instrucciones
    (19) bucles -> . while instrucciones
    (20) bucles -> . for instrucciones
    (25) llamada -> . PRINTLN LPAREN expresion RPAREN
    (26) llamada -> . ID LPAREN args RPAREN
    (27) llamada -> . ID LPAREN RPAREN
    (28) llamada -> . ID . ID LPAREN args RPAREN
    (29) llamada -> . ID . ID LPAREN RPAREN
    (55) declaracion -> . declarador ID
    (51) declarador -> . VAR
    (52) declarador -> . VAL
    (21) while -> . WHILE LPAREN expresion RPAREN
    (22) for -> . FOR LPAREN ID IN ID RPAREN

    LCBRACKET       shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    instrucciones                  shift and go to state 30
    sentencia                      shift and go to state 32
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 14

    (19) bucles -> while . instrucciones
    (10) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (11) instrucciones -> . sentencia
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (53) asignacion -> . ID ASSIGN expresion
    (54) asignacion -> . declarador ID ASSIGN expresion
    (17) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (18) estructuraControl -> . ELSE instrucciones
    (19) bucles -> . while instrucciones
    (20) bucles -> . for instrucciones
    (25) llamada -> . PRINTLN LPAREN expresion RPAREN
    (26) llamada -> . ID LPAREN args RPAREN
    (27) llamada -> . ID LPAREN RPAREN
    (28) llamada -> . ID . ID LPAREN args RPAREN
    (29) llamada -> . ID . ID LPAREN RPAREN
    (55) declaracion -> . declarador ID
    (51) declarador -> . VAR
    (52) declarador -> . VAL
    (21) while -> . WHILE LPAREN expresion RPAREN
    (22) for -> . FOR LPAREN ID IN ID RPAREN

    LCBRACKET       shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    while                          shift and go to state 14
    instrucciones                  shift and go to state 34
    sentencia                      shift and go to state 32
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    for                            shift and go to state 15

state 15

    (20) bucles -> for . instrucciones
    (10) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (11) instrucciones -> . sentencia
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (53) asignacion -> . ID ASSIGN expresion
    (54) asignacion -> . declarador ID ASSIGN expresion
    (17) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (18) estructuraControl -> . ELSE instrucciones
    (19) bucles -> . while instrucciones
    (20) bucles -> . for instrucciones
    (25) llamada -> . PRINTLN LPAREN expresion RPAREN
    (26) llamada -> . ID LPAREN args RPAREN
    (27) llamada -> . ID LPAREN RPAREN
    (28) llamada -> . ID . ID LPAREN args RPAREN
    (29) llamada -> . ID . ID LPAREN RPAREN
    (55) declaracion -> . declarador ID
    (51) declarador -> . VAR
    (52) declarador -> . VAL
    (21) while -> . WHILE LPAREN expresion RPAREN
    (22) for -> . FOR LPAREN ID IN ID RPAREN

    LCBRACKET       shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    for                            shift and go to state 15
    instrucciones                  shift and go to state 35
    sentencia                      shift and go to state 32
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14

state 16

    (25) llamada -> PRINTLN . LPAREN expresion RPAREN

    LPAREN          shift and go to state 36


state 17

    (51) declarador -> VAR .

    ID              reduce using rule 51 (declarador -> VAR .)


state 18

    (52) declarador -> VAL .

    ID              reduce using rule 52 (declarador -> VAL .)


state 19

    (21) while -> WHILE . LPAREN expresion RPAREN

    LPAREN          shift and go to state 37


state 20

    (22) for -> FOR . LPAREN ID IN ID RPAREN

    LPAREN          shift and go to state 38


state 21

    (3) cuerpo -> sentencia cuerpo .

    $end            reduce using rule 3 (cuerpo -> sentencia cuerpo .)
    RCBRACKET       reduce using rule 3 (cuerpo -> sentencia cuerpo .)
    RETURN          reduce using rule 3 (cuerpo -> sentencia cuerpo .)


state 22

    (4) cuerpo -> function cuerpo .

    $end            reduce using rule 4 (cuerpo -> function cuerpo .)
    RCBRACKET       reduce using rule 4 (cuerpo -> function cuerpo .)
    RETURN          reduce using rule 4 (cuerpo -> function cuerpo .)


state 23

    (23) function -> FUNCTION ID . LPAREN params RPAREN instruccionesF
    (24) function -> FUNCTION ID . LPAREN RPAREN instruccionesF

    LPAREN          shift and go to state 39


state 24

    (30) function -> ID LSBRACKET . expresion RSBRACKET
    (56) expresion -> . LPAREN expresion RPAREN
    (57) expresion -> . valor
    (58) expresion -> . expresion operadoresMat expresion
    (59) expresion -> . expresion operadoresLog expresion
    (44) valor -> . ID
    (45) valor -> . number
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . NULL
    (50) valor -> . NOT valor
    (73) number -> . INTV
    (74) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 41
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 25

    (53) asignacion -> ID ASSIGN . expresion
    (56) expresion -> . LPAREN expresion RPAREN
    (57) expresion -> . valor
    (58) expresion -> . expresion operadoresMat expresion
    (59) expresion -> . expresion operadoresLog expresion
    (44) valor -> . ID
    (45) valor -> . number
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . NULL
    (50) valor -> . NOT valor
    (73) number -> . INTV
    (74) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 52
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 26

    (26) llamada -> ID LPAREN . args RPAREN
    (27) llamada -> ID LPAREN . RPAREN
    (42) args -> . expresion
    (43) args -> . args , args
    (56) expresion -> . LPAREN expresion RPAREN
    (57) expresion -> . valor
    (58) expresion -> . expresion operadoresMat expresion
    (59) expresion -> . expresion operadoresLog expresion
    (44) valor -> . ID
    (45) valor -> . number
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . NULL
    (50) valor -> . NOT valor
    (73) number -> . INTV
    (74) number -> . FLOATV

    RPAREN          shift and go to state 54
    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    args                           shift and go to state 53
    expresion                      shift and go to state 55
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 27

    (28) llamada -> ID . . ID LPAREN args RPAREN
    (29) llamada -> ID . . ID LPAREN RPAREN

    ID              shift and go to state 56


state 28

    (54) asignacion -> declarador ID . ASSIGN expresion
    (55) declaracion -> declarador ID .

    ASSIGN          shift and go to state 57
    FUNCTION        reduce using rule 55 (declaracion -> declarador ID .)
    ID              reduce using rule 55 (declaracion -> declarador ID .)
    IF              reduce using rule 55 (declaracion -> declarador ID .)
    ELSE            reduce using rule 55 (declaracion -> declarador ID .)
    PRINTLN         reduce using rule 55 (declaracion -> declarador ID .)
    VAR             reduce using rule 55 (declaracion -> declarador ID .)
    VAL             reduce using rule 55 (declaracion -> declarador ID .)
    WHILE           reduce using rule 55 (declaracion -> declarador ID .)
    FOR             reduce using rule 55 (declaracion -> declarador ID .)
    $end            reduce using rule 55 (declaracion -> declarador ID .)
    RCBRACKET       reduce using rule 55 (declaracion -> declarador ID .)
    RETURN          reduce using rule 55 (declaracion -> declarador ID .)


state 29

    (17) estructuraControl -> IF LPAREN . expresion RPAREN instrucciones
    (56) expresion -> . LPAREN expresion RPAREN
    (57) expresion -> . valor
    (58) expresion -> . expresion operadoresMat expresion
    (59) expresion -> . expresion operadoresLog expresion
    (44) valor -> . ID
    (45) valor -> . number
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . NULL
    (50) valor -> . NOT valor
    (73) number -> . INTV
    (74) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 58
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 30

    (18) estructuraControl -> ELSE instrucciones .

    FUNCTION        reduce using rule 18 (estructuraControl -> ELSE instrucciones .)
    ID              reduce using rule 18 (estructuraControl -> ELSE instrucciones .)
    IF              reduce using rule 18 (estructuraControl -> ELSE instrucciones .)
    ELSE            reduce using rule 18 (estructuraControl -> ELSE instrucciones .)
    PRINTLN         reduce using rule 18 (estructuraControl -> ELSE instrucciones .)
    VAR             reduce using rule 18 (estructuraControl -> ELSE instrucciones .)
    VAL             reduce using rule 18 (estructuraControl -> ELSE instrucciones .)
    WHILE           reduce using rule 18 (estructuraControl -> ELSE instrucciones .)
    FOR             reduce using rule 18 (estructuraControl -> ELSE instrucciones .)
    $end            reduce using rule 18 (estructuraControl -> ELSE instrucciones .)
    RCBRACKET       reduce using rule 18 (estructuraControl -> ELSE instrucciones .)
    RETURN          reduce using rule 18 (estructuraControl -> ELSE instrucciones .)


state 31

    (10) instrucciones -> LCBRACKET . cuerpo RCBRACKET
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . function
    (3) cuerpo -> . sentencia cuerpo
    (4) cuerpo -> . function cuerpo
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (23) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (24) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (30) function -> . ID LSBRACKET expresion RSBRACKET
    (53) asignacion -> . ID ASSIGN expresion
    (54) asignacion -> . declarador ID ASSIGN expresion
    (17) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (18) estructuraControl -> . ELSE instrucciones
    (19) bucles -> . while instrucciones
    (20) bucles -> . for instrucciones
    (25) llamada -> . PRINTLN LPAREN expresion RPAREN
    (26) llamada -> . ID LPAREN args RPAREN
    (27) llamada -> . ID LPAREN RPAREN
    (28) llamada -> . ID . ID LPAREN args RPAREN
    (29) llamada -> . ID . ID LPAREN RPAREN
    (55) declaracion -> . declarador ID
    (51) declarador -> . VAR
    (52) declarador -> . VAL
    (21) while -> . WHILE LPAREN expresion RPAREN
    (22) for -> . FOR LPAREN ID IN ID RPAREN

    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    cuerpo                         shift and go to state 59
    sentencia                      shift and go to state 2
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 32

    (11) instrucciones -> sentencia .

    FUNCTION        reduce using rule 11 (instrucciones -> sentencia .)
    ID              reduce using rule 11 (instrucciones -> sentencia .)
    IF              reduce using rule 11 (instrucciones -> sentencia .)
    ELSE            reduce using rule 11 (instrucciones -> sentencia .)
    PRINTLN         reduce using rule 11 (instrucciones -> sentencia .)
    VAR             reduce using rule 11 (instrucciones -> sentencia .)
    VAL             reduce using rule 11 (instrucciones -> sentencia .)
    WHILE           reduce using rule 11 (instrucciones -> sentencia .)
    FOR             reduce using rule 11 (instrucciones -> sentencia .)
    $end            reduce using rule 11 (instrucciones -> sentencia .)
    RCBRACKET       reduce using rule 11 (instrucciones -> sentencia .)
    RETURN          reduce using rule 11 (instrucciones -> sentencia .)


state 33

    (53) asignacion -> ID . ASSIGN expresion
    (26) llamada -> ID . LPAREN args RPAREN
    (27) llamada -> ID . LPAREN RPAREN
    (28) llamada -> ID . . ID LPAREN args RPAREN
    (29) llamada -> ID . . ID LPAREN RPAREN

    ASSIGN          shift and go to state 25
    LPAREN          shift and go to state 26
    .               shift and go to state 27


state 34

    (19) bucles -> while instrucciones .

    FUNCTION        reduce using rule 19 (bucles -> while instrucciones .)
    ID              reduce using rule 19 (bucles -> while instrucciones .)
    IF              reduce using rule 19 (bucles -> while instrucciones .)
    ELSE            reduce using rule 19 (bucles -> while instrucciones .)
    PRINTLN         reduce using rule 19 (bucles -> while instrucciones .)
    VAR             reduce using rule 19 (bucles -> while instrucciones .)
    VAL             reduce using rule 19 (bucles -> while instrucciones .)
    WHILE           reduce using rule 19 (bucles -> while instrucciones .)
    FOR             reduce using rule 19 (bucles -> while instrucciones .)
    $end            reduce using rule 19 (bucles -> while instrucciones .)
    RCBRACKET       reduce using rule 19 (bucles -> while instrucciones .)
    RETURN          reduce using rule 19 (bucles -> while instrucciones .)


state 35

    (20) bucles -> for instrucciones .

    FUNCTION        reduce using rule 20 (bucles -> for instrucciones .)
    ID              reduce using rule 20 (bucles -> for instrucciones .)
    IF              reduce using rule 20 (bucles -> for instrucciones .)
    ELSE            reduce using rule 20 (bucles -> for instrucciones .)
    PRINTLN         reduce using rule 20 (bucles -> for instrucciones .)
    VAR             reduce using rule 20 (bucles -> for instrucciones .)
    VAL             reduce using rule 20 (bucles -> for instrucciones .)
    WHILE           reduce using rule 20 (bucles -> for instrucciones .)
    FOR             reduce using rule 20 (bucles -> for instrucciones .)
    $end            reduce using rule 20 (bucles -> for instrucciones .)
    RCBRACKET       reduce using rule 20 (bucles -> for instrucciones .)
    RETURN          reduce using rule 20 (bucles -> for instrucciones .)


state 36

    (25) llamada -> PRINTLN LPAREN . expresion RPAREN
    (56) expresion -> . LPAREN expresion RPAREN
    (57) expresion -> . valor
    (58) expresion -> . expresion operadoresMat expresion
    (59) expresion -> . expresion operadoresLog expresion
    (44) valor -> . ID
    (45) valor -> . number
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . NULL
    (50) valor -> . NOT valor
    (73) number -> . INTV
    (74) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 60
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 37

    (21) while -> WHILE LPAREN . expresion RPAREN
    (56) expresion -> . LPAREN expresion RPAREN
    (57) expresion -> . valor
    (58) expresion -> . expresion operadoresMat expresion
    (59) expresion -> . expresion operadoresLog expresion
    (44) valor -> . ID
    (45) valor -> . number
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . NULL
    (50) valor -> . NOT valor
    (73) number -> . INTV
    (74) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 61
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 38

    (22) for -> FOR LPAREN . ID IN ID RPAREN

    ID              shift and go to state 62


state 39

    (23) function -> FUNCTION ID LPAREN . params RPAREN instruccionesF
    (24) function -> FUNCTION ID LPAREN . RPAREN instruccionesF
    (40) params -> . ID : dato
    (41) params -> . params , params

    RPAREN          shift and go to state 65
    ID              shift and go to state 63

    params                         shift and go to state 64

state 40

    (44) valor -> ID .

    RSBRACKET       reduce using rule 44 (valor -> ID .)
    MINUS           reduce using rule 44 (valor -> ID .)
    PLUS            reduce using rule 44 (valor -> ID .)
    TIMES           reduce using rule 44 (valor -> ID .)
    DIVIDE          reduce using rule 44 (valor -> ID .)
    MODULE          reduce using rule 44 (valor -> ID .)
    OR              reduce using rule 44 (valor -> ID .)
    AND             reduce using rule 44 (valor -> ID .)
    EQUALS          reduce using rule 44 (valor -> ID .)
    NOTEQUALS       reduce using rule 44 (valor -> ID .)
    GREATER         reduce using rule 44 (valor -> ID .)
    LOWER           reduce using rule 44 (valor -> ID .)
    FUNCTION        reduce using rule 44 (valor -> ID .)
    ID              reduce using rule 44 (valor -> ID .)
    IF              reduce using rule 44 (valor -> ID .)
    ELSE            reduce using rule 44 (valor -> ID .)
    PRINTLN         reduce using rule 44 (valor -> ID .)
    VAR             reduce using rule 44 (valor -> ID .)
    VAL             reduce using rule 44 (valor -> ID .)
    WHILE           reduce using rule 44 (valor -> ID .)
    FOR             reduce using rule 44 (valor -> ID .)
    $end            reduce using rule 44 (valor -> ID .)
    RCBRACKET       reduce using rule 44 (valor -> ID .)
    RETURN          reduce using rule 44 (valor -> ID .)
    RPAREN          reduce using rule 44 (valor -> ID .)
    ,               reduce using rule 44 (valor -> ID .)


state 41

    (30) function -> ID LSBRACKET expresion . RSBRACKET
    (58) expresion -> expresion . operadoresMat expresion
    (59) expresion -> expresion . operadoresLog expresion
    (68) operadoresMat -> . MINUS
    (69) operadoresMat -> . PLUS
    (70) operadoresMat -> . TIMES
    (71) operadoresMat -> . DIVIDE
    (72) operadoresMat -> . MODULE
    (60) operadoresLog -> . OR
    (61) operadoresLog -> . AND
    (62) operadoresLog -> . EQUALS
    (63) operadoresLog -> . NOTEQUALS
    (64) operadoresLog -> . GREATER
    (65) operadoresLog -> . LOWER
    (66) operadoresLog -> . GREATER ASSIGN
    (67) operadoresLog -> . LOWER ASSIGN

    RSBRACKET       shift and go to state 66
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 42

    (56) expresion -> LPAREN . expresion RPAREN
    (56) expresion -> . LPAREN expresion RPAREN
    (57) expresion -> . valor
    (58) expresion -> . expresion operadoresMat expresion
    (59) expresion -> . expresion operadoresLog expresion
    (44) valor -> . ID
    (45) valor -> . number
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . NULL
    (50) valor -> . NOT valor
    (73) number -> . INTV
    (74) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 80
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 43

    (57) expresion -> valor .

    RSBRACKET       reduce using rule 57 (expresion -> valor .)
    MINUS           reduce using rule 57 (expresion -> valor .)
    PLUS            reduce using rule 57 (expresion -> valor .)
    TIMES           reduce using rule 57 (expresion -> valor .)
    DIVIDE          reduce using rule 57 (expresion -> valor .)
    MODULE          reduce using rule 57 (expresion -> valor .)
    OR              reduce using rule 57 (expresion -> valor .)
    AND             reduce using rule 57 (expresion -> valor .)
    EQUALS          reduce using rule 57 (expresion -> valor .)
    NOTEQUALS       reduce using rule 57 (expresion -> valor .)
    GREATER         reduce using rule 57 (expresion -> valor .)
    LOWER           reduce using rule 57 (expresion -> valor .)
    FUNCTION        reduce using rule 57 (expresion -> valor .)
    ID              reduce using rule 57 (expresion -> valor .)
    IF              reduce using rule 57 (expresion -> valor .)
    ELSE            reduce using rule 57 (expresion -> valor .)
    PRINTLN         reduce using rule 57 (expresion -> valor .)
    VAR             reduce using rule 57 (expresion -> valor .)
    VAL             reduce using rule 57 (expresion -> valor .)
    WHILE           reduce using rule 57 (expresion -> valor .)
    FOR             reduce using rule 57 (expresion -> valor .)
    $end            reduce using rule 57 (expresion -> valor .)
    RCBRACKET       reduce using rule 57 (expresion -> valor .)
    RETURN          reduce using rule 57 (expresion -> valor .)
    RPAREN          reduce using rule 57 (expresion -> valor .)
    ,               reduce using rule 57 (expresion -> valor .)


state 44

    (45) valor -> number .

    RSBRACKET       reduce using rule 45 (valor -> number .)
    MINUS           reduce using rule 45 (valor -> number .)
    PLUS            reduce using rule 45 (valor -> number .)
    TIMES           reduce using rule 45 (valor -> number .)
    DIVIDE          reduce using rule 45 (valor -> number .)
    MODULE          reduce using rule 45 (valor -> number .)
    OR              reduce using rule 45 (valor -> number .)
    AND             reduce using rule 45 (valor -> number .)
    EQUALS          reduce using rule 45 (valor -> number .)
    NOTEQUALS       reduce using rule 45 (valor -> number .)
    GREATER         reduce using rule 45 (valor -> number .)
    LOWER           reduce using rule 45 (valor -> number .)
    FUNCTION        reduce using rule 45 (valor -> number .)
    ID              reduce using rule 45 (valor -> number .)
    IF              reduce using rule 45 (valor -> number .)
    ELSE            reduce using rule 45 (valor -> number .)
    PRINTLN         reduce using rule 45 (valor -> number .)
    VAR             reduce using rule 45 (valor -> number .)
    VAL             reduce using rule 45 (valor -> number .)
    WHILE           reduce using rule 45 (valor -> number .)
    FOR             reduce using rule 45 (valor -> number .)
    $end            reduce using rule 45 (valor -> number .)
    RCBRACKET       reduce using rule 45 (valor -> number .)
    RETURN          reduce using rule 45 (valor -> number .)
    RPAREN          reduce using rule 45 (valor -> number .)
    ,               reduce using rule 45 (valor -> number .)


state 45

    (46) valor -> STRING .

    RSBRACKET       reduce using rule 46 (valor -> STRING .)
    MINUS           reduce using rule 46 (valor -> STRING .)
    PLUS            reduce using rule 46 (valor -> STRING .)
    TIMES           reduce using rule 46 (valor -> STRING .)
    DIVIDE          reduce using rule 46 (valor -> STRING .)
    MODULE          reduce using rule 46 (valor -> STRING .)
    OR              reduce using rule 46 (valor -> STRING .)
    AND             reduce using rule 46 (valor -> STRING .)
    EQUALS          reduce using rule 46 (valor -> STRING .)
    NOTEQUALS       reduce using rule 46 (valor -> STRING .)
    GREATER         reduce using rule 46 (valor -> STRING .)
    LOWER           reduce using rule 46 (valor -> STRING .)
    FUNCTION        reduce using rule 46 (valor -> STRING .)
    ID              reduce using rule 46 (valor -> STRING .)
    IF              reduce using rule 46 (valor -> STRING .)
    ELSE            reduce using rule 46 (valor -> STRING .)
    PRINTLN         reduce using rule 46 (valor -> STRING .)
    VAR             reduce using rule 46 (valor -> STRING .)
    VAL             reduce using rule 46 (valor -> STRING .)
    WHILE           reduce using rule 46 (valor -> STRING .)
    FOR             reduce using rule 46 (valor -> STRING .)
    $end            reduce using rule 46 (valor -> STRING .)
    RCBRACKET       reduce using rule 46 (valor -> STRING .)
    RETURN          reduce using rule 46 (valor -> STRING .)
    RPAREN          reduce using rule 46 (valor -> STRING .)
    ,               reduce using rule 46 (valor -> STRING .)


state 46

    (47) valor -> TRUE .

    RSBRACKET       reduce using rule 47 (valor -> TRUE .)
    MINUS           reduce using rule 47 (valor -> TRUE .)
    PLUS            reduce using rule 47 (valor -> TRUE .)
    TIMES           reduce using rule 47 (valor -> TRUE .)
    DIVIDE          reduce using rule 47 (valor -> TRUE .)
    MODULE          reduce using rule 47 (valor -> TRUE .)
    OR              reduce using rule 47 (valor -> TRUE .)
    AND             reduce using rule 47 (valor -> TRUE .)
    EQUALS          reduce using rule 47 (valor -> TRUE .)
    NOTEQUALS       reduce using rule 47 (valor -> TRUE .)
    GREATER         reduce using rule 47 (valor -> TRUE .)
    LOWER           reduce using rule 47 (valor -> TRUE .)
    FUNCTION        reduce using rule 47 (valor -> TRUE .)
    ID              reduce using rule 47 (valor -> TRUE .)
    IF              reduce using rule 47 (valor -> TRUE .)
    ELSE            reduce using rule 47 (valor -> TRUE .)
    PRINTLN         reduce using rule 47 (valor -> TRUE .)
    VAR             reduce using rule 47 (valor -> TRUE .)
    VAL             reduce using rule 47 (valor -> TRUE .)
    WHILE           reduce using rule 47 (valor -> TRUE .)
    FOR             reduce using rule 47 (valor -> TRUE .)
    $end            reduce using rule 47 (valor -> TRUE .)
    RCBRACKET       reduce using rule 47 (valor -> TRUE .)
    RETURN          reduce using rule 47 (valor -> TRUE .)
    RPAREN          reduce using rule 47 (valor -> TRUE .)
    ,               reduce using rule 47 (valor -> TRUE .)


state 47

    (48) valor -> FALSE .

    RSBRACKET       reduce using rule 48 (valor -> FALSE .)
    MINUS           reduce using rule 48 (valor -> FALSE .)
    PLUS            reduce using rule 48 (valor -> FALSE .)
    TIMES           reduce using rule 48 (valor -> FALSE .)
    DIVIDE          reduce using rule 48 (valor -> FALSE .)
    MODULE          reduce using rule 48 (valor -> FALSE .)
    OR              reduce using rule 48 (valor -> FALSE .)
    AND             reduce using rule 48 (valor -> FALSE .)
    EQUALS          reduce using rule 48 (valor -> FALSE .)
    NOTEQUALS       reduce using rule 48 (valor -> FALSE .)
    GREATER         reduce using rule 48 (valor -> FALSE .)
    LOWER           reduce using rule 48 (valor -> FALSE .)
    FUNCTION        reduce using rule 48 (valor -> FALSE .)
    ID              reduce using rule 48 (valor -> FALSE .)
    IF              reduce using rule 48 (valor -> FALSE .)
    ELSE            reduce using rule 48 (valor -> FALSE .)
    PRINTLN         reduce using rule 48 (valor -> FALSE .)
    VAR             reduce using rule 48 (valor -> FALSE .)
    VAL             reduce using rule 48 (valor -> FALSE .)
    WHILE           reduce using rule 48 (valor -> FALSE .)
    FOR             reduce using rule 48 (valor -> FALSE .)
    $end            reduce using rule 48 (valor -> FALSE .)
    RCBRACKET       reduce using rule 48 (valor -> FALSE .)
    RETURN          reduce using rule 48 (valor -> FALSE .)
    RPAREN          reduce using rule 48 (valor -> FALSE .)
    ,               reduce using rule 48 (valor -> FALSE .)


state 48

    (49) valor -> NULL .

    RSBRACKET       reduce using rule 49 (valor -> NULL .)
    MINUS           reduce using rule 49 (valor -> NULL .)
    PLUS            reduce using rule 49 (valor -> NULL .)
    TIMES           reduce using rule 49 (valor -> NULL .)
    DIVIDE          reduce using rule 49 (valor -> NULL .)
    MODULE          reduce using rule 49 (valor -> NULL .)
    OR              reduce using rule 49 (valor -> NULL .)
    AND             reduce using rule 49 (valor -> NULL .)
    EQUALS          reduce using rule 49 (valor -> NULL .)
    NOTEQUALS       reduce using rule 49 (valor -> NULL .)
    GREATER         reduce using rule 49 (valor -> NULL .)
    LOWER           reduce using rule 49 (valor -> NULL .)
    FUNCTION        reduce using rule 49 (valor -> NULL .)
    ID              reduce using rule 49 (valor -> NULL .)
    IF              reduce using rule 49 (valor -> NULL .)
    ELSE            reduce using rule 49 (valor -> NULL .)
    PRINTLN         reduce using rule 49 (valor -> NULL .)
    VAR             reduce using rule 49 (valor -> NULL .)
    VAL             reduce using rule 49 (valor -> NULL .)
    WHILE           reduce using rule 49 (valor -> NULL .)
    FOR             reduce using rule 49 (valor -> NULL .)
    $end            reduce using rule 49 (valor -> NULL .)
    RCBRACKET       reduce using rule 49 (valor -> NULL .)
    RETURN          reduce using rule 49 (valor -> NULL .)
    RPAREN          reduce using rule 49 (valor -> NULL .)
    ,               reduce using rule 49 (valor -> NULL .)


state 49

    (50) valor -> NOT . valor
    (44) valor -> . ID
    (45) valor -> . number
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . NULL
    (50) valor -> . NOT valor
    (73) number -> . INTV
    (74) number -> . FLOATV

    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    valor                          shift and go to state 81
    number                         shift and go to state 44

state 50

    (73) number -> INTV .

    RSBRACKET       reduce using rule 73 (number -> INTV .)
    MINUS           reduce using rule 73 (number -> INTV .)
    PLUS            reduce using rule 73 (number -> INTV .)
    TIMES           reduce using rule 73 (number -> INTV .)
    DIVIDE          reduce using rule 73 (number -> INTV .)
    MODULE          reduce using rule 73 (number -> INTV .)
    OR              reduce using rule 73 (number -> INTV .)
    AND             reduce using rule 73 (number -> INTV .)
    EQUALS          reduce using rule 73 (number -> INTV .)
    NOTEQUALS       reduce using rule 73 (number -> INTV .)
    GREATER         reduce using rule 73 (number -> INTV .)
    LOWER           reduce using rule 73 (number -> INTV .)
    FUNCTION        reduce using rule 73 (number -> INTV .)
    ID              reduce using rule 73 (number -> INTV .)
    IF              reduce using rule 73 (number -> INTV .)
    ELSE            reduce using rule 73 (number -> INTV .)
    PRINTLN         reduce using rule 73 (number -> INTV .)
    VAR             reduce using rule 73 (number -> INTV .)
    VAL             reduce using rule 73 (number -> INTV .)
    WHILE           reduce using rule 73 (number -> INTV .)
    FOR             reduce using rule 73 (number -> INTV .)
    $end            reduce using rule 73 (number -> INTV .)
    RCBRACKET       reduce using rule 73 (number -> INTV .)
    RETURN          reduce using rule 73 (number -> INTV .)
    RPAREN          reduce using rule 73 (number -> INTV .)
    ,               reduce using rule 73 (number -> INTV .)


state 51

    (74) number -> FLOATV .

    RSBRACKET       reduce using rule 74 (number -> FLOATV .)
    MINUS           reduce using rule 74 (number -> FLOATV .)
    PLUS            reduce using rule 74 (number -> FLOATV .)
    TIMES           reduce using rule 74 (number -> FLOATV .)
    DIVIDE          reduce using rule 74 (number -> FLOATV .)
    MODULE          reduce using rule 74 (number -> FLOATV .)
    OR              reduce using rule 74 (number -> FLOATV .)
    AND             reduce using rule 74 (number -> FLOATV .)
    EQUALS          reduce using rule 74 (number -> FLOATV .)
    NOTEQUALS       reduce using rule 74 (number -> FLOATV .)
    GREATER         reduce using rule 74 (number -> FLOATV .)
    LOWER           reduce using rule 74 (number -> FLOATV .)
    FUNCTION        reduce using rule 74 (number -> FLOATV .)
    ID              reduce using rule 74 (number -> FLOATV .)
    IF              reduce using rule 74 (number -> FLOATV .)
    ELSE            reduce using rule 74 (number -> FLOATV .)
    PRINTLN         reduce using rule 74 (number -> FLOATV .)
    VAR             reduce using rule 74 (number -> FLOATV .)
    VAL             reduce using rule 74 (number -> FLOATV .)
    WHILE           reduce using rule 74 (number -> FLOATV .)
    FOR             reduce using rule 74 (number -> FLOATV .)
    $end            reduce using rule 74 (number -> FLOATV .)
    RCBRACKET       reduce using rule 74 (number -> FLOATV .)
    RETURN          reduce using rule 74 (number -> FLOATV .)
    RPAREN          reduce using rule 74 (number -> FLOATV .)
    ,               reduce using rule 74 (number -> FLOATV .)


state 52

    (53) asignacion -> ID ASSIGN expresion .
    (58) expresion -> expresion . operadoresMat expresion
    (59) expresion -> expresion . operadoresLog expresion
    (68) operadoresMat -> . MINUS
    (69) operadoresMat -> . PLUS
    (70) operadoresMat -> . TIMES
    (71) operadoresMat -> . DIVIDE
    (72) operadoresMat -> . MODULE
    (60) operadoresLog -> . OR
    (61) operadoresLog -> . AND
    (62) operadoresLog -> . EQUALS
    (63) operadoresLog -> . NOTEQUALS
    (64) operadoresLog -> . GREATER
    (65) operadoresLog -> . LOWER
    (66) operadoresLog -> . GREATER ASSIGN
    (67) operadoresLog -> . LOWER ASSIGN

    FUNCTION        reduce using rule 53 (asignacion -> ID ASSIGN expresion .)
    ID              reduce using rule 53 (asignacion -> ID ASSIGN expresion .)
    IF              reduce using rule 53 (asignacion -> ID ASSIGN expresion .)
    ELSE            reduce using rule 53 (asignacion -> ID ASSIGN expresion .)
    PRINTLN         reduce using rule 53 (asignacion -> ID ASSIGN expresion .)
    VAR             reduce using rule 53 (asignacion -> ID ASSIGN expresion .)
    VAL             reduce using rule 53 (asignacion -> ID ASSIGN expresion .)
    WHILE           reduce using rule 53 (asignacion -> ID ASSIGN expresion .)
    FOR             reduce using rule 53 (asignacion -> ID ASSIGN expresion .)
    $end            reduce using rule 53 (asignacion -> ID ASSIGN expresion .)
    RCBRACKET       reduce using rule 53 (asignacion -> ID ASSIGN expresion .)
    RETURN          reduce using rule 53 (asignacion -> ID ASSIGN expresion .)
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 53

    (26) llamada -> ID LPAREN args . RPAREN
    (43) args -> args . , args

    RPAREN          shift and go to state 82
    ,               shift and go to state 83


state 54

    (27) llamada -> ID LPAREN RPAREN .

    FUNCTION        reduce using rule 27 (llamada -> ID LPAREN RPAREN .)
    ID              reduce using rule 27 (llamada -> ID LPAREN RPAREN .)
    IF              reduce using rule 27 (llamada -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 27 (llamada -> ID LPAREN RPAREN .)
    PRINTLN         reduce using rule 27 (llamada -> ID LPAREN RPAREN .)
    VAR             reduce using rule 27 (llamada -> ID LPAREN RPAREN .)
    VAL             reduce using rule 27 (llamada -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 27 (llamada -> ID LPAREN RPAREN .)
    FOR             reduce using rule 27 (llamada -> ID LPAREN RPAREN .)
    $end            reduce using rule 27 (llamada -> ID LPAREN RPAREN .)
    RCBRACKET       reduce using rule 27 (llamada -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 27 (llamada -> ID LPAREN RPAREN .)


state 55

    (42) args -> expresion .
    (58) expresion -> expresion . operadoresMat expresion
    (59) expresion -> expresion . operadoresLog expresion
    (68) operadoresMat -> . MINUS
    (69) operadoresMat -> . PLUS
    (70) operadoresMat -> . TIMES
    (71) operadoresMat -> . DIVIDE
    (72) operadoresMat -> . MODULE
    (60) operadoresLog -> . OR
    (61) operadoresLog -> . AND
    (62) operadoresLog -> . EQUALS
    (63) operadoresLog -> . NOTEQUALS
    (64) operadoresLog -> . GREATER
    (65) operadoresLog -> . LOWER
    (66) operadoresLog -> . GREATER ASSIGN
    (67) operadoresLog -> . LOWER ASSIGN

    RPAREN          reduce using rule 42 (args -> expresion .)
    ,               reduce using rule 42 (args -> expresion .)
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 56

    (28) llamada -> ID . ID . LPAREN args RPAREN
    (29) llamada -> ID . ID . LPAREN RPAREN

    LPAREN          shift and go to state 84


state 57

    (54) asignacion -> declarador ID ASSIGN . expresion
    (56) expresion -> . LPAREN expresion RPAREN
    (57) expresion -> . valor
    (58) expresion -> . expresion operadoresMat expresion
    (59) expresion -> . expresion operadoresLog expresion
    (44) valor -> . ID
    (45) valor -> . number
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . NULL
    (50) valor -> . NOT valor
    (73) number -> . INTV
    (74) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 85
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 58

    (17) estructuraControl -> IF LPAREN expresion . RPAREN instrucciones
    (58) expresion -> expresion . operadoresMat expresion
    (59) expresion -> expresion . operadoresLog expresion
    (68) operadoresMat -> . MINUS
    (69) operadoresMat -> . PLUS
    (70) operadoresMat -> . TIMES
    (71) operadoresMat -> . DIVIDE
    (72) operadoresMat -> . MODULE
    (60) operadoresLog -> . OR
    (61) operadoresLog -> . AND
    (62) operadoresLog -> . EQUALS
    (63) operadoresLog -> . NOTEQUALS
    (64) operadoresLog -> . GREATER
    (65) operadoresLog -> . LOWER
    (66) operadoresLog -> . GREATER ASSIGN
    (67) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 86
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 59

    (10) instrucciones -> LCBRACKET cuerpo . RCBRACKET

    RCBRACKET       shift and go to state 87


state 60

    (25) llamada -> PRINTLN LPAREN expresion . RPAREN
    (58) expresion -> expresion . operadoresMat expresion
    (59) expresion -> expresion . operadoresLog expresion
    (68) operadoresMat -> . MINUS
    (69) operadoresMat -> . PLUS
    (70) operadoresMat -> . TIMES
    (71) operadoresMat -> . DIVIDE
    (72) operadoresMat -> . MODULE
    (60) operadoresLog -> . OR
    (61) operadoresLog -> . AND
    (62) operadoresLog -> . EQUALS
    (63) operadoresLog -> . NOTEQUALS
    (64) operadoresLog -> . GREATER
    (65) operadoresLog -> . LOWER
    (66) operadoresLog -> . GREATER ASSIGN
    (67) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 88
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 61

    (21) while -> WHILE LPAREN expresion . RPAREN
    (58) expresion -> expresion . operadoresMat expresion
    (59) expresion -> expresion . operadoresLog expresion
    (68) operadoresMat -> . MINUS
    (69) operadoresMat -> . PLUS
    (70) operadoresMat -> . TIMES
    (71) operadoresMat -> . DIVIDE
    (72) operadoresMat -> . MODULE
    (60) operadoresLog -> . OR
    (61) operadoresLog -> . AND
    (62) operadoresLog -> . EQUALS
    (63) operadoresLog -> . NOTEQUALS
    (64) operadoresLog -> . GREATER
    (65) operadoresLog -> . LOWER
    (66) operadoresLog -> . GREATER ASSIGN
    (67) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 89
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 62

    (22) for -> FOR LPAREN ID . IN ID RPAREN

    IN              shift and go to state 90


state 63

    (40) params -> ID . : dato

    :               shift and go to state 91


state 64

    (23) function -> FUNCTION ID LPAREN params . RPAREN instruccionesF
    (41) params -> params . , params

    RPAREN          shift and go to state 92
    ,               shift and go to state 93


state 65

    (24) function -> FUNCTION ID LPAREN RPAREN . instruccionesF
    (12) instruccionesF -> . LCBRACKET cuerpo retorno RCBRACKET
    (13) instruccionesF -> . LCBRACKET retorno RCBRACKET
    (14) instruccionesF -> . : dato LCBRACKET cuerpo retorno RCBRACKET
    (15) instruccionesF -> . : dato LCBRACKET retorno RCBRACKET

    LCBRACKET       shift and go to state 95
    :               shift and go to state 96

    instruccionesF                 shift and go to state 94

state 66

    (30) function -> ID LSBRACKET expresion RSBRACKET .

    FUNCTION        reduce using rule 30 (function -> ID LSBRACKET expresion RSBRACKET .)
    ID              reduce using rule 30 (function -> ID LSBRACKET expresion RSBRACKET .)
    IF              reduce using rule 30 (function -> ID LSBRACKET expresion RSBRACKET .)
    ELSE            reduce using rule 30 (function -> ID LSBRACKET expresion RSBRACKET .)
    PRINTLN         reduce using rule 30 (function -> ID LSBRACKET expresion RSBRACKET .)
    VAR             reduce using rule 30 (function -> ID LSBRACKET expresion RSBRACKET .)
    VAL             reduce using rule 30 (function -> ID LSBRACKET expresion RSBRACKET .)
    WHILE           reduce using rule 30 (function -> ID LSBRACKET expresion RSBRACKET .)
    FOR             reduce using rule 30 (function -> ID LSBRACKET expresion RSBRACKET .)
    $end            reduce using rule 30 (function -> ID LSBRACKET expresion RSBRACKET .)
    RCBRACKET       reduce using rule 30 (function -> ID LSBRACKET expresion RSBRACKET .)
    RETURN          reduce using rule 30 (function -> ID LSBRACKET expresion RSBRACKET .)


state 67

    (58) expresion -> expresion operadoresMat . expresion
    (56) expresion -> . LPAREN expresion RPAREN
    (57) expresion -> . valor
    (58) expresion -> . expresion operadoresMat expresion
    (59) expresion -> . expresion operadoresLog expresion
    (44) valor -> . ID
    (45) valor -> . number
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . NULL
    (50) valor -> . NOT valor
    (73) number -> . INTV
    (74) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 97
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 68

    (59) expresion -> expresion operadoresLog . expresion
    (56) expresion -> . LPAREN expresion RPAREN
    (57) expresion -> . valor
    (58) expresion -> . expresion operadoresMat expresion
    (59) expresion -> . expresion operadoresLog expresion
    (44) valor -> . ID
    (45) valor -> . number
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . NULL
    (50) valor -> . NOT valor
    (73) number -> . INTV
    (74) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 98
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 69

    (68) operadoresMat -> MINUS .

    LPAREN          reduce using rule 68 (operadoresMat -> MINUS .)
    ID              reduce using rule 68 (operadoresMat -> MINUS .)
    STRING          reduce using rule 68 (operadoresMat -> MINUS .)
    TRUE            reduce using rule 68 (operadoresMat -> MINUS .)
    FALSE           reduce using rule 68 (operadoresMat -> MINUS .)
    NULL            reduce using rule 68 (operadoresMat -> MINUS .)
    NOT             reduce using rule 68 (operadoresMat -> MINUS .)
    INTV            reduce using rule 68 (operadoresMat -> MINUS .)
    FLOATV          reduce using rule 68 (operadoresMat -> MINUS .)


state 70

    (69) operadoresMat -> PLUS .

    LPAREN          reduce using rule 69 (operadoresMat -> PLUS .)
    ID              reduce using rule 69 (operadoresMat -> PLUS .)
    STRING          reduce using rule 69 (operadoresMat -> PLUS .)
    TRUE            reduce using rule 69 (operadoresMat -> PLUS .)
    FALSE           reduce using rule 69 (operadoresMat -> PLUS .)
    NULL            reduce using rule 69 (operadoresMat -> PLUS .)
    NOT             reduce using rule 69 (operadoresMat -> PLUS .)
    INTV            reduce using rule 69 (operadoresMat -> PLUS .)
    FLOATV          reduce using rule 69 (operadoresMat -> PLUS .)


state 71

    (70) operadoresMat -> TIMES .

    LPAREN          reduce using rule 70 (operadoresMat -> TIMES .)
    ID              reduce using rule 70 (operadoresMat -> TIMES .)
    STRING          reduce using rule 70 (operadoresMat -> TIMES .)
    TRUE            reduce using rule 70 (operadoresMat -> TIMES .)
    FALSE           reduce using rule 70 (operadoresMat -> TIMES .)
    NULL            reduce using rule 70 (operadoresMat -> TIMES .)
    NOT             reduce using rule 70 (operadoresMat -> TIMES .)
    INTV            reduce using rule 70 (operadoresMat -> TIMES .)
    FLOATV          reduce using rule 70 (operadoresMat -> TIMES .)


state 72

    (71) operadoresMat -> DIVIDE .

    LPAREN          reduce using rule 71 (operadoresMat -> DIVIDE .)
    ID              reduce using rule 71 (operadoresMat -> DIVIDE .)
    STRING          reduce using rule 71 (operadoresMat -> DIVIDE .)
    TRUE            reduce using rule 71 (operadoresMat -> DIVIDE .)
    FALSE           reduce using rule 71 (operadoresMat -> DIVIDE .)
    NULL            reduce using rule 71 (operadoresMat -> DIVIDE .)
    NOT             reduce using rule 71 (operadoresMat -> DIVIDE .)
    INTV            reduce using rule 71 (operadoresMat -> DIVIDE .)
    FLOATV          reduce using rule 71 (operadoresMat -> DIVIDE .)


state 73

    (72) operadoresMat -> MODULE .

    LPAREN          reduce using rule 72 (operadoresMat -> MODULE .)
    ID              reduce using rule 72 (operadoresMat -> MODULE .)
    STRING          reduce using rule 72 (operadoresMat -> MODULE .)
    TRUE            reduce using rule 72 (operadoresMat -> MODULE .)
    FALSE           reduce using rule 72 (operadoresMat -> MODULE .)
    NULL            reduce using rule 72 (operadoresMat -> MODULE .)
    NOT             reduce using rule 72 (operadoresMat -> MODULE .)
    INTV            reduce using rule 72 (operadoresMat -> MODULE .)
    FLOATV          reduce using rule 72 (operadoresMat -> MODULE .)


state 74

    (60) operadoresLog -> OR .

    LPAREN          reduce using rule 60 (operadoresLog -> OR .)
    ID              reduce using rule 60 (operadoresLog -> OR .)
    STRING          reduce using rule 60 (operadoresLog -> OR .)
    TRUE            reduce using rule 60 (operadoresLog -> OR .)
    FALSE           reduce using rule 60 (operadoresLog -> OR .)
    NULL            reduce using rule 60 (operadoresLog -> OR .)
    NOT             reduce using rule 60 (operadoresLog -> OR .)
    INTV            reduce using rule 60 (operadoresLog -> OR .)
    FLOATV          reduce using rule 60 (operadoresLog -> OR .)


state 75

    (61) operadoresLog -> AND .

    LPAREN          reduce using rule 61 (operadoresLog -> AND .)
    ID              reduce using rule 61 (operadoresLog -> AND .)
    STRING          reduce using rule 61 (operadoresLog -> AND .)
    TRUE            reduce using rule 61 (operadoresLog -> AND .)
    FALSE           reduce using rule 61 (operadoresLog -> AND .)
    NULL            reduce using rule 61 (operadoresLog -> AND .)
    NOT             reduce using rule 61 (operadoresLog -> AND .)
    INTV            reduce using rule 61 (operadoresLog -> AND .)
    FLOATV          reduce using rule 61 (operadoresLog -> AND .)


state 76

    (62) operadoresLog -> EQUALS .

    LPAREN          reduce using rule 62 (operadoresLog -> EQUALS .)
    ID              reduce using rule 62 (operadoresLog -> EQUALS .)
    STRING          reduce using rule 62 (operadoresLog -> EQUALS .)
    TRUE            reduce using rule 62 (operadoresLog -> EQUALS .)
    FALSE           reduce using rule 62 (operadoresLog -> EQUALS .)
    NULL            reduce using rule 62 (operadoresLog -> EQUALS .)
    NOT             reduce using rule 62 (operadoresLog -> EQUALS .)
    INTV            reduce using rule 62 (operadoresLog -> EQUALS .)
    FLOATV          reduce using rule 62 (operadoresLog -> EQUALS .)


state 77

    (63) operadoresLog -> NOTEQUALS .

    LPAREN          reduce using rule 63 (operadoresLog -> NOTEQUALS .)
    ID              reduce using rule 63 (operadoresLog -> NOTEQUALS .)
    STRING          reduce using rule 63 (operadoresLog -> NOTEQUALS .)
    TRUE            reduce using rule 63 (operadoresLog -> NOTEQUALS .)
    FALSE           reduce using rule 63 (operadoresLog -> NOTEQUALS .)
    NULL            reduce using rule 63 (operadoresLog -> NOTEQUALS .)
    NOT             reduce using rule 63 (operadoresLog -> NOTEQUALS .)
    INTV            reduce using rule 63 (operadoresLog -> NOTEQUALS .)
    FLOATV          reduce using rule 63 (operadoresLog -> NOTEQUALS .)


state 78

    (64) operadoresLog -> GREATER .
    (66) operadoresLog -> GREATER . ASSIGN

    LPAREN          reduce using rule 64 (operadoresLog -> GREATER .)
    ID              reduce using rule 64 (operadoresLog -> GREATER .)
    STRING          reduce using rule 64 (operadoresLog -> GREATER .)
    TRUE            reduce using rule 64 (operadoresLog -> GREATER .)
    FALSE           reduce using rule 64 (operadoresLog -> GREATER .)
    NULL            reduce using rule 64 (operadoresLog -> GREATER .)
    NOT             reduce using rule 64 (operadoresLog -> GREATER .)
    INTV            reduce using rule 64 (operadoresLog -> GREATER .)
    FLOATV          reduce using rule 64 (operadoresLog -> GREATER .)
    ASSIGN          shift and go to state 99


state 79

    (65) operadoresLog -> LOWER .
    (67) operadoresLog -> LOWER . ASSIGN

    LPAREN          reduce using rule 65 (operadoresLog -> LOWER .)
    ID              reduce using rule 65 (operadoresLog -> LOWER .)
    STRING          reduce using rule 65 (operadoresLog -> LOWER .)
    TRUE            reduce using rule 65 (operadoresLog -> LOWER .)
    FALSE           reduce using rule 65 (operadoresLog -> LOWER .)
    NULL            reduce using rule 65 (operadoresLog -> LOWER .)
    NOT             reduce using rule 65 (operadoresLog -> LOWER .)
    INTV            reduce using rule 65 (operadoresLog -> LOWER .)
    FLOATV          reduce using rule 65 (operadoresLog -> LOWER .)
    ASSIGN          shift and go to state 100


state 80

    (56) expresion -> LPAREN expresion . RPAREN
    (58) expresion -> expresion . operadoresMat expresion
    (59) expresion -> expresion . operadoresLog expresion
    (68) operadoresMat -> . MINUS
    (69) operadoresMat -> . PLUS
    (70) operadoresMat -> . TIMES
    (71) operadoresMat -> . DIVIDE
    (72) operadoresMat -> . MODULE
    (60) operadoresLog -> . OR
    (61) operadoresLog -> . AND
    (62) operadoresLog -> . EQUALS
    (63) operadoresLog -> . NOTEQUALS
    (64) operadoresLog -> . GREATER
    (65) operadoresLog -> . LOWER
    (66) operadoresLog -> . GREATER ASSIGN
    (67) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 101
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 81

    (50) valor -> NOT valor .

    RSBRACKET       reduce using rule 50 (valor -> NOT valor .)
    MINUS           reduce using rule 50 (valor -> NOT valor .)
    PLUS            reduce using rule 50 (valor -> NOT valor .)
    TIMES           reduce using rule 50 (valor -> NOT valor .)
    DIVIDE          reduce using rule 50 (valor -> NOT valor .)
    MODULE          reduce using rule 50 (valor -> NOT valor .)
    OR              reduce using rule 50 (valor -> NOT valor .)
    AND             reduce using rule 50 (valor -> NOT valor .)
    EQUALS          reduce using rule 50 (valor -> NOT valor .)
    NOTEQUALS       reduce using rule 50 (valor -> NOT valor .)
    GREATER         reduce using rule 50 (valor -> NOT valor .)
    LOWER           reduce using rule 50 (valor -> NOT valor .)
    FUNCTION        reduce using rule 50 (valor -> NOT valor .)
    ID              reduce using rule 50 (valor -> NOT valor .)
    IF              reduce using rule 50 (valor -> NOT valor .)
    ELSE            reduce using rule 50 (valor -> NOT valor .)
    PRINTLN         reduce using rule 50 (valor -> NOT valor .)
    VAR             reduce using rule 50 (valor -> NOT valor .)
    VAL             reduce using rule 50 (valor -> NOT valor .)
    WHILE           reduce using rule 50 (valor -> NOT valor .)
    FOR             reduce using rule 50 (valor -> NOT valor .)
    $end            reduce using rule 50 (valor -> NOT valor .)
    RCBRACKET       reduce using rule 50 (valor -> NOT valor .)
    RETURN          reduce using rule 50 (valor -> NOT valor .)
    RPAREN          reduce using rule 50 (valor -> NOT valor .)
    ,               reduce using rule 50 (valor -> NOT valor .)


state 82

    (26) llamada -> ID LPAREN args RPAREN .

    FUNCTION        reduce using rule 26 (llamada -> ID LPAREN args RPAREN .)
    ID              reduce using rule 26 (llamada -> ID LPAREN args RPAREN .)
    IF              reduce using rule 26 (llamada -> ID LPAREN args RPAREN .)
    ELSE            reduce using rule 26 (llamada -> ID LPAREN args RPAREN .)
    PRINTLN         reduce using rule 26 (llamada -> ID LPAREN args RPAREN .)
    VAR             reduce using rule 26 (llamada -> ID LPAREN args RPAREN .)
    VAL             reduce using rule 26 (llamada -> ID LPAREN args RPAREN .)
    WHILE           reduce using rule 26 (llamada -> ID LPAREN args RPAREN .)
    FOR             reduce using rule 26 (llamada -> ID LPAREN args RPAREN .)
    $end            reduce using rule 26 (llamada -> ID LPAREN args RPAREN .)
    RCBRACKET       reduce using rule 26 (llamada -> ID LPAREN args RPAREN .)
    RETURN          reduce using rule 26 (llamada -> ID LPAREN args RPAREN .)


state 83

    (43) args -> args , . args
    (42) args -> . expresion
    (43) args -> . args , args
    (56) expresion -> . LPAREN expresion RPAREN
    (57) expresion -> . valor
    (58) expresion -> . expresion operadoresMat expresion
    (59) expresion -> . expresion operadoresLog expresion
    (44) valor -> . ID
    (45) valor -> . number
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . NULL
    (50) valor -> . NOT valor
    (73) number -> . INTV
    (74) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    args                           shift and go to state 102
    expresion                      shift and go to state 55
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 84

    (28) llamada -> ID . ID LPAREN . args RPAREN
    (29) llamada -> ID . ID LPAREN . RPAREN
    (42) args -> . expresion
    (43) args -> . args , args
    (56) expresion -> . LPAREN expresion RPAREN
    (57) expresion -> . valor
    (58) expresion -> . expresion operadoresMat expresion
    (59) expresion -> . expresion operadoresLog expresion
    (44) valor -> . ID
    (45) valor -> . number
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . NULL
    (50) valor -> . NOT valor
    (73) number -> . INTV
    (74) number -> . FLOATV

    RPAREN          shift and go to state 104
    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    args                           shift and go to state 103
    expresion                      shift and go to state 55
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 85

    (54) asignacion -> declarador ID ASSIGN expresion .
    (58) expresion -> expresion . operadoresMat expresion
    (59) expresion -> expresion . operadoresLog expresion
    (68) operadoresMat -> . MINUS
    (69) operadoresMat -> . PLUS
    (70) operadoresMat -> . TIMES
    (71) operadoresMat -> . DIVIDE
    (72) operadoresMat -> . MODULE
    (60) operadoresLog -> . OR
    (61) operadoresLog -> . AND
    (62) operadoresLog -> . EQUALS
    (63) operadoresLog -> . NOTEQUALS
    (64) operadoresLog -> . GREATER
    (65) operadoresLog -> . LOWER
    (66) operadoresLog -> . GREATER ASSIGN
    (67) operadoresLog -> . LOWER ASSIGN

    FUNCTION        reduce using rule 54 (asignacion -> declarador ID ASSIGN expresion .)
    ID              reduce using rule 54 (asignacion -> declarador ID ASSIGN expresion .)
    IF              reduce using rule 54 (asignacion -> declarador ID ASSIGN expresion .)
    ELSE            reduce using rule 54 (asignacion -> declarador ID ASSIGN expresion .)
    PRINTLN         reduce using rule 54 (asignacion -> declarador ID ASSIGN expresion .)
    VAR             reduce using rule 54 (asignacion -> declarador ID ASSIGN expresion .)
    VAL             reduce using rule 54 (asignacion -> declarador ID ASSIGN expresion .)
    WHILE           reduce using rule 54 (asignacion -> declarador ID ASSIGN expresion .)
    FOR             reduce using rule 54 (asignacion -> declarador ID ASSIGN expresion .)
    $end            reduce using rule 54 (asignacion -> declarador ID ASSIGN expresion .)
    RCBRACKET       reduce using rule 54 (asignacion -> declarador ID ASSIGN expresion .)
    RETURN          reduce using rule 54 (asignacion -> declarador ID ASSIGN expresion .)
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 86

    (17) estructuraControl -> IF LPAREN expresion RPAREN . instrucciones
    (10) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (11) instrucciones -> . sentencia
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (53) asignacion -> . ID ASSIGN expresion
    (54) asignacion -> . declarador ID ASSIGN expresion
    (17) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (18) estructuraControl -> . ELSE instrucciones
    (19) bucles -> . while instrucciones
    (20) bucles -> . for instrucciones
    (25) llamada -> . PRINTLN LPAREN expresion RPAREN
    (26) llamada -> . ID LPAREN args RPAREN
    (27) llamada -> . ID LPAREN RPAREN
    (28) llamada -> . ID . ID LPAREN args RPAREN
    (29) llamada -> . ID . ID LPAREN RPAREN
    (55) declaracion -> . declarador ID
    (51) declarador -> . VAR
    (52) declarador -> . VAL
    (21) while -> . WHILE LPAREN expresion RPAREN
    (22) for -> . FOR LPAREN ID IN ID RPAREN

    LCBRACKET       shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    instrucciones                  shift and go to state 105
    sentencia                      shift and go to state 32
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 87

    (10) instrucciones -> LCBRACKET cuerpo RCBRACKET .

    FUNCTION        reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    ID              reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    IF              reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    ELSE            reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    PRINTLN         reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    VAR             reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    VAL             reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    WHILE           reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    FOR             reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    $end            reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    RCBRACKET       reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    RETURN          reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)


state 88

    (25) llamada -> PRINTLN LPAREN expresion RPAREN .

    FUNCTION        reduce using rule 25 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    ID              reduce using rule 25 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    IF              reduce using rule 25 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    ELSE            reduce using rule 25 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    PRINTLN         reduce using rule 25 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    VAR             reduce using rule 25 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    VAL             reduce using rule 25 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    WHILE           reduce using rule 25 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    FOR             reduce using rule 25 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    $end            reduce using rule 25 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    RCBRACKET       reduce using rule 25 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    RETURN          reduce using rule 25 (llamada -> PRINTLN LPAREN expresion RPAREN .)


state 89

    (21) while -> WHILE LPAREN expresion RPAREN .

    LCBRACKET       reduce using rule 21 (while -> WHILE LPAREN expresion RPAREN .)
    ID              reduce using rule 21 (while -> WHILE LPAREN expresion RPAREN .)
    IF              reduce using rule 21 (while -> WHILE LPAREN expresion RPAREN .)
    ELSE            reduce using rule 21 (while -> WHILE LPAREN expresion RPAREN .)
    PRINTLN         reduce using rule 21 (while -> WHILE LPAREN expresion RPAREN .)
    VAR             reduce using rule 21 (while -> WHILE LPAREN expresion RPAREN .)
    VAL             reduce using rule 21 (while -> WHILE LPAREN expresion RPAREN .)
    WHILE           reduce using rule 21 (while -> WHILE LPAREN expresion RPAREN .)
    FOR             reduce using rule 21 (while -> WHILE LPAREN expresion RPAREN .)


state 90

    (22) for -> FOR LPAREN ID IN . ID RPAREN

    ID              shift and go to state 106


state 91

    (40) params -> ID : . dato
    (31) dato -> . INT
    (32) dato -> . FLOAT
    (33) dato -> . BYTE
    (34) dato -> . SHORT
    (35) dato -> . DOUBLE
    (36) dato -> . ID
    (37) dato -> . LONG
    (38) dato -> . CHAR
    (39) dato -> . BOOLEAN

    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    BYTE            shift and go to state 111
    SHORT           shift and go to state 112
    DOUBLE          shift and go to state 113
    ID              shift and go to state 107
    LONG            shift and go to state 114
    CHAR            shift and go to state 115
    BOOLEAN         shift and go to state 116

    dato                           shift and go to state 108

state 92

    (23) function -> FUNCTION ID LPAREN params RPAREN . instruccionesF
    (12) instruccionesF -> . LCBRACKET cuerpo retorno RCBRACKET
    (13) instruccionesF -> . LCBRACKET retorno RCBRACKET
    (14) instruccionesF -> . : dato LCBRACKET cuerpo retorno RCBRACKET
    (15) instruccionesF -> . : dato LCBRACKET retorno RCBRACKET

    LCBRACKET       shift and go to state 95
    :               shift and go to state 96

    instruccionesF                 shift and go to state 117

state 93

    (41) params -> params , . params
    (40) params -> . ID : dato
    (41) params -> . params , params

    ID              shift and go to state 63

    params                         shift and go to state 118

state 94

    (24) function -> FUNCTION ID LPAREN RPAREN instruccionesF .

    FUNCTION        reduce using rule 24 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    ID              reduce using rule 24 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    IF              reduce using rule 24 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    ELSE            reduce using rule 24 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    PRINTLN         reduce using rule 24 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    VAR             reduce using rule 24 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    VAL             reduce using rule 24 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    WHILE           reduce using rule 24 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    FOR             reduce using rule 24 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    $end            reduce using rule 24 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    RCBRACKET       reduce using rule 24 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    RETURN          reduce using rule 24 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)


state 95

    (12) instruccionesF -> LCBRACKET . cuerpo retorno RCBRACKET
    (13) instruccionesF -> LCBRACKET . retorno RCBRACKET
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . function
    (3) cuerpo -> . sentencia cuerpo
    (4) cuerpo -> . function cuerpo
    (16) retorno -> . RETURN expresion
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (23) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (24) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (30) function -> . ID LSBRACKET expresion RSBRACKET
    (53) asignacion -> . ID ASSIGN expresion
    (54) asignacion -> . declarador ID ASSIGN expresion
    (17) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (18) estructuraControl -> . ELSE instrucciones
    (19) bucles -> . while instrucciones
    (20) bucles -> . for instrucciones
    (25) llamada -> . PRINTLN LPAREN expresion RPAREN
    (26) llamada -> . ID LPAREN args RPAREN
    (27) llamada -> . ID LPAREN RPAREN
    (28) llamada -> . ID . ID LPAREN args RPAREN
    (29) llamada -> . ID . ID LPAREN RPAREN
    (55) declaracion -> . declarador ID
    (51) declarador -> . VAR
    (52) declarador -> . VAL
    (21) while -> . WHILE LPAREN expresion RPAREN
    (22) for -> . FOR LPAREN ID IN ID RPAREN

    RETURN          shift and go to state 121
    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    cuerpo                         shift and go to state 119
    retorno                        shift and go to state 120
    sentencia                      shift and go to state 2
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 96

    (14) instruccionesF -> : . dato LCBRACKET cuerpo retorno RCBRACKET
    (15) instruccionesF -> : . dato LCBRACKET retorno RCBRACKET
    (31) dato -> . INT
    (32) dato -> . FLOAT
    (33) dato -> . BYTE
    (34) dato -> . SHORT
    (35) dato -> . DOUBLE
    (36) dato -> . ID
    (37) dato -> . LONG
    (38) dato -> . CHAR
    (39) dato -> . BOOLEAN

    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    BYTE            shift and go to state 111
    SHORT           shift and go to state 112
    DOUBLE          shift and go to state 113
    ID              shift and go to state 107
    LONG            shift and go to state 114
    CHAR            shift and go to state 115
    BOOLEAN         shift and go to state 116

    dato                           shift and go to state 122

state 97

    (58) expresion -> expresion operadoresMat expresion .
    (58) expresion -> expresion . operadoresMat expresion
    (59) expresion -> expresion . operadoresLog expresion
    (68) operadoresMat -> . MINUS
    (69) operadoresMat -> . PLUS
    (70) operadoresMat -> . TIMES
    (71) operadoresMat -> . DIVIDE
    (72) operadoresMat -> . MODULE
    (60) operadoresLog -> . OR
    (61) operadoresLog -> . AND
    (62) operadoresLog -> . EQUALS
    (63) operadoresLog -> . NOTEQUALS
    (64) operadoresLog -> . GREATER
    (65) operadoresLog -> . LOWER
    (66) operadoresLog -> . GREATER ASSIGN
    (67) operadoresLog -> . LOWER ASSIGN

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
    RSBRACKET       reduce using rule 58 (expresion -> expresion operadoresMat expresion .)
    FUNCTION        reduce using rule 58 (expresion -> expresion operadoresMat expresion .)
    ID              reduce using rule 58 (expresion -> expresion operadoresMat expresion .)
    IF              reduce using rule 58 (expresion -> expresion operadoresMat expresion .)
    ELSE            reduce using rule 58 (expresion -> expresion operadoresMat expresion .)
    PRINTLN         reduce using rule 58 (expresion -> expresion operadoresMat expresion .)
    VAR             reduce using rule 58 (expresion -> expresion operadoresMat expresion .)
    VAL             reduce using rule 58 (expresion -> expresion operadoresMat expresion .)
    WHILE           reduce using rule 58 (expresion -> expresion operadoresMat expresion .)
    FOR             reduce using rule 58 (expresion -> expresion operadoresMat expresion .)
    $end            reduce using rule 58 (expresion -> expresion operadoresMat expresion .)
    RCBRACKET       reduce using rule 58 (expresion -> expresion operadoresMat expresion .)
    RETURN          reduce using rule 58 (expresion -> expresion operadoresMat expresion .)
    RPAREN          reduce using rule 58 (expresion -> expresion operadoresMat expresion .)
    ,               reduce using rule 58 (expresion -> expresion operadoresMat expresion .)
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

  ! MINUS           [ reduce using rule 58 (expresion -> expresion operadoresMat expresion .) ]
  ! PLUS            [ reduce using rule 58 (expresion -> expresion operadoresMat expresion .) ]
  ! TIMES           [ reduce using rule 58 (expresion -> expresion operadoresMat expresion .) ]
  ! DIVIDE          [ reduce using rule 58 (expresion -> expresion operadoresMat expresion .) ]
  ! MODULE          [ reduce using rule 58 (expresion -> expresion operadoresMat expresion .) ]
  ! OR              [ reduce using rule 58 (expresion -> expresion operadoresMat expresion .) ]
  ! AND             [ reduce using rule 58 (expresion -> expresion operadoresMat expresion .) ]
  ! EQUALS          [ reduce using rule 58 (expresion -> expresion operadoresMat expresion .) ]
  ! NOTEQUALS       [ reduce using rule 58 (expresion -> expresion operadoresMat expresion .) ]
  ! GREATER         [ reduce using rule 58 (expresion -> expresion operadoresMat expresion .) ]
  ! LOWER           [ reduce using rule 58 (expresion -> expresion operadoresMat expresion .) ]

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 98

    (59) expresion -> expresion operadoresLog expresion .
    (58) expresion -> expresion . operadoresMat expresion
    (59) expresion -> expresion . operadoresLog expresion
    (68) operadoresMat -> . MINUS
    (69) operadoresMat -> . PLUS
    (70) operadoresMat -> . TIMES
    (71) operadoresMat -> . DIVIDE
    (72) operadoresMat -> . MODULE
    (60) operadoresLog -> . OR
    (61) operadoresLog -> . AND
    (62) operadoresLog -> . EQUALS
    (63) operadoresLog -> . NOTEQUALS
    (64) operadoresLog -> . GREATER
    (65) operadoresLog -> . LOWER
    (66) operadoresLog -> . GREATER ASSIGN
    (67) operadoresLog -> . LOWER ASSIGN

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
    RSBRACKET       reduce using rule 59 (expresion -> expresion operadoresLog expresion .)
    FUNCTION        reduce using rule 59 (expresion -> expresion operadoresLog expresion .)
    ID              reduce using rule 59 (expresion -> expresion operadoresLog expresion .)
    IF              reduce using rule 59 (expresion -> expresion operadoresLog expresion .)
    ELSE            reduce using rule 59 (expresion -> expresion operadoresLog expresion .)
    PRINTLN         reduce using rule 59 (expresion -> expresion operadoresLog expresion .)
    VAR             reduce using rule 59 (expresion -> expresion operadoresLog expresion .)
    VAL             reduce using rule 59 (expresion -> expresion operadoresLog expresion .)
    WHILE           reduce using rule 59 (expresion -> expresion operadoresLog expresion .)
    FOR             reduce using rule 59 (expresion -> expresion operadoresLog expresion .)
    $end            reduce using rule 59 (expresion -> expresion operadoresLog expresion .)
    RCBRACKET       reduce using rule 59 (expresion -> expresion operadoresLog expresion .)
    RETURN          reduce using rule 59 (expresion -> expresion operadoresLog expresion .)
    RPAREN          reduce using rule 59 (expresion -> expresion operadoresLog expresion .)
    ,               reduce using rule 59 (expresion -> expresion operadoresLog expresion .)
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

  ! MINUS           [ reduce using rule 59 (expresion -> expresion operadoresLog expresion .) ]
  ! PLUS            [ reduce using rule 59 (expresion -> expresion operadoresLog expresion .) ]
  ! TIMES           [ reduce using rule 59 (expresion -> expresion operadoresLog expresion .) ]
  ! DIVIDE          [ reduce using rule 59 (expresion -> expresion operadoresLog expresion .) ]
  ! MODULE          [ reduce using rule 59 (expresion -> expresion operadoresLog expresion .) ]
  ! OR              [ reduce using rule 59 (expresion -> expresion operadoresLog expresion .) ]
  ! AND             [ reduce using rule 59 (expresion -> expresion operadoresLog expresion .) ]
  ! EQUALS          [ reduce using rule 59 (expresion -> expresion operadoresLog expresion .) ]
  ! NOTEQUALS       [ reduce using rule 59 (expresion -> expresion operadoresLog expresion .) ]
  ! GREATER         [ reduce using rule 59 (expresion -> expresion operadoresLog expresion .) ]
  ! LOWER           [ reduce using rule 59 (expresion -> expresion operadoresLog expresion .) ]

    operadoresLog                  shift and go to state 68
    operadoresMat                  shift and go to state 67

state 99

    (66) operadoresLog -> GREATER ASSIGN .

    LPAREN          reduce using rule 66 (operadoresLog -> GREATER ASSIGN .)
    ID              reduce using rule 66 (operadoresLog -> GREATER ASSIGN .)
    STRING          reduce using rule 66 (operadoresLog -> GREATER ASSIGN .)
    TRUE            reduce using rule 66 (operadoresLog -> GREATER ASSIGN .)
    FALSE           reduce using rule 66 (operadoresLog -> GREATER ASSIGN .)
    NULL            reduce using rule 66 (operadoresLog -> GREATER ASSIGN .)
    NOT             reduce using rule 66 (operadoresLog -> GREATER ASSIGN .)
    INTV            reduce using rule 66 (operadoresLog -> GREATER ASSIGN .)
    FLOATV          reduce using rule 66 (operadoresLog -> GREATER ASSIGN .)


state 100

    (67) operadoresLog -> LOWER ASSIGN .

    LPAREN          reduce using rule 67 (operadoresLog -> LOWER ASSIGN .)
    ID              reduce using rule 67 (operadoresLog -> LOWER ASSIGN .)
    STRING          reduce using rule 67 (operadoresLog -> LOWER ASSIGN .)
    TRUE            reduce using rule 67 (operadoresLog -> LOWER ASSIGN .)
    FALSE           reduce using rule 67 (operadoresLog -> LOWER ASSIGN .)
    NULL            reduce using rule 67 (operadoresLog -> LOWER ASSIGN .)
    NOT             reduce using rule 67 (operadoresLog -> LOWER ASSIGN .)
    INTV            reduce using rule 67 (operadoresLog -> LOWER ASSIGN .)
    FLOATV          reduce using rule 67 (operadoresLog -> LOWER ASSIGN .)


state 101

    (56) expresion -> LPAREN expresion RPAREN .

    RSBRACKET       reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    TIMES           reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    MODULE          reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    OR              reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    AND             reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    EQUALS          reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    NOTEQUALS       reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    GREATER         reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    LOWER           reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    FUNCTION        reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    ID              reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    IF              reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    ELSE            reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    PRINTLN         reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    VAR             reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    VAL             reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    WHILE           reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    FOR             reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    $end            reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    RCBRACKET       reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    RETURN          reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)
    ,               reduce using rule 56 (expresion -> LPAREN expresion RPAREN .)


state 102

    (43) args -> args , args .
    (43) args -> args . , args

  ! shift/reduce conflict for , resolved as shift
    RPAREN          reduce using rule 43 (args -> args , args .)
    ,               shift and go to state 83

  ! ,               [ reduce using rule 43 (args -> args , args .) ]


state 103

    (28) llamada -> ID . ID LPAREN args . RPAREN
    (43) args -> args . , args

    RPAREN          shift and go to state 123
    ,               shift and go to state 83


state 104

    (29) llamada -> ID . ID LPAREN RPAREN .

    FUNCTION        reduce using rule 29 (llamada -> ID . ID LPAREN RPAREN .)
    ID              reduce using rule 29 (llamada -> ID . ID LPAREN RPAREN .)
    IF              reduce using rule 29 (llamada -> ID . ID LPAREN RPAREN .)
    ELSE            reduce using rule 29 (llamada -> ID . ID LPAREN RPAREN .)
    PRINTLN         reduce using rule 29 (llamada -> ID . ID LPAREN RPAREN .)
    VAR             reduce using rule 29 (llamada -> ID . ID LPAREN RPAREN .)
    VAL             reduce using rule 29 (llamada -> ID . ID LPAREN RPAREN .)
    WHILE           reduce using rule 29 (llamada -> ID . ID LPAREN RPAREN .)
    FOR             reduce using rule 29 (llamada -> ID . ID LPAREN RPAREN .)
    $end            reduce using rule 29 (llamada -> ID . ID LPAREN RPAREN .)
    RCBRACKET       reduce using rule 29 (llamada -> ID . ID LPAREN RPAREN .)
    RETURN          reduce using rule 29 (llamada -> ID . ID LPAREN RPAREN .)


state 105

    (17) estructuraControl -> IF LPAREN expresion RPAREN instrucciones .

    FUNCTION        reduce using rule 17 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    ID              reduce using rule 17 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    IF              reduce using rule 17 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    ELSE            reduce using rule 17 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    PRINTLN         reduce using rule 17 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    VAR             reduce using rule 17 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    VAL             reduce using rule 17 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    WHILE           reduce using rule 17 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    FOR             reduce using rule 17 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    $end            reduce using rule 17 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    RCBRACKET       reduce using rule 17 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    RETURN          reduce using rule 17 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)


state 106

    (22) for -> FOR LPAREN ID IN ID . RPAREN

    RPAREN          shift and go to state 124


state 107

    (36) dato -> ID .

    RPAREN          reduce using rule 36 (dato -> ID .)
    ,               reduce using rule 36 (dato -> ID .)
    LCBRACKET       reduce using rule 36 (dato -> ID .)


state 108

    (40) params -> ID : dato .

    RPAREN          reduce using rule 40 (params -> ID : dato .)
    ,               reduce using rule 40 (params -> ID : dato .)


state 109

    (31) dato -> INT .

    RPAREN          reduce using rule 31 (dato -> INT .)
    ,               reduce using rule 31 (dato -> INT .)
    LCBRACKET       reduce using rule 31 (dato -> INT .)


state 110

    (32) dato -> FLOAT .

    RPAREN          reduce using rule 32 (dato -> FLOAT .)
    ,               reduce using rule 32 (dato -> FLOAT .)
    LCBRACKET       reduce using rule 32 (dato -> FLOAT .)


state 111

    (33) dato -> BYTE .

    RPAREN          reduce using rule 33 (dato -> BYTE .)
    ,               reduce using rule 33 (dato -> BYTE .)
    LCBRACKET       reduce using rule 33 (dato -> BYTE .)


state 112

    (34) dato -> SHORT .

    RPAREN          reduce using rule 34 (dato -> SHORT .)
    ,               reduce using rule 34 (dato -> SHORT .)
    LCBRACKET       reduce using rule 34 (dato -> SHORT .)


state 113

    (35) dato -> DOUBLE .

    RPAREN          reduce using rule 35 (dato -> DOUBLE .)
    ,               reduce using rule 35 (dato -> DOUBLE .)
    LCBRACKET       reduce using rule 35 (dato -> DOUBLE .)


state 114

    (37) dato -> LONG .

    RPAREN          reduce using rule 37 (dato -> LONG .)
    ,               reduce using rule 37 (dato -> LONG .)
    LCBRACKET       reduce using rule 37 (dato -> LONG .)


state 115

    (38) dato -> CHAR .

    RPAREN          reduce using rule 38 (dato -> CHAR .)
    ,               reduce using rule 38 (dato -> CHAR .)
    LCBRACKET       reduce using rule 38 (dato -> CHAR .)


state 116

    (39) dato -> BOOLEAN .

    RPAREN          reduce using rule 39 (dato -> BOOLEAN .)
    ,               reduce using rule 39 (dato -> BOOLEAN .)
    LCBRACKET       reduce using rule 39 (dato -> BOOLEAN .)


state 117

    (23) function -> FUNCTION ID LPAREN params RPAREN instruccionesF .

    FUNCTION        reduce using rule 23 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    ID              reduce using rule 23 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    IF              reduce using rule 23 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    ELSE            reduce using rule 23 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    PRINTLN         reduce using rule 23 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    VAR             reduce using rule 23 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    VAL             reduce using rule 23 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    WHILE           reduce using rule 23 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    FOR             reduce using rule 23 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    $end            reduce using rule 23 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    RCBRACKET       reduce using rule 23 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    RETURN          reduce using rule 23 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)


state 118

    (41) params -> params , params .
    (41) params -> params . , params

  ! shift/reduce conflict for , resolved as shift
    RPAREN          reduce using rule 41 (params -> params , params .)
    ,               shift and go to state 93

  ! ,               [ reduce using rule 41 (params -> params , params .) ]


state 119

    (12) instruccionesF -> LCBRACKET cuerpo . retorno RCBRACKET
    (16) retorno -> . RETURN expresion

    RETURN          shift and go to state 121

    retorno                        shift and go to state 125

state 120

    (13) instruccionesF -> LCBRACKET retorno . RCBRACKET

    RCBRACKET       shift and go to state 126


state 121

    (16) retorno -> RETURN . expresion
    (56) expresion -> . LPAREN expresion RPAREN
    (57) expresion -> . valor
    (58) expresion -> . expresion operadoresMat expresion
    (59) expresion -> . expresion operadoresLog expresion
    (44) valor -> . ID
    (45) valor -> . number
    (46) valor -> . STRING
    (47) valor -> . TRUE
    (48) valor -> . FALSE
    (49) valor -> . NULL
    (50) valor -> . NOT valor
    (73) number -> . INTV
    (74) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 127
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 122

    (14) instruccionesF -> : dato . LCBRACKET cuerpo retorno RCBRACKET
    (15) instruccionesF -> : dato . LCBRACKET retorno RCBRACKET

    LCBRACKET       shift and go to state 128


state 123

    (28) llamada -> ID . ID LPAREN args RPAREN .

    FUNCTION        reduce using rule 28 (llamada -> ID . ID LPAREN args RPAREN .)
    ID              reduce using rule 28 (llamada -> ID . ID LPAREN args RPAREN .)
    IF              reduce using rule 28 (llamada -> ID . ID LPAREN args RPAREN .)
    ELSE            reduce using rule 28 (llamada -> ID . ID LPAREN args RPAREN .)
    PRINTLN         reduce using rule 28 (llamada -> ID . ID LPAREN args RPAREN .)
    VAR             reduce using rule 28 (llamada -> ID . ID LPAREN args RPAREN .)
    VAL             reduce using rule 28 (llamada -> ID . ID LPAREN args RPAREN .)
    WHILE           reduce using rule 28 (llamada -> ID . ID LPAREN args RPAREN .)
    FOR             reduce using rule 28 (llamada -> ID . ID LPAREN args RPAREN .)
    $end            reduce using rule 28 (llamada -> ID . ID LPAREN args RPAREN .)
    RCBRACKET       reduce using rule 28 (llamada -> ID . ID LPAREN args RPAREN .)
    RETURN          reduce using rule 28 (llamada -> ID . ID LPAREN args RPAREN .)


state 124

    (22) for -> FOR LPAREN ID IN ID RPAREN .

    LCBRACKET       reduce using rule 22 (for -> FOR LPAREN ID IN ID RPAREN .)
    ID              reduce using rule 22 (for -> FOR LPAREN ID IN ID RPAREN .)
    IF              reduce using rule 22 (for -> FOR LPAREN ID IN ID RPAREN .)
    ELSE            reduce using rule 22 (for -> FOR LPAREN ID IN ID RPAREN .)
    PRINTLN         reduce using rule 22 (for -> FOR LPAREN ID IN ID RPAREN .)
    VAR             reduce using rule 22 (for -> FOR LPAREN ID IN ID RPAREN .)
    VAL             reduce using rule 22 (for -> FOR LPAREN ID IN ID RPAREN .)
    WHILE           reduce using rule 22 (for -> FOR LPAREN ID IN ID RPAREN .)
    FOR             reduce using rule 22 (for -> FOR LPAREN ID IN ID RPAREN .)


state 125

    (12) instruccionesF -> LCBRACKET cuerpo retorno . RCBRACKET

    RCBRACKET       shift and go to state 129


state 126

    (13) instruccionesF -> LCBRACKET retorno RCBRACKET .

    FUNCTION        reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    ID              reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    IF              reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    ELSE            reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    PRINTLN         reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    VAR             reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    VAL             reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    WHILE           reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    FOR             reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    $end            reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    RCBRACKET       reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    RETURN          reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)


state 127

    (16) retorno -> RETURN expresion .
    (58) expresion -> expresion . operadoresMat expresion
    (59) expresion -> expresion . operadoresLog expresion
    (68) operadoresMat -> . MINUS
    (69) operadoresMat -> . PLUS
    (70) operadoresMat -> . TIMES
    (71) operadoresMat -> . DIVIDE
    (72) operadoresMat -> . MODULE
    (60) operadoresLog -> . OR
    (61) operadoresLog -> . AND
    (62) operadoresLog -> . EQUALS
    (63) operadoresLog -> . NOTEQUALS
    (64) operadoresLog -> . GREATER
    (65) operadoresLog -> . LOWER
    (66) operadoresLog -> . GREATER ASSIGN
    (67) operadoresLog -> . LOWER ASSIGN

    RCBRACKET       reduce using rule 16 (retorno -> RETURN expresion .)
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 128

    (14) instruccionesF -> : dato LCBRACKET . cuerpo retorno RCBRACKET
    (15) instruccionesF -> : dato LCBRACKET . retorno RCBRACKET
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . function
    (3) cuerpo -> . sentencia cuerpo
    (4) cuerpo -> . function cuerpo
    (16) retorno -> . RETURN expresion
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (23) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (24) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (30) function -> . ID LSBRACKET expresion RSBRACKET
    (53) asignacion -> . ID ASSIGN expresion
    (54) asignacion -> . declarador ID ASSIGN expresion
    (17) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (18) estructuraControl -> . ELSE instrucciones
    (19) bucles -> . while instrucciones
    (20) bucles -> . for instrucciones
    (25) llamada -> . PRINTLN LPAREN expresion RPAREN
    (26) llamada -> . ID LPAREN args RPAREN
    (27) llamada -> . ID LPAREN RPAREN
    (28) llamada -> . ID . ID LPAREN args RPAREN
    (29) llamada -> . ID . ID LPAREN RPAREN
    (55) declaracion -> . declarador ID
    (51) declarador -> . VAR
    (52) declarador -> . VAL
    (21) while -> . WHILE LPAREN expresion RPAREN
    (22) for -> . FOR LPAREN ID IN ID RPAREN

    RETURN          shift and go to state 121
    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    cuerpo                         shift and go to state 130
    retorno                        shift and go to state 131
    sentencia                      shift and go to state 2
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 129

    (12) instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .

    FUNCTION        reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    ID              reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    IF              reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    ELSE            reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    PRINTLN         reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    VAR             reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    VAL             reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    WHILE           reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    FOR             reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    $end            reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    RCBRACKET       reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    RETURN          reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)


state 130

    (14) instruccionesF -> : dato LCBRACKET cuerpo . retorno RCBRACKET
    (16) retorno -> . RETURN expresion

    RETURN          shift and go to state 121

    retorno                        shift and go to state 132

state 131

    (15) instruccionesF -> : dato LCBRACKET retorno . RCBRACKET

    RCBRACKET       shift and go to state 133


state 132

    (14) instruccionesF -> : dato LCBRACKET cuerpo retorno . RCBRACKET

    RCBRACKET       shift and go to state 134


state 133

    (15) instruccionesF -> : dato LCBRACKET retorno RCBRACKET .

    FUNCTION        reduce using rule 15 (instruccionesF -> : dato LCBRACKET retorno RCBRACKET .)
    ID              reduce using rule 15 (instruccionesF -> : dato LCBRACKET retorno RCBRACKET .)
    IF              reduce using rule 15 (instruccionesF -> : dato LCBRACKET retorno RCBRACKET .)
    ELSE            reduce using rule 15 (instruccionesF -> : dato LCBRACKET retorno RCBRACKET .)
    PRINTLN         reduce using rule 15 (instruccionesF -> : dato LCBRACKET retorno RCBRACKET .)
    VAR             reduce using rule 15 (instruccionesF -> : dato LCBRACKET retorno RCBRACKET .)
    VAL             reduce using rule 15 (instruccionesF -> : dato LCBRACKET retorno RCBRACKET .)
    WHILE           reduce using rule 15 (instruccionesF -> : dato LCBRACKET retorno RCBRACKET .)
    FOR             reduce using rule 15 (instruccionesF -> : dato LCBRACKET retorno RCBRACKET .)
    $end            reduce using rule 15 (instruccionesF -> : dato LCBRACKET retorno RCBRACKET .)
    RCBRACKET       reduce using rule 15 (instruccionesF -> : dato LCBRACKET retorno RCBRACKET .)
    RETURN          reduce using rule 15 (instruccionesF -> : dato LCBRACKET retorno RCBRACKET .)


state 134

    (14) instruccionesF -> : dato LCBRACKET cuerpo retorno RCBRACKET .

    FUNCTION        reduce using rule 14 (instruccionesF -> : dato LCBRACKET cuerpo retorno RCBRACKET .)
    ID              reduce using rule 14 (instruccionesF -> : dato LCBRACKET cuerpo retorno RCBRACKET .)
    IF              reduce using rule 14 (instruccionesF -> : dato LCBRACKET cuerpo retorno RCBRACKET .)
    ELSE            reduce using rule 14 (instruccionesF -> : dato LCBRACKET cuerpo retorno RCBRACKET .)
    PRINTLN         reduce using rule 14 (instruccionesF -> : dato LCBRACKET cuerpo retorno RCBRACKET .)
    VAR             reduce using rule 14 (instruccionesF -> : dato LCBRACKET cuerpo retorno RCBRACKET .)
    VAL             reduce using rule 14 (instruccionesF -> : dato LCBRACKET cuerpo retorno RCBRACKET .)
    WHILE           reduce using rule 14 (instruccionesF -> : dato LCBRACKET cuerpo retorno RCBRACKET .)
    FOR             reduce using rule 14 (instruccionesF -> : dato LCBRACKET cuerpo retorno RCBRACKET .)
    $end            reduce using rule 14 (instruccionesF -> : dato LCBRACKET cuerpo retorno RCBRACKET .)
    RCBRACKET       reduce using rule 14 (instruccionesF -> : dato LCBRACKET cuerpo retorno RCBRACKET .)
    RETURN          reduce using rule 14 (instruccionesF -> : dato LCBRACKET cuerpo retorno RCBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 97 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 97 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 97 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 97 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 98 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 98 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 98 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 98 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 98 resolved as shift
WARNING: shift/reduce conflict for , in state 102 resolved as shift
WARNING: shift/reduce conflict for , in state 118 resolved as shift
