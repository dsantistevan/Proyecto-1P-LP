Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> sentencia
Rule 2     cuerpo -> function
Rule 3     cuerpo -> sentencia cuerpo
Rule 4     cuerpo -> function cuerpo
Rule 5     sentencia -> asignacion
Rule 6     sentencia -> estructuraControl
Rule 7     sentencia -> bucles
Rule 8     sentencia -> llamada
Rule 9     sentencia -> declaracion
Rule 10    instrucciones -> LCBRACKET cuerpo RCBRACKET
Rule 11    instrucciones -> sentencia
Rule 12    instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET
Rule 13    instruccionesF -> LCBRACKET retorno RCBRACKET
Rule 14    retorno -> RETURN expresion
Rule 15    estructuraControl -> IF LPAREN expresion RPAREN instrucciones
Rule 16    estructuraControl -> ELSE instrucciones
Rule 17    bucles -> while instrucciones
Rule 18    bucles -> for instrucciones
Rule 19    while -> WHILE LPAREN expresion RPAREN
Rule 20    for -> FOR LPAREN ID IN ID RPAREN
Rule 21    function -> FUNCTION ID LPAREN params RPAREN instruccionesF
Rule 22    function -> FUNCTION ID LPAREN RPAREN instruccionesF
Rule 23    llamada -> PRINTLN LPAREN expresion RPAREN
Rule 24    llamada -> ID LPAREN args RPAREN
Rule 25    llamada -> ID LPAREN RPAREN
Rule 26    function -> ID LSBRACKET valor RSBRACKET
Rule 27    dato -> INT
Rule 28    dato -> FLOAT
Rule 29    dato -> BYTE
Rule 30    dato -> SHORT
Rule 31    dato -> DOUBLE
Rule 32    dato -> ID
Rule 33    dato -> LONG
Rule 34    dato -> CHAR
Rule 35    dato -> BOOLEAN
Rule 36    params -> ID : dato
Rule 37    params -> params , params
Rule 38    args -> valor
Rule 39    args -> args , args
Rule 40    valor -> ID
Rule 41    valor -> number
Rule 42    valor -> STRING
Rule 43    valor -> TRUE
Rule 44    valor -> FALSE
Rule 45    valor -> NULL
Rule 46    valor -> NOT valor
Rule 47    declarador -> VAR
Rule 48    declarador -> VAL
Rule 49    asignacion -> ID ASSIGN expresion
Rule 50    asignacion -> declarador ID ASSIGN expresion
Rule 51    declaracion -> declarador ID
Rule 52    expresion -> LPAREN expresion RPAREN
Rule 53    expresion -> valor
Rule 54    expresion -> expresion operadoresMat expresion
Rule 55    expresion -> expresion operadoresLog expresion
Rule 56    operadoresLog -> OR
Rule 57    operadoresLog -> AND
Rule 58    operadoresLog -> EQUALS
Rule 59    operadoresLog -> NOTEQUALS
Rule 60    operadoresLog -> GREATER
Rule 61    operadoresLog -> LOWER
Rule 62    operadoresLog -> GREATER ASSIGN
Rule 63    operadoresLog -> LOWER ASSIGN
Rule 64    operadoresMat -> MINUS
Rule 65    operadoresMat -> PLUS
Rule 66    operadoresMat -> TIMES
Rule 67    operadoresMat -> DIVIDE
Rule 68    operadoresMat -> MODULE
Rule 69    number -> INTV
Rule 70    number -> FLOATV

Terminals, with rules where they appear

,                    : 37 39
:                    : 36
AND                  : 57
ASSIGN               : 49 50 62 63
BOOLEAN              : 35
BYTE                 : 29
CHAR                 : 34
DIVIDE               : 67
DOUBLE               : 31
ELSE                 : 16
EQUALS               : 58
FALSE                : 44
FLOAT                : 28
FLOATV               : 70
FOR                  : 20
FUNCTION             : 21 22
GREATER              : 60 62
ID                   : 20 20 21 22 24 25 26 32 36 40 49 50 51
IF                   : 15
IN                   : 20
INT                  : 27
INTV                 : 69
LCBRACKET            : 10 12 13
LONG                 : 33
LOWER                : 61 63
LPAREN               : 15 19 20 21 22 23 24 25 52
LSBRACKET            : 26
MINUS                : 64
MODULE               : 68
NOT                  : 46
NOTEQUALS            : 59
NULL                 : 45
OR                   : 56
PLUS                 : 65
PRINTLN              : 23
RCBRACKET            : 10 12 13
RETURN               : 14
RPAREN               : 15 19 20 21 22 23 24 25 52
RSBRACKET            : 26
SHORT                : 30
STRING               : 42
TIMES                : 66
TRUE                 : 43
VAL                  : 48
VAR                  : 47
WHILE                : 19
error                : 

Nonterminals, with rules where they appear

args                 : 24 39 39
asignacion           : 5
bucles               : 7
cuerpo               : 3 4 10 12 0
dato                 : 36
declaracion          : 9
declarador           : 50 51
estructuraControl    : 6
expresion            : 14 15 19 23 49 50 52 54 54 55 55
for                  : 18
function             : 2 4
instrucciones        : 15 16 17 18
instruccionesF       : 21 22
llamada              : 8
number               : 41
operadoresLog        : 55
operadoresMat        : 54
params               : 21 37 37
retorno              : 12 13
sentencia            : 1 3 11
valor                : 26 38 46 53
while                : 17

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . function
    (3) cuerpo -> . sentencia cuerpo
    (4) cuerpo -> . function cuerpo
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (21) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (22) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (26) function -> . ID LSBRACKET valor RSBRACKET
    (49) asignacion -> . ID ASSIGN expresion
    (50) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (51) declaracion -> . declarador ID
    (47) declarador -> . VAR
    (48) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    cuerpo                         shift and go to state 1
    sentencia                      shift and go to state 2
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> sentencia .
    (3) cuerpo -> sentencia . cuerpo
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . function
    (3) cuerpo -> . sentencia cuerpo
    (4) cuerpo -> . function cuerpo
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (21) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (22) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (26) function -> . ID LSBRACKET valor RSBRACKET
    (49) asignacion -> . ID ASSIGN expresion
    (50) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (51) declaracion -> . declarador ID
    (47) declarador -> . VAR
    (48) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    $end            reduce using rule 1 (cuerpo -> sentencia .)
    RCBRACKET       reduce using rule 1 (cuerpo -> sentencia .)
    RETURN          reduce using rule 1 (cuerpo -> sentencia .)
    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    sentencia                      shift and go to state 2
    cuerpo                         shift and go to state 21
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 3

    (2) cuerpo -> function .
    (4) cuerpo -> function . cuerpo
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . function
    (3) cuerpo -> . sentencia cuerpo
    (4) cuerpo -> . function cuerpo
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (21) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (22) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (26) function -> . ID LSBRACKET valor RSBRACKET
    (49) asignacion -> . ID ASSIGN expresion
    (50) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (51) declaracion -> . declarador ID
    (47) declarador -> . VAR
    (48) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    $end            reduce using rule 2 (cuerpo -> function .)
    RCBRACKET       reduce using rule 2 (cuerpo -> function .)
    RETURN          reduce using rule 2 (cuerpo -> function .)
    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    function                       shift and go to state 3
    cuerpo                         shift and go to state 22
    sentencia                      shift and go to state 2
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 4

    (5) sentencia -> asignacion .

    FUNCTION        reduce using rule 5 (sentencia -> asignacion .)
    ID              reduce using rule 5 (sentencia -> asignacion .)
    IF              reduce using rule 5 (sentencia -> asignacion .)
    ELSE            reduce using rule 5 (sentencia -> asignacion .)
    PRINTLN         reduce using rule 5 (sentencia -> asignacion .)
    VAR             reduce using rule 5 (sentencia -> asignacion .)
    VAL             reduce using rule 5 (sentencia -> asignacion .)
    WHILE           reduce using rule 5 (sentencia -> asignacion .)
    FOR             reduce using rule 5 (sentencia -> asignacion .)
    $end            reduce using rule 5 (sentencia -> asignacion .)
    RCBRACKET       reduce using rule 5 (sentencia -> asignacion .)
    RETURN          reduce using rule 5 (sentencia -> asignacion .)


state 5

    (6) sentencia -> estructuraControl .

    FUNCTION        reduce using rule 6 (sentencia -> estructuraControl .)
    ID              reduce using rule 6 (sentencia -> estructuraControl .)
    IF              reduce using rule 6 (sentencia -> estructuraControl .)
    ELSE            reduce using rule 6 (sentencia -> estructuraControl .)
    PRINTLN         reduce using rule 6 (sentencia -> estructuraControl .)
    VAR             reduce using rule 6 (sentencia -> estructuraControl .)
    VAL             reduce using rule 6 (sentencia -> estructuraControl .)
    WHILE           reduce using rule 6 (sentencia -> estructuraControl .)
    FOR             reduce using rule 6 (sentencia -> estructuraControl .)
    $end            reduce using rule 6 (sentencia -> estructuraControl .)
    RCBRACKET       reduce using rule 6 (sentencia -> estructuraControl .)
    RETURN          reduce using rule 6 (sentencia -> estructuraControl .)


state 6

    (7) sentencia -> bucles .

    FUNCTION        reduce using rule 7 (sentencia -> bucles .)
    ID              reduce using rule 7 (sentencia -> bucles .)
    IF              reduce using rule 7 (sentencia -> bucles .)
    ELSE            reduce using rule 7 (sentencia -> bucles .)
    PRINTLN         reduce using rule 7 (sentencia -> bucles .)
    VAR             reduce using rule 7 (sentencia -> bucles .)
    VAL             reduce using rule 7 (sentencia -> bucles .)
    WHILE           reduce using rule 7 (sentencia -> bucles .)
    FOR             reduce using rule 7 (sentencia -> bucles .)
    $end            reduce using rule 7 (sentencia -> bucles .)
    RCBRACKET       reduce using rule 7 (sentencia -> bucles .)
    RETURN          reduce using rule 7 (sentencia -> bucles .)


state 7

    (8) sentencia -> llamada .

    FUNCTION        reduce using rule 8 (sentencia -> llamada .)
    ID              reduce using rule 8 (sentencia -> llamada .)
    IF              reduce using rule 8 (sentencia -> llamada .)
    ELSE            reduce using rule 8 (sentencia -> llamada .)
    PRINTLN         reduce using rule 8 (sentencia -> llamada .)
    VAR             reduce using rule 8 (sentencia -> llamada .)
    VAL             reduce using rule 8 (sentencia -> llamada .)
    WHILE           reduce using rule 8 (sentencia -> llamada .)
    FOR             reduce using rule 8 (sentencia -> llamada .)
    $end            reduce using rule 8 (sentencia -> llamada .)
    RCBRACKET       reduce using rule 8 (sentencia -> llamada .)
    RETURN          reduce using rule 8 (sentencia -> llamada .)


state 8

    (9) sentencia -> declaracion .

    FUNCTION        reduce using rule 9 (sentencia -> declaracion .)
    ID              reduce using rule 9 (sentencia -> declaracion .)
    IF              reduce using rule 9 (sentencia -> declaracion .)
    ELSE            reduce using rule 9 (sentencia -> declaracion .)
    PRINTLN         reduce using rule 9 (sentencia -> declaracion .)
    VAR             reduce using rule 9 (sentencia -> declaracion .)
    VAL             reduce using rule 9 (sentencia -> declaracion .)
    WHILE           reduce using rule 9 (sentencia -> declaracion .)
    FOR             reduce using rule 9 (sentencia -> declaracion .)
    $end            reduce using rule 9 (sentencia -> declaracion .)
    RCBRACKET       reduce using rule 9 (sentencia -> declaracion .)
    RETURN          reduce using rule 9 (sentencia -> declaracion .)


state 9

    (21) function -> FUNCTION . ID LPAREN params RPAREN instruccionesF
    (22) function -> FUNCTION . ID LPAREN RPAREN instruccionesF

    ID              shift and go to state 23


state 10

    (26) function -> ID . LSBRACKET valor RSBRACKET
    (49) asignacion -> ID . ASSIGN expresion
    (24) llamada -> ID . LPAREN args RPAREN
    (25) llamada -> ID . LPAREN RPAREN

    LSBRACKET       shift and go to state 24
    ASSIGN          shift and go to state 25
    LPAREN          shift and go to state 26


state 11

    (50) asignacion -> declarador . ID ASSIGN expresion
    (51) declaracion -> declarador . ID

    ID              shift and go to state 27


state 12

    (15) estructuraControl -> IF . LPAREN expresion RPAREN instrucciones

    LPAREN          shift and go to state 28


state 13

    (16) estructuraControl -> ELSE . instrucciones
    (10) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (11) instrucciones -> . sentencia
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (49) asignacion -> . ID ASSIGN expresion
    (50) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (51) declaracion -> . declarador ID
    (47) declarador -> . VAR
    (48) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    LCBRACKET       shift and go to state 30
    ID              shift and go to state 32
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    instrucciones                  shift and go to state 29
    sentencia                      shift and go to state 31
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 14

    (17) bucles -> while . instrucciones
    (10) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (11) instrucciones -> . sentencia
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (49) asignacion -> . ID ASSIGN expresion
    (50) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (51) declaracion -> . declarador ID
    (47) declarador -> . VAR
    (48) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    LCBRACKET       shift and go to state 30
    ID              shift and go to state 32
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    while                          shift and go to state 14
    instrucciones                  shift and go to state 33
    sentencia                      shift and go to state 31
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    for                            shift and go to state 15

state 15

    (18) bucles -> for . instrucciones
    (10) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (11) instrucciones -> . sentencia
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (49) asignacion -> . ID ASSIGN expresion
    (50) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (51) declaracion -> . declarador ID
    (47) declarador -> . VAR
    (48) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    LCBRACKET       shift and go to state 30
    ID              shift and go to state 32
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    for                            shift and go to state 15
    instrucciones                  shift and go to state 34
    sentencia                      shift and go to state 31
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14

state 16

    (23) llamada -> PRINTLN . LPAREN expresion RPAREN

    LPAREN          shift and go to state 35


state 17

    (47) declarador -> VAR .

    ID              reduce using rule 47 (declarador -> VAR .)


state 18

    (48) declarador -> VAL .

    ID              reduce using rule 48 (declarador -> VAL .)


state 19

    (19) while -> WHILE . LPAREN expresion RPAREN

    LPAREN          shift and go to state 36


state 20

    (20) for -> FOR . LPAREN ID IN ID RPAREN

    LPAREN          shift and go to state 37


state 21

    (3) cuerpo -> sentencia cuerpo .

    $end            reduce using rule 3 (cuerpo -> sentencia cuerpo .)
    RCBRACKET       reduce using rule 3 (cuerpo -> sentencia cuerpo .)
    RETURN          reduce using rule 3 (cuerpo -> sentencia cuerpo .)


state 22

    (4) cuerpo -> function cuerpo .

    $end            reduce using rule 4 (cuerpo -> function cuerpo .)
    RCBRACKET       reduce using rule 4 (cuerpo -> function cuerpo .)
    RETURN          reduce using rule 4 (cuerpo -> function cuerpo .)


state 23

    (21) function -> FUNCTION ID . LPAREN params RPAREN instruccionesF
    (22) function -> FUNCTION ID . LPAREN RPAREN instruccionesF

    LPAREN          shift and go to state 38


state 24

    (26) function -> ID LSBRACKET . valor RSBRACKET
    (40) valor -> . ID
    (41) valor -> . number
    (42) valor -> . STRING
    (43) valor -> . TRUE
    (44) valor -> . FALSE
    (45) valor -> . NULL
    (46) valor -> . NOT valor
    (69) number -> . INTV
    (70) number -> . FLOATV

    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    valor                          shift and go to state 40
    number                         shift and go to state 41

state 25

    (49) asignacion -> ID ASSIGN . expresion
    (52) expresion -> . LPAREN expresion RPAREN
    (53) expresion -> . valor
    (54) expresion -> . expresion operadoresMat expresion
    (55) expresion -> . expresion operadoresLog expresion
    (40) valor -> . ID
    (41) valor -> . number
    (42) valor -> . STRING
    (43) valor -> . TRUE
    (44) valor -> . FALSE
    (45) valor -> . NULL
    (46) valor -> . NOT valor
    (69) number -> . INTV
    (70) number -> . FLOATV

    LPAREN          shift and go to state 50
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    expresion                      shift and go to state 49
    valor                          shift and go to state 51
    number                         shift and go to state 41

state 26

    (24) llamada -> ID LPAREN . args RPAREN
    (25) llamada -> ID LPAREN . RPAREN
    (38) args -> . valor
    (39) args -> . args , args
    (40) valor -> . ID
    (41) valor -> . number
    (42) valor -> . STRING
    (43) valor -> . TRUE
    (44) valor -> . FALSE
    (45) valor -> . NULL
    (46) valor -> . NOT valor
    (69) number -> . INTV
    (70) number -> . FLOATV

    RPAREN          shift and go to state 53
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    args                           shift and go to state 52
    valor                          shift and go to state 54
    number                         shift and go to state 41

state 27

    (50) asignacion -> declarador ID . ASSIGN expresion
    (51) declaracion -> declarador ID .

    ASSIGN          shift and go to state 55
    FUNCTION        reduce using rule 51 (declaracion -> declarador ID .)
    ID              reduce using rule 51 (declaracion -> declarador ID .)
    IF              reduce using rule 51 (declaracion -> declarador ID .)
    ELSE            reduce using rule 51 (declaracion -> declarador ID .)
    PRINTLN         reduce using rule 51 (declaracion -> declarador ID .)
    VAR             reduce using rule 51 (declaracion -> declarador ID .)
    VAL             reduce using rule 51 (declaracion -> declarador ID .)
    WHILE           reduce using rule 51 (declaracion -> declarador ID .)
    FOR             reduce using rule 51 (declaracion -> declarador ID .)
    $end            reduce using rule 51 (declaracion -> declarador ID .)
    RCBRACKET       reduce using rule 51 (declaracion -> declarador ID .)
    RETURN          reduce using rule 51 (declaracion -> declarador ID .)


state 28

    (15) estructuraControl -> IF LPAREN . expresion RPAREN instrucciones
    (52) expresion -> . LPAREN expresion RPAREN
    (53) expresion -> . valor
    (54) expresion -> . expresion operadoresMat expresion
    (55) expresion -> . expresion operadoresLog expresion
    (40) valor -> . ID
    (41) valor -> . number
    (42) valor -> . STRING
    (43) valor -> . TRUE
    (44) valor -> . FALSE
    (45) valor -> . NULL
    (46) valor -> . NOT valor
    (69) number -> . INTV
    (70) number -> . FLOATV

    LPAREN          shift and go to state 50
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    expresion                      shift and go to state 56
    valor                          shift and go to state 51
    number                         shift and go to state 41

state 29

    (16) estructuraControl -> ELSE instrucciones .

    FUNCTION        reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    ID              reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    IF              reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    ELSE            reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    PRINTLN         reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    VAR             reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    VAL             reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    WHILE           reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    FOR             reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    $end            reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    RCBRACKET       reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    RETURN          reduce using rule 16 (estructuraControl -> ELSE instrucciones .)


state 30

    (10) instrucciones -> LCBRACKET . cuerpo RCBRACKET
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . function
    (3) cuerpo -> . sentencia cuerpo
    (4) cuerpo -> . function cuerpo
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (21) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (22) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (26) function -> . ID LSBRACKET valor RSBRACKET
    (49) asignacion -> . ID ASSIGN expresion
    (50) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (51) declaracion -> . declarador ID
    (47) declarador -> . VAR
    (48) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    cuerpo                         shift and go to state 57
    sentencia                      shift and go to state 2
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 31

    (11) instrucciones -> sentencia .

    FUNCTION        reduce using rule 11 (instrucciones -> sentencia .)
    ID              reduce using rule 11 (instrucciones -> sentencia .)
    IF              reduce using rule 11 (instrucciones -> sentencia .)
    ELSE            reduce using rule 11 (instrucciones -> sentencia .)
    PRINTLN         reduce using rule 11 (instrucciones -> sentencia .)
    VAR             reduce using rule 11 (instrucciones -> sentencia .)
    VAL             reduce using rule 11 (instrucciones -> sentencia .)
    WHILE           reduce using rule 11 (instrucciones -> sentencia .)
    FOR             reduce using rule 11 (instrucciones -> sentencia .)
    $end            reduce using rule 11 (instrucciones -> sentencia .)
    RCBRACKET       reduce using rule 11 (instrucciones -> sentencia .)
    RETURN          reduce using rule 11 (instrucciones -> sentencia .)


state 32

    (49) asignacion -> ID . ASSIGN expresion
    (24) llamada -> ID . LPAREN args RPAREN
    (25) llamada -> ID . LPAREN RPAREN

    ASSIGN          shift and go to state 25
    LPAREN          shift and go to state 26


state 33

    (17) bucles -> while instrucciones .

    FUNCTION        reduce using rule 17 (bucles -> while instrucciones .)
    ID              reduce using rule 17 (bucles -> while instrucciones .)
    IF              reduce using rule 17 (bucles -> while instrucciones .)
    ELSE            reduce using rule 17 (bucles -> while instrucciones .)
    PRINTLN         reduce using rule 17 (bucles -> while instrucciones .)
    VAR             reduce using rule 17 (bucles -> while instrucciones .)
    VAL             reduce using rule 17 (bucles -> while instrucciones .)
    WHILE           reduce using rule 17 (bucles -> while instrucciones .)
    FOR             reduce using rule 17 (bucles -> while instrucciones .)
    $end            reduce using rule 17 (bucles -> while instrucciones .)
    RCBRACKET       reduce using rule 17 (bucles -> while instrucciones .)
    RETURN          reduce using rule 17 (bucles -> while instrucciones .)


state 34

    (18) bucles -> for instrucciones .

    FUNCTION        reduce using rule 18 (bucles -> for instrucciones .)
    ID              reduce using rule 18 (bucles -> for instrucciones .)
    IF              reduce using rule 18 (bucles -> for instrucciones .)
    ELSE            reduce using rule 18 (bucles -> for instrucciones .)
    PRINTLN         reduce using rule 18 (bucles -> for instrucciones .)
    VAR             reduce using rule 18 (bucles -> for instrucciones .)
    VAL             reduce using rule 18 (bucles -> for instrucciones .)
    WHILE           reduce using rule 18 (bucles -> for instrucciones .)
    FOR             reduce using rule 18 (bucles -> for instrucciones .)
    $end            reduce using rule 18 (bucles -> for instrucciones .)
    RCBRACKET       reduce using rule 18 (bucles -> for instrucciones .)
    RETURN          reduce using rule 18 (bucles -> for instrucciones .)


state 35

    (23) llamada -> PRINTLN LPAREN . expresion RPAREN
    (52) expresion -> . LPAREN expresion RPAREN
    (53) expresion -> . valor
    (54) expresion -> . expresion operadoresMat expresion
    (55) expresion -> . expresion operadoresLog expresion
    (40) valor -> . ID
    (41) valor -> . number
    (42) valor -> . STRING
    (43) valor -> . TRUE
    (44) valor -> . FALSE
    (45) valor -> . NULL
    (46) valor -> . NOT valor
    (69) number -> . INTV
    (70) number -> . FLOATV

    LPAREN          shift and go to state 50
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    expresion                      shift and go to state 58
    valor                          shift and go to state 51
    number                         shift and go to state 41

state 36

    (19) while -> WHILE LPAREN . expresion RPAREN
    (52) expresion -> . LPAREN expresion RPAREN
    (53) expresion -> . valor
    (54) expresion -> . expresion operadoresMat expresion
    (55) expresion -> . expresion operadoresLog expresion
    (40) valor -> . ID
    (41) valor -> . number
    (42) valor -> . STRING
    (43) valor -> . TRUE
    (44) valor -> . FALSE
    (45) valor -> . NULL
    (46) valor -> . NOT valor
    (69) number -> . INTV
    (70) number -> . FLOATV

    LPAREN          shift and go to state 50
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    expresion                      shift and go to state 59
    valor                          shift and go to state 51
    number                         shift and go to state 41

state 37

    (20) for -> FOR LPAREN . ID IN ID RPAREN

    ID              shift and go to state 60


state 38

    (21) function -> FUNCTION ID LPAREN . params RPAREN instruccionesF
    (22) function -> FUNCTION ID LPAREN . RPAREN instruccionesF
    (36) params -> . ID : dato
    (37) params -> . params , params

    RPAREN          shift and go to state 63
    ID              shift and go to state 61

    params                         shift and go to state 62

state 39

    (40) valor -> ID .

    RSBRACKET       reduce using rule 40 (valor -> ID .)
    MINUS           reduce using rule 40 (valor -> ID .)
    PLUS            reduce using rule 40 (valor -> ID .)
    TIMES           reduce using rule 40 (valor -> ID .)
    DIVIDE          reduce using rule 40 (valor -> ID .)
    MODULE          reduce using rule 40 (valor -> ID .)
    OR              reduce using rule 40 (valor -> ID .)
    AND             reduce using rule 40 (valor -> ID .)
    EQUALS          reduce using rule 40 (valor -> ID .)
    NOTEQUALS       reduce using rule 40 (valor -> ID .)
    GREATER         reduce using rule 40 (valor -> ID .)
    LOWER           reduce using rule 40 (valor -> ID .)
    FUNCTION        reduce using rule 40 (valor -> ID .)
    ID              reduce using rule 40 (valor -> ID .)
    IF              reduce using rule 40 (valor -> ID .)
    ELSE            reduce using rule 40 (valor -> ID .)
    PRINTLN         reduce using rule 40 (valor -> ID .)
    VAR             reduce using rule 40 (valor -> ID .)
    VAL             reduce using rule 40 (valor -> ID .)
    WHILE           reduce using rule 40 (valor -> ID .)
    FOR             reduce using rule 40 (valor -> ID .)
    $end            reduce using rule 40 (valor -> ID .)
    RCBRACKET       reduce using rule 40 (valor -> ID .)
    RETURN          reduce using rule 40 (valor -> ID .)
    RPAREN          reduce using rule 40 (valor -> ID .)
    ,               reduce using rule 40 (valor -> ID .)


state 40

    (26) function -> ID LSBRACKET valor . RSBRACKET

    RSBRACKET       shift and go to state 64


state 41

    (41) valor -> number .

    RSBRACKET       reduce using rule 41 (valor -> number .)
    MINUS           reduce using rule 41 (valor -> number .)
    PLUS            reduce using rule 41 (valor -> number .)
    TIMES           reduce using rule 41 (valor -> number .)
    DIVIDE          reduce using rule 41 (valor -> number .)
    MODULE          reduce using rule 41 (valor -> number .)
    OR              reduce using rule 41 (valor -> number .)
    AND             reduce using rule 41 (valor -> number .)
    EQUALS          reduce using rule 41 (valor -> number .)
    NOTEQUALS       reduce using rule 41 (valor -> number .)
    GREATER         reduce using rule 41 (valor -> number .)
    LOWER           reduce using rule 41 (valor -> number .)
    FUNCTION        reduce using rule 41 (valor -> number .)
    ID              reduce using rule 41 (valor -> number .)
    IF              reduce using rule 41 (valor -> number .)
    ELSE            reduce using rule 41 (valor -> number .)
    PRINTLN         reduce using rule 41 (valor -> number .)
    VAR             reduce using rule 41 (valor -> number .)
    VAL             reduce using rule 41 (valor -> number .)
    WHILE           reduce using rule 41 (valor -> number .)
    FOR             reduce using rule 41 (valor -> number .)
    $end            reduce using rule 41 (valor -> number .)
    RCBRACKET       reduce using rule 41 (valor -> number .)
    RETURN          reduce using rule 41 (valor -> number .)
    RPAREN          reduce using rule 41 (valor -> number .)
    ,               reduce using rule 41 (valor -> number .)


state 42

    (42) valor -> STRING .

    RSBRACKET       reduce using rule 42 (valor -> STRING .)
    MINUS           reduce using rule 42 (valor -> STRING .)
    PLUS            reduce using rule 42 (valor -> STRING .)
    TIMES           reduce using rule 42 (valor -> STRING .)
    DIVIDE          reduce using rule 42 (valor -> STRING .)
    MODULE          reduce using rule 42 (valor -> STRING .)
    OR              reduce using rule 42 (valor -> STRING .)
    AND             reduce using rule 42 (valor -> STRING .)
    EQUALS          reduce using rule 42 (valor -> STRING .)
    NOTEQUALS       reduce using rule 42 (valor -> STRING .)
    GREATER         reduce using rule 42 (valor -> STRING .)
    LOWER           reduce using rule 42 (valor -> STRING .)
    FUNCTION        reduce using rule 42 (valor -> STRING .)
    ID              reduce using rule 42 (valor -> STRING .)
    IF              reduce using rule 42 (valor -> STRING .)
    ELSE            reduce using rule 42 (valor -> STRING .)
    PRINTLN         reduce using rule 42 (valor -> STRING .)
    VAR             reduce using rule 42 (valor -> STRING .)
    VAL             reduce using rule 42 (valor -> STRING .)
    WHILE           reduce using rule 42 (valor -> STRING .)
    FOR             reduce using rule 42 (valor -> STRING .)
    $end            reduce using rule 42 (valor -> STRING .)
    RCBRACKET       reduce using rule 42 (valor -> STRING .)
    RETURN          reduce using rule 42 (valor -> STRING .)
    RPAREN          reduce using rule 42 (valor -> STRING .)
    ,               reduce using rule 42 (valor -> STRING .)


state 43

    (43) valor -> TRUE .

    RSBRACKET       reduce using rule 43 (valor -> TRUE .)
    MINUS           reduce using rule 43 (valor -> TRUE .)
    PLUS            reduce using rule 43 (valor -> TRUE .)
    TIMES           reduce using rule 43 (valor -> TRUE .)
    DIVIDE          reduce using rule 43 (valor -> TRUE .)
    MODULE          reduce using rule 43 (valor -> TRUE .)
    OR              reduce using rule 43 (valor -> TRUE .)
    AND             reduce using rule 43 (valor -> TRUE .)
    EQUALS          reduce using rule 43 (valor -> TRUE .)
    NOTEQUALS       reduce using rule 43 (valor -> TRUE .)
    GREATER         reduce using rule 43 (valor -> TRUE .)
    LOWER           reduce using rule 43 (valor -> TRUE .)
    FUNCTION        reduce using rule 43 (valor -> TRUE .)
    ID              reduce using rule 43 (valor -> TRUE .)
    IF              reduce using rule 43 (valor -> TRUE .)
    ELSE            reduce using rule 43 (valor -> TRUE .)
    PRINTLN         reduce using rule 43 (valor -> TRUE .)
    VAR             reduce using rule 43 (valor -> TRUE .)
    VAL             reduce using rule 43 (valor -> TRUE .)
    WHILE           reduce using rule 43 (valor -> TRUE .)
    FOR             reduce using rule 43 (valor -> TRUE .)
    $end            reduce using rule 43 (valor -> TRUE .)
    RCBRACKET       reduce using rule 43 (valor -> TRUE .)
    RETURN          reduce using rule 43 (valor -> TRUE .)
    RPAREN          reduce using rule 43 (valor -> TRUE .)
    ,               reduce using rule 43 (valor -> TRUE .)


state 44

    (44) valor -> FALSE .

    RSBRACKET       reduce using rule 44 (valor -> FALSE .)
    MINUS           reduce using rule 44 (valor -> FALSE .)
    PLUS            reduce using rule 44 (valor -> FALSE .)
    TIMES           reduce using rule 44 (valor -> FALSE .)
    DIVIDE          reduce using rule 44 (valor -> FALSE .)
    MODULE          reduce using rule 44 (valor -> FALSE .)
    OR              reduce using rule 44 (valor -> FALSE .)
    AND             reduce using rule 44 (valor -> FALSE .)
    EQUALS          reduce using rule 44 (valor -> FALSE .)
    NOTEQUALS       reduce using rule 44 (valor -> FALSE .)
    GREATER         reduce using rule 44 (valor -> FALSE .)
    LOWER           reduce using rule 44 (valor -> FALSE .)
    FUNCTION        reduce using rule 44 (valor -> FALSE .)
    ID              reduce using rule 44 (valor -> FALSE .)
    IF              reduce using rule 44 (valor -> FALSE .)
    ELSE            reduce using rule 44 (valor -> FALSE .)
    PRINTLN         reduce using rule 44 (valor -> FALSE .)
    VAR             reduce using rule 44 (valor -> FALSE .)
    VAL             reduce using rule 44 (valor -> FALSE .)
    WHILE           reduce using rule 44 (valor -> FALSE .)
    FOR             reduce using rule 44 (valor -> FALSE .)
    $end            reduce using rule 44 (valor -> FALSE .)
    RCBRACKET       reduce using rule 44 (valor -> FALSE .)
    RETURN          reduce using rule 44 (valor -> FALSE .)
    RPAREN          reduce using rule 44 (valor -> FALSE .)
    ,               reduce using rule 44 (valor -> FALSE .)


state 45

    (45) valor -> NULL .

    RSBRACKET       reduce using rule 45 (valor -> NULL .)
    MINUS           reduce using rule 45 (valor -> NULL .)
    PLUS            reduce using rule 45 (valor -> NULL .)
    TIMES           reduce using rule 45 (valor -> NULL .)
    DIVIDE          reduce using rule 45 (valor -> NULL .)
    MODULE          reduce using rule 45 (valor -> NULL .)
    OR              reduce using rule 45 (valor -> NULL .)
    AND             reduce using rule 45 (valor -> NULL .)
    EQUALS          reduce using rule 45 (valor -> NULL .)
    NOTEQUALS       reduce using rule 45 (valor -> NULL .)
    GREATER         reduce using rule 45 (valor -> NULL .)
    LOWER           reduce using rule 45 (valor -> NULL .)
    FUNCTION        reduce using rule 45 (valor -> NULL .)
    ID              reduce using rule 45 (valor -> NULL .)
    IF              reduce using rule 45 (valor -> NULL .)
    ELSE            reduce using rule 45 (valor -> NULL .)
    PRINTLN         reduce using rule 45 (valor -> NULL .)
    VAR             reduce using rule 45 (valor -> NULL .)
    VAL             reduce using rule 45 (valor -> NULL .)
    WHILE           reduce using rule 45 (valor -> NULL .)
    FOR             reduce using rule 45 (valor -> NULL .)
    $end            reduce using rule 45 (valor -> NULL .)
    RCBRACKET       reduce using rule 45 (valor -> NULL .)
    RETURN          reduce using rule 45 (valor -> NULL .)
    RPAREN          reduce using rule 45 (valor -> NULL .)
    ,               reduce using rule 45 (valor -> NULL .)


state 46

    (46) valor -> NOT . valor
    (40) valor -> . ID
    (41) valor -> . number
    (42) valor -> . STRING
    (43) valor -> . TRUE
    (44) valor -> . FALSE
    (45) valor -> . NULL
    (46) valor -> . NOT valor
    (69) number -> . INTV
    (70) number -> . FLOATV

    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    valor                          shift and go to state 65
    number                         shift and go to state 41

state 47

    (69) number -> INTV .

    RSBRACKET       reduce using rule 69 (number -> INTV .)
    MINUS           reduce using rule 69 (number -> INTV .)
    PLUS            reduce using rule 69 (number -> INTV .)
    TIMES           reduce using rule 69 (number -> INTV .)
    DIVIDE          reduce using rule 69 (number -> INTV .)
    MODULE          reduce using rule 69 (number -> INTV .)
    OR              reduce using rule 69 (number -> INTV .)
    AND             reduce using rule 69 (number -> INTV .)
    EQUALS          reduce using rule 69 (number -> INTV .)
    NOTEQUALS       reduce using rule 69 (number -> INTV .)
    GREATER         reduce using rule 69 (number -> INTV .)
    LOWER           reduce using rule 69 (number -> INTV .)
    FUNCTION        reduce using rule 69 (number -> INTV .)
    ID              reduce using rule 69 (number -> INTV .)
    IF              reduce using rule 69 (number -> INTV .)
    ELSE            reduce using rule 69 (number -> INTV .)
    PRINTLN         reduce using rule 69 (number -> INTV .)
    VAR             reduce using rule 69 (number -> INTV .)
    VAL             reduce using rule 69 (number -> INTV .)
    WHILE           reduce using rule 69 (number -> INTV .)
    FOR             reduce using rule 69 (number -> INTV .)
    $end            reduce using rule 69 (number -> INTV .)
    RCBRACKET       reduce using rule 69 (number -> INTV .)
    RETURN          reduce using rule 69 (number -> INTV .)
    RPAREN          reduce using rule 69 (number -> INTV .)
    ,               reduce using rule 69 (number -> INTV .)


state 48

    (70) number -> FLOATV .

    RSBRACKET       reduce using rule 70 (number -> FLOATV .)
    MINUS           reduce using rule 70 (number -> FLOATV .)
    PLUS            reduce using rule 70 (number -> FLOATV .)
    TIMES           reduce using rule 70 (number -> FLOATV .)
    DIVIDE          reduce using rule 70 (number -> FLOATV .)
    MODULE          reduce using rule 70 (number -> FLOATV .)
    OR              reduce using rule 70 (number -> FLOATV .)
    AND             reduce using rule 70 (number -> FLOATV .)
    EQUALS          reduce using rule 70 (number -> FLOATV .)
    NOTEQUALS       reduce using rule 70 (number -> FLOATV .)
    GREATER         reduce using rule 70 (number -> FLOATV .)
    LOWER           reduce using rule 70 (number -> FLOATV .)
    FUNCTION        reduce using rule 70 (number -> FLOATV .)
    ID              reduce using rule 70 (number -> FLOATV .)
    IF              reduce using rule 70 (number -> FLOATV .)
    ELSE            reduce using rule 70 (number -> FLOATV .)
    PRINTLN         reduce using rule 70 (number -> FLOATV .)
    VAR             reduce using rule 70 (number -> FLOATV .)
    VAL             reduce using rule 70 (number -> FLOATV .)
    WHILE           reduce using rule 70 (number -> FLOATV .)
    FOR             reduce using rule 70 (number -> FLOATV .)
    $end            reduce using rule 70 (number -> FLOATV .)
    RCBRACKET       reduce using rule 70 (number -> FLOATV .)
    RETURN          reduce using rule 70 (number -> FLOATV .)
    RPAREN          reduce using rule 70 (number -> FLOATV .)
    ,               reduce using rule 70 (number -> FLOATV .)


state 49

    (49) asignacion -> ID ASSIGN expresion .
    (54) expresion -> expresion . operadoresMat expresion
    (55) expresion -> expresion . operadoresLog expresion
    (64) operadoresMat -> . MINUS
    (65) operadoresMat -> . PLUS
    (66) operadoresMat -> . TIMES
    (67) operadoresMat -> . DIVIDE
    (68) operadoresMat -> . MODULE
    (56) operadoresLog -> . OR
    (57) operadoresLog -> . AND
    (58) operadoresLog -> . EQUALS
    (59) operadoresLog -> . NOTEQUALS
    (60) operadoresLog -> . GREATER
    (61) operadoresLog -> . LOWER
    (62) operadoresLog -> . GREATER ASSIGN
    (63) operadoresLog -> . LOWER ASSIGN

    FUNCTION        reduce using rule 49 (asignacion -> ID ASSIGN expresion .)
    ID              reduce using rule 49 (asignacion -> ID ASSIGN expresion .)
    IF              reduce using rule 49 (asignacion -> ID ASSIGN expresion .)
    ELSE            reduce using rule 49 (asignacion -> ID ASSIGN expresion .)
    PRINTLN         reduce using rule 49 (asignacion -> ID ASSIGN expresion .)
    VAR             reduce using rule 49 (asignacion -> ID ASSIGN expresion .)
    VAL             reduce using rule 49 (asignacion -> ID ASSIGN expresion .)
    WHILE           reduce using rule 49 (asignacion -> ID ASSIGN expresion .)
    FOR             reduce using rule 49 (asignacion -> ID ASSIGN expresion .)
    $end            reduce using rule 49 (asignacion -> ID ASSIGN expresion .)
    RCBRACKET       reduce using rule 49 (asignacion -> ID ASSIGN expresion .)
    RETURN          reduce using rule 49 (asignacion -> ID ASSIGN expresion .)
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULE          shift and go to state 72
    OR              shift and go to state 73
    AND             shift and go to state 74
    EQUALS          shift and go to state 75
    NOTEQUALS       shift and go to state 76
    GREATER         shift and go to state 77
    LOWER           shift and go to state 78

    operadoresMat                  shift and go to state 66
    operadoresLog                  shift and go to state 67

state 50

    (52) expresion -> LPAREN . expresion RPAREN
    (52) expresion -> . LPAREN expresion RPAREN
    (53) expresion -> . valor
    (54) expresion -> . expresion operadoresMat expresion
    (55) expresion -> . expresion operadoresLog expresion
    (40) valor -> . ID
    (41) valor -> . number
    (42) valor -> . STRING
    (43) valor -> . TRUE
    (44) valor -> . FALSE
    (45) valor -> . NULL
    (46) valor -> . NOT valor
    (69) number -> . INTV
    (70) number -> . FLOATV

    LPAREN          shift and go to state 50
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    expresion                      shift and go to state 79
    valor                          shift and go to state 51
    number                         shift and go to state 41

state 51

    (53) expresion -> valor .

    MINUS           reduce using rule 53 (expresion -> valor .)
    PLUS            reduce using rule 53 (expresion -> valor .)
    TIMES           reduce using rule 53 (expresion -> valor .)
    DIVIDE          reduce using rule 53 (expresion -> valor .)
    MODULE          reduce using rule 53 (expresion -> valor .)
    OR              reduce using rule 53 (expresion -> valor .)
    AND             reduce using rule 53 (expresion -> valor .)
    EQUALS          reduce using rule 53 (expresion -> valor .)
    NOTEQUALS       reduce using rule 53 (expresion -> valor .)
    GREATER         reduce using rule 53 (expresion -> valor .)
    LOWER           reduce using rule 53 (expresion -> valor .)
    FUNCTION        reduce using rule 53 (expresion -> valor .)
    ID              reduce using rule 53 (expresion -> valor .)
    IF              reduce using rule 53 (expresion -> valor .)
    ELSE            reduce using rule 53 (expresion -> valor .)
    PRINTLN         reduce using rule 53 (expresion -> valor .)
    VAR             reduce using rule 53 (expresion -> valor .)
    VAL             reduce using rule 53 (expresion -> valor .)
    WHILE           reduce using rule 53 (expresion -> valor .)
    FOR             reduce using rule 53 (expresion -> valor .)
    $end            reduce using rule 53 (expresion -> valor .)
    RCBRACKET       reduce using rule 53 (expresion -> valor .)
    RETURN          reduce using rule 53 (expresion -> valor .)
    RPAREN          reduce using rule 53 (expresion -> valor .)


state 52

    (24) llamada -> ID LPAREN args . RPAREN
    (39) args -> args . , args

    RPAREN          shift and go to state 80
    ,               shift and go to state 81


state 53

    (25) llamada -> ID LPAREN RPAREN .

    FUNCTION        reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    ID              reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    IF              reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    PRINTLN         reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    VAR             reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    VAL             reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    FOR             reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    $end            reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    RCBRACKET       reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 25 (llamada -> ID LPAREN RPAREN .)


state 54

    (38) args -> valor .

    RPAREN          reduce using rule 38 (args -> valor .)
    ,               reduce using rule 38 (args -> valor .)


state 55

    (50) asignacion -> declarador ID ASSIGN . expresion
    (52) expresion -> . LPAREN expresion RPAREN
    (53) expresion -> . valor
    (54) expresion -> . expresion operadoresMat expresion
    (55) expresion -> . expresion operadoresLog expresion
    (40) valor -> . ID
    (41) valor -> . number
    (42) valor -> . STRING
    (43) valor -> . TRUE
    (44) valor -> . FALSE
    (45) valor -> . NULL
    (46) valor -> . NOT valor
    (69) number -> . INTV
    (70) number -> . FLOATV

    LPAREN          shift and go to state 50
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    expresion                      shift and go to state 82
    valor                          shift and go to state 51
    number                         shift and go to state 41

state 56

    (15) estructuraControl -> IF LPAREN expresion . RPAREN instrucciones
    (54) expresion -> expresion . operadoresMat expresion
    (55) expresion -> expresion . operadoresLog expresion
    (64) operadoresMat -> . MINUS
    (65) operadoresMat -> . PLUS
    (66) operadoresMat -> . TIMES
    (67) operadoresMat -> . DIVIDE
    (68) operadoresMat -> . MODULE
    (56) operadoresLog -> . OR
    (57) operadoresLog -> . AND
    (58) operadoresLog -> . EQUALS
    (59) operadoresLog -> . NOTEQUALS
    (60) operadoresLog -> . GREATER
    (61) operadoresLog -> . LOWER
    (62) operadoresLog -> . GREATER ASSIGN
    (63) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 83
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULE          shift and go to state 72
    OR              shift and go to state 73
    AND             shift and go to state 74
    EQUALS          shift and go to state 75
    NOTEQUALS       shift and go to state 76
    GREATER         shift and go to state 77
    LOWER           shift and go to state 78

    operadoresMat                  shift and go to state 66
    operadoresLog                  shift and go to state 67

state 57

    (10) instrucciones -> LCBRACKET cuerpo . RCBRACKET

    RCBRACKET       shift and go to state 84


state 58

    (23) llamada -> PRINTLN LPAREN expresion . RPAREN
    (54) expresion -> expresion . operadoresMat expresion
    (55) expresion -> expresion . operadoresLog expresion
    (64) operadoresMat -> . MINUS
    (65) operadoresMat -> . PLUS
    (66) operadoresMat -> . TIMES
    (67) operadoresMat -> . DIVIDE
    (68) operadoresMat -> . MODULE
    (56) operadoresLog -> . OR
    (57) operadoresLog -> . AND
    (58) operadoresLog -> . EQUALS
    (59) operadoresLog -> . NOTEQUALS
    (60) operadoresLog -> . GREATER
    (61) operadoresLog -> . LOWER
    (62) operadoresLog -> . GREATER ASSIGN
    (63) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 85
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULE          shift and go to state 72
    OR              shift and go to state 73
    AND             shift and go to state 74
    EQUALS          shift and go to state 75
    NOTEQUALS       shift and go to state 76
    GREATER         shift and go to state 77
    LOWER           shift and go to state 78

    operadoresMat                  shift and go to state 66
    operadoresLog                  shift and go to state 67

state 59

    (19) while -> WHILE LPAREN expresion . RPAREN
    (54) expresion -> expresion . operadoresMat expresion
    (55) expresion -> expresion . operadoresLog expresion
    (64) operadoresMat -> . MINUS
    (65) operadoresMat -> . PLUS
    (66) operadoresMat -> . TIMES
    (67) operadoresMat -> . DIVIDE
    (68) operadoresMat -> . MODULE
    (56) operadoresLog -> . OR
    (57) operadoresLog -> . AND
    (58) operadoresLog -> . EQUALS
    (59) operadoresLog -> . NOTEQUALS
    (60) operadoresLog -> . GREATER
    (61) operadoresLog -> . LOWER
    (62) operadoresLog -> . GREATER ASSIGN
    (63) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 86
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULE          shift and go to state 72
    OR              shift and go to state 73
    AND             shift and go to state 74
    EQUALS          shift and go to state 75
    NOTEQUALS       shift and go to state 76
    GREATER         shift and go to state 77
    LOWER           shift and go to state 78

    operadoresMat                  shift and go to state 66
    operadoresLog                  shift and go to state 67

state 60

    (20) for -> FOR LPAREN ID . IN ID RPAREN

    IN              shift and go to state 87


state 61

    (36) params -> ID . : dato

    :               shift and go to state 88


state 62

    (21) function -> FUNCTION ID LPAREN params . RPAREN instruccionesF
    (37) params -> params . , params

    RPAREN          shift and go to state 89
    ,               shift and go to state 90


state 63

    (22) function -> FUNCTION ID LPAREN RPAREN . instruccionesF
    (12) instruccionesF -> . LCBRACKET cuerpo retorno RCBRACKET
    (13) instruccionesF -> . LCBRACKET retorno RCBRACKET

    LCBRACKET       shift and go to state 92

    instruccionesF                 shift and go to state 91

state 64

    (26) function -> ID LSBRACKET valor RSBRACKET .

    FUNCTION        reduce using rule 26 (function -> ID LSBRACKET valor RSBRACKET .)
    ID              reduce using rule 26 (function -> ID LSBRACKET valor RSBRACKET .)
    IF              reduce using rule 26 (function -> ID LSBRACKET valor RSBRACKET .)
    ELSE            reduce using rule 26 (function -> ID LSBRACKET valor RSBRACKET .)
    PRINTLN         reduce using rule 26 (function -> ID LSBRACKET valor RSBRACKET .)
    VAR             reduce using rule 26 (function -> ID LSBRACKET valor RSBRACKET .)
    VAL             reduce using rule 26 (function -> ID LSBRACKET valor RSBRACKET .)
    WHILE           reduce using rule 26 (function -> ID LSBRACKET valor RSBRACKET .)
    FOR             reduce using rule 26 (function -> ID LSBRACKET valor RSBRACKET .)
    $end            reduce using rule 26 (function -> ID LSBRACKET valor RSBRACKET .)
    RCBRACKET       reduce using rule 26 (function -> ID LSBRACKET valor RSBRACKET .)
    RETURN          reduce using rule 26 (function -> ID LSBRACKET valor RSBRACKET .)


state 65

    (46) valor -> NOT valor .

    RSBRACKET       reduce using rule 46 (valor -> NOT valor .)
    MINUS           reduce using rule 46 (valor -> NOT valor .)
    PLUS            reduce using rule 46 (valor -> NOT valor .)
    TIMES           reduce using rule 46 (valor -> NOT valor .)
    DIVIDE          reduce using rule 46 (valor -> NOT valor .)
    MODULE          reduce using rule 46 (valor -> NOT valor .)
    OR              reduce using rule 46 (valor -> NOT valor .)
    AND             reduce using rule 46 (valor -> NOT valor .)
    EQUALS          reduce using rule 46 (valor -> NOT valor .)
    NOTEQUALS       reduce using rule 46 (valor -> NOT valor .)
    GREATER         reduce using rule 46 (valor -> NOT valor .)
    LOWER           reduce using rule 46 (valor -> NOT valor .)
    FUNCTION        reduce using rule 46 (valor -> NOT valor .)
    ID              reduce using rule 46 (valor -> NOT valor .)
    IF              reduce using rule 46 (valor -> NOT valor .)
    ELSE            reduce using rule 46 (valor -> NOT valor .)
    PRINTLN         reduce using rule 46 (valor -> NOT valor .)
    VAR             reduce using rule 46 (valor -> NOT valor .)
    VAL             reduce using rule 46 (valor -> NOT valor .)
    WHILE           reduce using rule 46 (valor -> NOT valor .)
    FOR             reduce using rule 46 (valor -> NOT valor .)
    $end            reduce using rule 46 (valor -> NOT valor .)
    RCBRACKET       reduce using rule 46 (valor -> NOT valor .)
    RETURN          reduce using rule 46 (valor -> NOT valor .)
    RPAREN          reduce using rule 46 (valor -> NOT valor .)
    ,               reduce using rule 46 (valor -> NOT valor .)


state 66

    (54) expresion -> expresion operadoresMat . expresion
    (52) expresion -> . LPAREN expresion RPAREN
    (53) expresion -> . valor
    (54) expresion -> . expresion operadoresMat expresion
    (55) expresion -> . expresion operadoresLog expresion
    (40) valor -> . ID
    (41) valor -> . number
    (42) valor -> . STRING
    (43) valor -> . TRUE
    (44) valor -> . FALSE
    (45) valor -> . NULL
    (46) valor -> . NOT valor
    (69) number -> . INTV
    (70) number -> . FLOATV

    LPAREN          shift and go to state 50
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    expresion                      shift and go to state 93
    valor                          shift and go to state 51
    number                         shift and go to state 41

state 67

    (55) expresion -> expresion operadoresLog . expresion
    (52) expresion -> . LPAREN expresion RPAREN
    (53) expresion -> . valor
    (54) expresion -> . expresion operadoresMat expresion
    (55) expresion -> . expresion operadoresLog expresion
    (40) valor -> . ID
    (41) valor -> . number
    (42) valor -> . STRING
    (43) valor -> . TRUE
    (44) valor -> . FALSE
    (45) valor -> . NULL
    (46) valor -> . NOT valor
    (69) number -> . INTV
    (70) number -> . FLOATV

    LPAREN          shift and go to state 50
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    expresion                      shift and go to state 94
    valor                          shift and go to state 51
    number                         shift and go to state 41

state 68

    (64) operadoresMat -> MINUS .

    LPAREN          reduce using rule 64 (operadoresMat -> MINUS .)
    ID              reduce using rule 64 (operadoresMat -> MINUS .)
    STRING          reduce using rule 64 (operadoresMat -> MINUS .)
    TRUE            reduce using rule 64 (operadoresMat -> MINUS .)
    FALSE           reduce using rule 64 (operadoresMat -> MINUS .)
    NULL            reduce using rule 64 (operadoresMat -> MINUS .)
    NOT             reduce using rule 64 (operadoresMat -> MINUS .)
    INTV            reduce using rule 64 (operadoresMat -> MINUS .)
    FLOATV          reduce using rule 64 (operadoresMat -> MINUS .)


state 69

    (65) operadoresMat -> PLUS .

    LPAREN          reduce using rule 65 (operadoresMat -> PLUS .)
    ID              reduce using rule 65 (operadoresMat -> PLUS .)
    STRING          reduce using rule 65 (operadoresMat -> PLUS .)
    TRUE            reduce using rule 65 (operadoresMat -> PLUS .)
    FALSE           reduce using rule 65 (operadoresMat -> PLUS .)
    NULL            reduce using rule 65 (operadoresMat -> PLUS .)
    NOT             reduce using rule 65 (operadoresMat -> PLUS .)
    INTV            reduce using rule 65 (operadoresMat -> PLUS .)
    FLOATV          reduce using rule 65 (operadoresMat -> PLUS .)


state 70

    (66) operadoresMat -> TIMES .

    LPAREN          reduce using rule 66 (operadoresMat -> TIMES .)
    ID              reduce using rule 66 (operadoresMat -> TIMES .)
    STRING          reduce using rule 66 (operadoresMat -> TIMES .)
    TRUE            reduce using rule 66 (operadoresMat -> TIMES .)
    FALSE           reduce using rule 66 (operadoresMat -> TIMES .)
    NULL            reduce using rule 66 (operadoresMat -> TIMES .)
    NOT             reduce using rule 66 (operadoresMat -> TIMES .)
    INTV            reduce using rule 66 (operadoresMat -> TIMES .)
    FLOATV          reduce using rule 66 (operadoresMat -> TIMES .)


state 71

    (67) operadoresMat -> DIVIDE .

    LPAREN          reduce using rule 67 (operadoresMat -> DIVIDE .)
    ID              reduce using rule 67 (operadoresMat -> DIVIDE .)
    STRING          reduce using rule 67 (operadoresMat -> DIVIDE .)
    TRUE            reduce using rule 67 (operadoresMat -> DIVIDE .)
    FALSE           reduce using rule 67 (operadoresMat -> DIVIDE .)
    NULL            reduce using rule 67 (operadoresMat -> DIVIDE .)
    NOT             reduce using rule 67 (operadoresMat -> DIVIDE .)
    INTV            reduce using rule 67 (operadoresMat -> DIVIDE .)
    FLOATV          reduce using rule 67 (operadoresMat -> DIVIDE .)


state 72

    (68) operadoresMat -> MODULE .

    LPAREN          reduce using rule 68 (operadoresMat -> MODULE .)
    ID              reduce using rule 68 (operadoresMat -> MODULE .)
    STRING          reduce using rule 68 (operadoresMat -> MODULE .)
    TRUE            reduce using rule 68 (operadoresMat -> MODULE .)
    FALSE           reduce using rule 68 (operadoresMat -> MODULE .)
    NULL            reduce using rule 68 (operadoresMat -> MODULE .)
    NOT             reduce using rule 68 (operadoresMat -> MODULE .)
    INTV            reduce using rule 68 (operadoresMat -> MODULE .)
    FLOATV          reduce using rule 68 (operadoresMat -> MODULE .)


state 73

    (56) operadoresLog -> OR .

    LPAREN          reduce using rule 56 (operadoresLog -> OR .)
    ID              reduce using rule 56 (operadoresLog -> OR .)
    STRING          reduce using rule 56 (operadoresLog -> OR .)
    TRUE            reduce using rule 56 (operadoresLog -> OR .)
    FALSE           reduce using rule 56 (operadoresLog -> OR .)
    NULL            reduce using rule 56 (operadoresLog -> OR .)
    NOT             reduce using rule 56 (operadoresLog -> OR .)
    INTV            reduce using rule 56 (operadoresLog -> OR .)
    FLOATV          reduce using rule 56 (operadoresLog -> OR .)


state 74

    (57) operadoresLog -> AND .

    LPAREN          reduce using rule 57 (operadoresLog -> AND .)
    ID              reduce using rule 57 (operadoresLog -> AND .)
    STRING          reduce using rule 57 (operadoresLog -> AND .)
    TRUE            reduce using rule 57 (operadoresLog -> AND .)
    FALSE           reduce using rule 57 (operadoresLog -> AND .)
    NULL            reduce using rule 57 (operadoresLog -> AND .)
    NOT             reduce using rule 57 (operadoresLog -> AND .)
    INTV            reduce using rule 57 (operadoresLog -> AND .)
    FLOATV          reduce using rule 57 (operadoresLog -> AND .)


state 75

    (58) operadoresLog -> EQUALS .

    LPAREN          reduce using rule 58 (operadoresLog -> EQUALS .)
    ID              reduce using rule 58 (operadoresLog -> EQUALS .)
    STRING          reduce using rule 58 (operadoresLog -> EQUALS .)
    TRUE            reduce using rule 58 (operadoresLog -> EQUALS .)
    FALSE           reduce using rule 58 (operadoresLog -> EQUALS .)
    NULL            reduce using rule 58 (operadoresLog -> EQUALS .)
    NOT             reduce using rule 58 (operadoresLog -> EQUALS .)
    INTV            reduce using rule 58 (operadoresLog -> EQUALS .)
    FLOATV          reduce using rule 58 (operadoresLog -> EQUALS .)


state 76

    (59) operadoresLog -> NOTEQUALS .

    LPAREN          reduce using rule 59 (operadoresLog -> NOTEQUALS .)
    ID              reduce using rule 59 (operadoresLog -> NOTEQUALS .)
    STRING          reduce using rule 59 (operadoresLog -> NOTEQUALS .)
    TRUE            reduce using rule 59 (operadoresLog -> NOTEQUALS .)
    FALSE           reduce using rule 59 (operadoresLog -> NOTEQUALS .)
    NULL            reduce using rule 59 (operadoresLog -> NOTEQUALS .)
    NOT             reduce using rule 59 (operadoresLog -> NOTEQUALS .)
    INTV            reduce using rule 59 (operadoresLog -> NOTEQUALS .)
    FLOATV          reduce using rule 59 (operadoresLog -> NOTEQUALS .)


state 77

    (60) operadoresLog -> GREATER .
    (62) operadoresLog -> GREATER . ASSIGN

    LPAREN          reduce using rule 60 (operadoresLog -> GREATER .)
    ID              reduce using rule 60 (operadoresLog -> GREATER .)
    STRING          reduce using rule 60 (operadoresLog -> GREATER .)
    TRUE            reduce using rule 60 (operadoresLog -> GREATER .)
    FALSE           reduce using rule 60 (operadoresLog -> GREATER .)
    NULL            reduce using rule 60 (operadoresLog -> GREATER .)
    NOT             reduce using rule 60 (operadoresLog -> GREATER .)
    INTV            reduce using rule 60 (operadoresLog -> GREATER .)
    FLOATV          reduce using rule 60 (operadoresLog -> GREATER .)
    ASSIGN          shift and go to state 95


state 78

    (61) operadoresLog -> LOWER .
    (63) operadoresLog -> LOWER . ASSIGN

    LPAREN          reduce using rule 61 (operadoresLog -> LOWER .)
    ID              reduce using rule 61 (operadoresLog -> LOWER .)
    STRING          reduce using rule 61 (operadoresLog -> LOWER .)
    TRUE            reduce using rule 61 (operadoresLog -> LOWER .)
    FALSE           reduce using rule 61 (operadoresLog -> LOWER .)
    NULL            reduce using rule 61 (operadoresLog -> LOWER .)
    NOT             reduce using rule 61 (operadoresLog -> LOWER .)
    INTV            reduce using rule 61 (operadoresLog -> LOWER .)
    FLOATV          reduce using rule 61 (operadoresLog -> LOWER .)
    ASSIGN          shift and go to state 96


state 79

    (52) expresion -> LPAREN expresion . RPAREN
    (54) expresion -> expresion . operadoresMat expresion
    (55) expresion -> expresion . operadoresLog expresion
    (64) operadoresMat -> . MINUS
    (65) operadoresMat -> . PLUS
    (66) operadoresMat -> . TIMES
    (67) operadoresMat -> . DIVIDE
    (68) operadoresMat -> . MODULE
    (56) operadoresLog -> . OR
    (57) operadoresLog -> . AND
    (58) operadoresLog -> . EQUALS
    (59) operadoresLog -> . NOTEQUALS
    (60) operadoresLog -> . GREATER
    (61) operadoresLog -> . LOWER
    (62) operadoresLog -> . GREATER ASSIGN
    (63) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 97
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULE          shift and go to state 72
    OR              shift and go to state 73
    AND             shift and go to state 74
    EQUALS          shift and go to state 75
    NOTEQUALS       shift and go to state 76
    GREATER         shift and go to state 77
    LOWER           shift and go to state 78

    operadoresMat                  shift and go to state 66
    operadoresLog                  shift and go to state 67

state 80

    (24) llamada -> ID LPAREN args RPAREN .

    FUNCTION        reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    ID              reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    IF              reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    ELSE            reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    PRINTLN         reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    VAR             reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    VAL             reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    WHILE           reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    FOR             reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    $end            reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    RCBRACKET       reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    RETURN          reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)


state 81

    (39) args -> args , . args
    (38) args -> . valor
    (39) args -> . args , args
    (40) valor -> . ID
    (41) valor -> . number
    (42) valor -> . STRING
    (43) valor -> . TRUE
    (44) valor -> . FALSE
    (45) valor -> . NULL
    (46) valor -> . NOT valor
    (69) number -> . INTV
    (70) number -> . FLOATV

    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    args                           shift and go to state 98
    valor                          shift and go to state 54
    number                         shift and go to state 41

state 82

    (50) asignacion -> declarador ID ASSIGN expresion .
    (54) expresion -> expresion . operadoresMat expresion
    (55) expresion -> expresion . operadoresLog expresion
    (64) operadoresMat -> . MINUS
    (65) operadoresMat -> . PLUS
    (66) operadoresMat -> . TIMES
    (67) operadoresMat -> . DIVIDE
    (68) operadoresMat -> . MODULE
    (56) operadoresLog -> . OR
    (57) operadoresLog -> . AND
    (58) operadoresLog -> . EQUALS
    (59) operadoresLog -> . NOTEQUALS
    (60) operadoresLog -> . GREATER
    (61) operadoresLog -> . LOWER
    (62) operadoresLog -> . GREATER ASSIGN
    (63) operadoresLog -> . LOWER ASSIGN

    FUNCTION        reduce using rule 50 (asignacion -> declarador ID ASSIGN expresion .)
    ID              reduce using rule 50 (asignacion -> declarador ID ASSIGN expresion .)
    IF              reduce using rule 50 (asignacion -> declarador ID ASSIGN expresion .)
    ELSE            reduce using rule 50 (asignacion -> declarador ID ASSIGN expresion .)
    PRINTLN         reduce using rule 50 (asignacion -> declarador ID ASSIGN expresion .)
    VAR             reduce using rule 50 (asignacion -> declarador ID ASSIGN expresion .)
    VAL             reduce using rule 50 (asignacion -> declarador ID ASSIGN expresion .)
    WHILE           reduce using rule 50 (asignacion -> declarador ID ASSIGN expresion .)
    FOR             reduce using rule 50 (asignacion -> declarador ID ASSIGN expresion .)
    $end            reduce using rule 50 (asignacion -> declarador ID ASSIGN expresion .)
    RCBRACKET       reduce using rule 50 (asignacion -> declarador ID ASSIGN expresion .)
    RETURN          reduce using rule 50 (asignacion -> declarador ID ASSIGN expresion .)
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULE          shift and go to state 72
    OR              shift and go to state 73
    AND             shift and go to state 74
    EQUALS          shift and go to state 75
    NOTEQUALS       shift and go to state 76
    GREATER         shift and go to state 77
    LOWER           shift and go to state 78

    operadoresMat                  shift and go to state 66
    operadoresLog                  shift and go to state 67

state 83

    (15) estructuraControl -> IF LPAREN expresion RPAREN . instrucciones
    (10) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (11) instrucciones -> . sentencia
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (49) asignacion -> . ID ASSIGN expresion
    (50) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (51) declaracion -> . declarador ID
    (47) declarador -> . VAR
    (48) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    LCBRACKET       shift and go to state 30
    ID              shift and go to state 32
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    instrucciones                  shift and go to state 99
    sentencia                      shift and go to state 31
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 84

    (10) instrucciones -> LCBRACKET cuerpo RCBRACKET .

    FUNCTION        reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    ID              reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    IF              reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    ELSE            reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    PRINTLN         reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    VAR             reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    VAL             reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    WHILE           reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    FOR             reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    $end            reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    RCBRACKET       reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    RETURN          reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)


state 85

    (23) llamada -> PRINTLN LPAREN expresion RPAREN .

    FUNCTION        reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    ID              reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    IF              reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    ELSE            reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    PRINTLN         reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    VAR             reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    VAL             reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    WHILE           reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    FOR             reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    $end            reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    RCBRACKET       reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    RETURN          reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)


state 86

    (19) while -> WHILE LPAREN expresion RPAREN .

    LCBRACKET       reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)
    ID              reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)
    IF              reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)
    ELSE            reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)
    PRINTLN         reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)
    VAR             reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)
    VAL             reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)
    WHILE           reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)
    FOR             reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)


state 87

    (20) for -> FOR LPAREN ID IN . ID RPAREN

    ID              shift and go to state 100


state 88

    (36) params -> ID : . dato
    (27) dato -> . INT
    (28) dato -> . FLOAT
    (29) dato -> . BYTE
    (30) dato -> . SHORT
    (31) dato -> . DOUBLE
    (32) dato -> . ID
    (33) dato -> . LONG
    (34) dato -> . CHAR
    (35) dato -> . BOOLEAN

    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    BYTE            shift and go to state 105
    SHORT           shift and go to state 106
    DOUBLE          shift and go to state 107
    ID              shift and go to state 101
    LONG            shift and go to state 108
    CHAR            shift and go to state 109
    BOOLEAN         shift and go to state 110

    dato                           shift and go to state 102

state 89

    (21) function -> FUNCTION ID LPAREN params RPAREN . instruccionesF
    (12) instruccionesF -> . LCBRACKET cuerpo retorno RCBRACKET
    (13) instruccionesF -> . LCBRACKET retorno RCBRACKET

    LCBRACKET       shift and go to state 92

    instruccionesF                 shift and go to state 111

state 90

    (37) params -> params , . params
    (36) params -> . ID : dato
    (37) params -> . params , params

    ID              shift and go to state 61

    params                         shift and go to state 112

state 91

    (22) function -> FUNCTION ID LPAREN RPAREN instruccionesF .

    FUNCTION        reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    ID              reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    IF              reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    ELSE            reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    PRINTLN         reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    VAR             reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    VAL             reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    WHILE           reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    FOR             reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    $end            reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    RCBRACKET       reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    RETURN          reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)


state 92

    (12) instruccionesF -> LCBRACKET . cuerpo retorno RCBRACKET
    (13) instruccionesF -> LCBRACKET . retorno RCBRACKET
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . function
    (3) cuerpo -> . sentencia cuerpo
    (4) cuerpo -> . function cuerpo
    (14) retorno -> . RETURN expresion
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (21) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (22) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (26) function -> . ID LSBRACKET valor RSBRACKET
    (49) asignacion -> . ID ASSIGN expresion
    (50) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (51) declaracion -> . declarador ID
    (47) declarador -> . VAR
    (48) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    RETURN          shift and go to state 115
    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    cuerpo                         shift and go to state 113
    retorno                        shift and go to state 114
    sentencia                      shift and go to state 2
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 93

    (54) expresion -> expresion operadoresMat expresion .
    (54) expresion -> expresion . operadoresMat expresion
    (55) expresion -> expresion . operadoresLog expresion
    (64) operadoresMat -> . MINUS
    (65) operadoresMat -> . PLUS
    (66) operadoresMat -> . TIMES
    (67) operadoresMat -> . DIVIDE
    (68) operadoresMat -> . MODULE
    (56) operadoresLog -> . OR
    (57) operadoresLog -> . AND
    (58) operadoresLog -> . EQUALS
    (59) operadoresLog -> . NOTEQUALS
    (60) operadoresLog -> . GREATER
    (61) operadoresLog -> . LOWER
    (62) operadoresLog -> . GREATER ASSIGN
    (63) operadoresLog -> . LOWER ASSIGN

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
    FUNCTION        reduce using rule 54 (expresion -> expresion operadoresMat expresion .)
    ID              reduce using rule 54 (expresion -> expresion operadoresMat expresion .)
    IF              reduce using rule 54 (expresion -> expresion operadoresMat expresion .)
    ELSE            reduce using rule 54 (expresion -> expresion operadoresMat expresion .)
    PRINTLN         reduce using rule 54 (expresion -> expresion operadoresMat expresion .)
    VAR             reduce using rule 54 (expresion -> expresion operadoresMat expresion .)
    VAL             reduce using rule 54 (expresion -> expresion operadoresMat expresion .)
    WHILE           reduce using rule 54 (expresion -> expresion operadoresMat expresion .)
    FOR             reduce using rule 54 (expresion -> expresion operadoresMat expresion .)
    $end            reduce using rule 54 (expresion -> expresion operadoresMat expresion .)
    RCBRACKET       reduce using rule 54 (expresion -> expresion operadoresMat expresion .)
    RETURN          reduce using rule 54 (expresion -> expresion operadoresMat expresion .)
    RPAREN          reduce using rule 54 (expresion -> expresion operadoresMat expresion .)
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULE          shift and go to state 72
    OR              shift and go to state 73
    AND             shift and go to state 74
    EQUALS          shift and go to state 75
    NOTEQUALS       shift and go to state 76
    GREATER         shift and go to state 77
    LOWER           shift and go to state 78

  ! MINUS           [ reduce using rule 54 (expresion -> expresion operadoresMat expresion .) ]
  ! PLUS            [ reduce using rule 54 (expresion -> expresion operadoresMat expresion .) ]
  ! TIMES           [ reduce using rule 54 (expresion -> expresion operadoresMat expresion .) ]
  ! DIVIDE          [ reduce using rule 54 (expresion -> expresion operadoresMat expresion .) ]
  ! MODULE          [ reduce using rule 54 (expresion -> expresion operadoresMat expresion .) ]
  ! OR              [ reduce using rule 54 (expresion -> expresion operadoresMat expresion .) ]
  ! AND             [ reduce using rule 54 (expresion -> expresion operadoresMat expresion .) ]
  ! EQUALS          [ reduce using rule 54 (expresion -> expresion operadoresMat expresion .) ]
  ! NOTEQUALS       [ reduce using rule 54 (expresion -> expresion operadoresMat expresion .) ]
  ! GREATER         [ reduce using rule 54 (expresion -> expresion operadoresMat expresion .) ]
  ! LOWER           [ reduce using rule 54 (expresion -> expresion operadoresMat expresion .) ]

    operadoresMat                  shift and go to state 66
    operadoresLog                  shift and go to state 67

state 94

    (55) expresion -> expresion operadoresLog expresion .
    (54) expresion -> expresion . operadoresMat expresion
    (55) expresion -> expresion . operadoresLog expresion
    (64) operadoresMat -> . MINUS
    (65) operadoresMat -> . PLUS
    (66) operadoresMat -> . TIMES
    (67) operadoresMat -> . DIVIDE
    (68) operadoresMat -> . MODULE
    (56) operadoresLog -> . OR
    (57) operadoresLog -> . AND
    (58) operadoresLog -> . EQUALS
    (59) operadoresLog -> . NOTEQUALS
    (60) operadoresLog -> . GREATER
    (61) operadoresLog -> . LOWER
    (62) operadoresLog -> . GREATER ASSIGN
    (63) operadoresLog -> . LOWER ASSIGN

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
    FUNCTION        reduce using rule 55 (expresion -> expresion operadoresLog expresion .)
    ID              reduce using rule 55 (expresion -> expresion operadoresLog expresion .)
    IF              reduce using rule 55 (expresion -> expresion operadoresLog expresion .)
    ELSE            reduce using rule 55 (expresion -> expresion operadoresLog expresion .)
    PRINTLN         reduce using rule 55 (expresion -> expresion operadoresLog expresion .)
    VAR             reduce using rule 55 (expresion -> expresion operadoresLog expresion .)
    VAL             reduce using rule 55 (expresion -> expresion operadoresLog expresion .)
    WHILE           reduce using rule 55 (expresion -> expresion operadoresLog expresion .)
    FOR             reduce using rule 55 (expresion -> expresion operadoresLog expresion .)
    $end            reduce using rule 55 (expresion -> expresion operadoresLog expresion .)
    RCBRACKET       reduce using rule 55 (expresion -> expresion operadoresLog expresion .)
    RETURN          reduce using rule 55 (expresion -> expresion operadoresLog expresion .)
    RPAREN          reduce using rule 55 (expresion -> expresion operadoresLog expresion .)
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULE          shift and go to state 72
    OR              shift and go to state 73
    AND             shift and go to state 74
    EQUALS          shift and go to state 75
    NOTEQUALS       shift and go to state 76
    GREATER         shift and go to state 77
    LOWER           shift and go to state 78

  ! MINUS           [ reduce using rule 55 (expresion -> expresion operadoresLog expresion .) ]
  ! PLUS            [ reduce using rule 55 (expresion -> expresion operadoresLog expresion .) ]
  ! TIMES           [ reduce using rule 55 (expresion -> expresion operadoresLog expresion .) ]
  ! DIVIDE          [ reduce using rule 55 (expresion -> expresion operadoresLog expresion .) ]
  ! MODULE          [ reduce using rule 55 (expresion -> expresion operadoresLog expresion .) ]
  ! OR              [ reduce using rule 55 (expresion -> expresion operadoresLog expresion .) ]
  ! AND             [ reduce using rule 55 (expresion -> expresion operadoresLog expresion .) ]
  ! EQUALS          [ reduce using rule 55 (expresion -> expresion operadoresLog expresion .) ]
  ! NOTEQUALS       [ reduce using rule 55 (expresion -> expresion operadoresLog expresion .) ]
  ! GREATER         [ reduce using rule 55 (expresion -> expresion operadoresLog expresion .) ]
  ! LOWER           [ reduce using rule 55 (expresion -> expresion operadoresLog expresion .) ]

    operadoresLog                  shift and go to state 67
    operadoresMat                  shift and go to state 66

state 95

    (62) operadoresLog -> GREATER ASSIGN .

    LPAREN          reduce using rule 62 (operadoresLog -> GREATER ASSIGN .)
    ID              reduce using rule 62 (operadoresLog -> GREATER ASSIGN .)
    STRING          reduce using rule 62 (operadoresLog -> GREATER ASSIGN .)
    TRUE            reduce using rule 62 (operadoresLog -> GREATER ASSIGN .)
    FALSE           reduce using rule 62 (operadoresLog -> GREATER ASSIGN .)
    NULL            reduce using rule 62 (operadoresLog -> GREATER ASSIGN .)
    NOT             reduce using rule 62 (operadoresLog -> GREATER ASSIGN .)
    INTV            reduce using rule 62 (operadoresLog -> GREATER ASSIGN .)
    FLOATV          reduce using rule 62 (operadoresLog -> GREATER ASSIGN .)


state 96

    (63) operadoresLog -> LOWER ASSIGN .

    LPAREN          reduce using rule 63 (operadoresLog -> LOWER ASSIGN .)
    ID              reduce using rule 63 (operadoresLog -> LOWER ASSIGN .)
    STRING          reduce using rule 63 (operadoresLog -> LOWER ASSIGN .)
    TRUE            reduce using rule 63 (operadoresLog -> LOWER ASSIGN .)
    FALSE           reduce using rule 63 (operadoresLog -> LOWER ASSIGN .)
    NULL            reduce using rule 63 (operadoresLog -> LOWER ASSIGN .)
    NOT             reduce using rule 63 (operadoresLog -> LOWER ASSIGN .)
    INTV            reduce using rule 63 (operadoresLog -> LOWER ASSIGN .)
    FLOATV          reduce using rule 63 (operadoresLog -> LOWER ASSIGN .)


state 97

    (52) expresion -> LPAREN expresion RPAREN .

    MINUS           reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    TIMES           reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    MODULE          reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    OR              reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    AND             reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    EQUALS          reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    NOTEQUALS       reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    GREATER         reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    LOWER           reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    FUNCTION        reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    ID              reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    IF              reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    ELSE            reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    PRINTLN         reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    VAR             reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    VAL             reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    WHILE           reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    FOR             reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    $end            reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    RCBRACKET       reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    RETURN          reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 52 (expresion -> LPAREN expresion RPAREN .)


state 98

    (39) args -> args , args .
    (39) args -> args . , args

  ! shift/reduce conflict for , resolved as shift
    RPAREN          reduce using rule 39 (args -> args , args .)
    ,               shift and go to state 81

  ! ,               [ reduce using rule 39 (args -> args , args .) ]


state 99

    (15) estructuraControl -> IF LPAREN expresion RPAREN instrucciones .

    FUNCTION        reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    ID              reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    IF              reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    ELSE            reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    PRINTLN         reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    VAR             reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    VAL             reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    WHILE           reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    FOR             reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    $end            reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    RCBRACKET       reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    RETURN          reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)


state 100

    (20) for -> FOR LPAREN ID IN ID . RPAREN

    RPAREN          shift and go to state 116


state 101

    (32) dato -> ID .

    RPAREN          reduce using rule 32 (dato -> ID .)
    ,               reduce using rule 32 (dato -> ID .)


state 102

    (36) params -> ID : dato .

    RPAREN          reduce using rule 36 (params -> ID : dato .)
    ,               reduce using rule 36 (params -> ID : dato .)


state 103

    (27) dato -> INT .

    RPAREN          reduce using rule 27 (dato -> INT .)
    ,               reduce using rule 27 (dato -> INT .)


state 104

    (28) dato -> FLOAT .

    RPAREN          reduce using rule 28 (dato -> FLOAT .)
    ,               reduce using rule 28 (dato -> FLOAT .)


state 105

    (29) dato -> BYTE .

    RPAREN          reduce using rule 29 (dato -> BYTE .)
    ,               reduce using rule 29 (dato -> BYTE .)


state 106

    (30) dato -> SHORT .

    RPAREN          reduce using rule 30 (dato -> SHORT .)
    ,               reduce using rule 30 (dato -> SHORT .)


state 107

    (31) dato -> DOUBLE .

    RPAREN          reduce using rule 31 (dato -> DOUBLE .)
    ,               reduce using rule 31 (dato -> DOUBLE .)


state 108

    (33) dato -> LONG .

    RPAREN          reduce using rule 33 (dato -> LONG .)
    ,               reduce using rule 33 (dato -> LONG .)


state 109

    (34) dato -> CHAR .

    RPAREN          reduce using rule 34 (dato -> CHAR .)
    ,               reduce using rule 34 (dato -> CHAR .)


state 110

    (35) dato -> BOOLEAN .

    RPAREN          reduce using rule 35 (dato -> BOOLEAN .)
    ,               reduce using rule 35 (dato -> BOOLEAN .)


state 111

    (21) function -> FUNCTION ID LPAREN params RPAREN instruccionesF .

    FUNCTION        reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    ID              reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    IF              reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    ELSE            reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    PRINTLN         reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    VAR             reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    VAL             reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    WHILE           reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    FOR             reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    $end            reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    RCBRACKET       reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    RETURN          reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)


state 112

    (37) params -> params , params .
    (37) params -> params . , params

  ! shift/reduce conflict for , resolved as shift
    RPAREN          reduce using rule 37 (params -> params , params .)
    ,               shift and go to state 90

  ! ,               [ reduce using rule 37 (params -> params , params .) ]


state 113

    (12) instruccionesF -> LCBRACKET cuerpo . retorno RCBRACKET
    (14) retorno -> . RETURN expresion

    RETURN          shift and go to state 115

    retorno                        shift and go to state 117

state 114

    (13) instruccionesF -> LCBRACKET retorno . RCBRACKET

    RCBRACKET       shift and go to state 118


state 115

    (14) retorno -> RETURN . expresion
    (52) expresion -> . LPAREN expresion RPAREN
    (53) expresion -> . valor
    (54) expresion -> . expresion operadoresMat expresion
    (55) expresion -> . expresion operadoresLog expresion
    (40) valor -> . ID
    (41) valor -> . number
    (42) valor -> . STRING
    (43) valor -> . TRUE
    (44) valor -> . FALSE
    (45) valor -> . NULL
    (46) valor -> . NOT valor
    (69) number -> . INTV
    (70) number -> . FLOATV

    LPAREN          shift and go to state 50
    ID              shift and go to state 39
    STRING          shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    NULL            shift and go to state 45
    NOT             shift and go to state 46
    INTV            shift and go to state 47
    FLOATV          shift and go to state 48

    expresion                      shift and go to state 119
    valor                          shift and go to state 51
    number                         shift and go to state 41

state 116

    (20) for -> FOR LPAREN ID IN ID RPAREN .

    LCBRACKET       reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)
    ID              reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)
    IF              reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)
    ELSE            reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)
    PRINTLN         reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)
    VAR             reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)
    VAL             reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)
    WHILE           reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)
    FOR             reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)


state 117

    (12) instruccionesF -> LCBRACKET cuerpo retorno . RCBRACKET

    RCBRACKET       shift and go to state 120


state 118

    (13) instruccionesF -> LCBRACKET retorno RCBRACKET .

    FUNCTION        reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    ID              reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    IF              reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    ELSE            reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    PRINTLN         reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    VAR             reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    VAL             reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    WHILE           reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    FOR             reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    $end            reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    RCBRACKET       reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    RETURN          reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)


state 119

    (14) retorno -> RETURN expresion .
    (54) expresion -> expresion . operadoresMat expresion
    (55) expresion -> expresion . operadoresLog expresion
    (64) operadoresMat -> . MINUS
    (65) operadoresMat -> . PLUS
    (66) operadoresMat -> . TIMES
    (67) operadoresMat -> . DIVIDE
    (68) operadoresMat -> . MODULE
    (56) operadoresLog -> . OR
    (57) operadoresLog -> . AND
    (58) operadoresLog -> . EQUALS
    (59) operadoresLog -> . NOTEQUALS
    (60) operadoresLog -> . GREATER
    (61) operadoresLog -> . LOWER
    (62) operadoresLog -> . GREATER ASSIGN
    (63) operadoresLog -> . LOWER ASSIGN

    RCBRACKET       reduce using rule 14 (retorno -> RETURN expresion .)
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MODULE          shift and go to state 72
    OR              shift and go to state 73
    AND             shift and go to state 74
    EQUALS          shift and go to state 75
    NOTEQUALS       shift and go to state 76
    GREATER         shift and go to state 77
    LOWER           shift and go to state 78

    operadoresMat                  shift and go to state 66
    operadoresLog                  shift and go to state 67

state 120

    (12) instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .

    FUNCTION        reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    ID              reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    IF              reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    ELSE            reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    PRINTLN         reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    VAR             reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    VAL             reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    WHILE           reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    FOR             reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    $end            reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    RCBRACKET       reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    RETURN          reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 93 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 93 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 93 resolved as shift
WARNING: shift/reduce conflict for OR in state 93 resolved as shift
WARNING: shift/reduce conflict for AND in state 93 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 93 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 93 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 93 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 94 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 94 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 94 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 94 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 94 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 94 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 94 resolved as shift
WARNING: shift/reduce conflict for , in state 98 resolved as shift
WARNING: shift/reduce conflict for , in state 112 resolved as shift
