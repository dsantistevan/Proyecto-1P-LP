Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> sentencia
Rule 2     cuerpo -> function
Rule 3     cuerpo -> sentencia cuerpo
Rule 4     cuerpo -> function cuerpo
Rule 5     sentencia -> asignacion
Rule 6     sentencia -> estructuraControl
Rule 7     sentencia -> bucles
Rule 8     sentencia -> llamada
Rule 9     sentencia -> declaracion
Rule 10    instrucciones -> LCBRACKET cuerpo RCBRACKET
Rule 11    instrucciones -> sentencia
Rule 12    instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET
Rule 13    instruccionesF -> LCBRACKET retorno RCBRACKET
Rule 14    retorno -> RETURN expresion
Rule 15    estructuraControl -> IF LPAREN expresion RPAREN instrucciones
Rule 16    estructuraControl -> ELSE instrucciones
Rule 17    bucles -> while instrucciones
Rule 18    bucles -> for instrucciones
Rule 19    while -> WHILE LPAREN expresion RPAREN
Rule 20    for -> FOR LPAREN ID IN ID RPAREN
Rule 21    function -> FUNCTION ID LPAREN params RPAREN instruccionesF
Rule 22    function -> FUNCTION ID LPAREN RPAREN instruccionesF
Rule 23    llamada -> PRINTLN LPAREN expresion RPAREN
Rule 24    llamada -> ID LPAREN args RPAREN
Rule 25    llamada -> ID LPAREN RPAREN
Rule 26    llamada -> ID . ID LPAREN args RPAREN
Rule 27    function -> ID LSBRACKET expresion RSBRACKET
Rule 28    dato -> INT
Rule 29    dato -> FLOAT
Rule 30    dato -> BYTE
Rule 31    dato -> SHORT
Rule 32    dato -> DOUBLE
Rule 33    dato -> ID
Rule 34    dato -> LONG
Rule 35    dato -> CHAR
Rule 36    dato -> BOOLEAN
Rule 37    params -> ID : dato
Rule 38    params -> params , params
Rule 39    args -> expresion
Rule 40    args -> args , args
Rule 41    valor -> ID
Rule 42    valor -> number
Rule 43    valor -> STRING
Rule 44    valor -> TRUE
Rule 45    valor -> FALSE
Rule 46    valor -> NULL
Rule 47    valor -> NOT valor
Rule 48    declarador -> VAR
Rule 49    declarador -> VAL
Rule 50    asignacion -> ID ASSIGN expresion
Rule 51    asignacion -> declarador ID ASSIGN expresion
Rule 52    declaracion -> declarador ID
Rule 53    expresion -> LPAREN expresion RPAREN
Rule 54    expresion -> valor
Rule 55    expresion -> expresion operadoresMat expresion
Rule 56    expresion -> expresion operadoresLog expresion
Rule 57    operadoresLog -> OR
Rule 58    operadoresLog -> AND
Rule 59    operadoresLog -> EQUALS
Rule 60    operadoresLog -> NOTEQUALS
Rule 61    operadoresLog -> GREATER
Rule 62    operadoresLog -> LOWER
Rule 63    operadoresLog -> GREATER ASSIGN
Rule 64    operadoresLog -> LOWER ASSIGN
Rule 65    operadoresMat -> MINUS
Rule 66    operadoresMat -> PLUS
Rule 67    operadoresMat -> TIMES
Rule 68    operadoresMat -> DIVIDE
Rule 69    operadoresMat -> MODULE
Rule 70    number -> INTV
Rule 71    number -> FLOATV

Terminals, with rules where they appear

,                    : 38 40
.                    : 26
:                    : 37
AND                  : 58
ASSIGN               : 50 51 63 64
BOOLEAN              : 36
BYTE                 : 30
CHAR                 : 35
DIVIDE               : 68
DOUBLE               : 32
ELSE                 : 16
EQUALS               : 59
FALSE                : 45
FLOAT                : 29
FLOATV               : 71
FOR                  : 20
FUNCTION             : 21 22
GREATER              : 61 63
ID                   : 20 20 21 22 24 25 26 26 27 33 37 41 50 51 52
IF                   : 15
IN                   : 20
INT                  : 28
INTV                 : 70
LCBRACKET            : 10 12 13
LONG                 : 34
LOWER                : 62 64
LPAREN               : 15 19 20 21 22 23 24 25 26 53
LSBRACKET            : 27
MINUS                : 65
MODULE               : 69
NOT                  : 47
NOTEQUALS            : 60
NULL                 : 46
OR                   : 57
PLUS                 : 66
PRINTLN              : 23
RCBRACKET            : 10 12 13
RETURN               : 14
RPAREN               : 15 19 20 21 22 23 24 25 26 53
RSBRACKET            : 27
SHORT                : 31
STRING               : 43
TIMES                : 67
TRUE                 : 44
VAL                  : 49
VAR                  : 48
WHILE                : 19
error                : 

Nonterminals, with rules where they appear

args                 : 24 26 40 40
asignacion           : 5
bucles               : 7
cuerpo               : 3 4 10 12 0
dato                 : 37
declaracion          : 9
declarador           : 51 52
estructuraControl    : 6
expresion            : 14 15 19 23 27 39 50 51 53 55 55 56 56
for                  : 18
function             : 2 4
instrucciones        : 15 16 17 18
instruccionesF       : 21 22
llamada              : 8
number               : 42
operadoresLog        : 56
operadoresMat        : 55
params               : 21 38 38
retorno              : 12 13
sentencia            : 1 3 11
valor                : 47 54
while                : 17

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . function
    (3) cuerpo -> . sentencia cuerpo
    (4) cuerpo -> . function cuerpo
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (21) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (22) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (27) function -> . ID LSBRACKET expresion RSBRACKET
    (50) asignacion -> . ID ASSIGN expresion
    (51) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (26) llamada -> . ID . ID LPAREN args RPAREN
    (52) declaracion -> . declarador ID
    (48) declarador -> . VAR
    (49) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    cuerpo                         shift and go to state 1
    sentencia                      shift and go to state 2
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> sentencia .
    (3) cuerpo -> sentencia . cuerpo
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . function
    (3) cuerpo -> . sentencia cuerpo
    (4) cuerpo -> . function cuerpo
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (21) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (22) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (27) function -> . ID LSBRACKET expresion RSBRACKET
    (50) asignacion -> . ID ASSIGN expresion
    (51) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (26) llamada -> . ID . ID LPAREN args RPAREN
    (52) declaracion -> . declarador ID
    (48) declarador -> . VAR
    (49) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    $end            reduce using rule 1 (cuerpo -> sentencia .)
    RCBRACKET       reduce using rule 1 (cuerpo -> sentencia .)
    RETURN          reduce using rule 1 (cuerpo -> sentencia .)
    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    sentencia                      shift and go to state 2
    cuerpo                         shift and go to state 21
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 3

    (2) cuerpo -> function .
    (4) cuerpo -> function . cuerpo
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . function
    (3) cuerpo -> . sentencia cuerpo
    (4) cuerpo -> . function cuerpo
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (21) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (22) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (27) function -> . ID LSBRACKET expresion RSBRACKET
    (50) asignacion -> . ID ASSIGN expresion
    (51) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (26) llamada -> . ID . ID LPAREN args RPAREN
    (52) declaracion -> . declarador ID
    (48) declarador -> . VAR
    (49) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    $end            reduce using rule 2 (cuerpo -> function .)
    RCBRACKET       reduce using rule 2 (cuerpo -> function .)
    RETURN          reduce using rule 2 (cuerpo -> function .)
    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    function                       shift and go to state 3
    cuerpo                         shift and go to state 22
    sentencia                      shift and go to state 2
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 4

    (5) sentencia -> asignacion .

    FUNCTION        reduce using rule 5 (sentencia -> asignacion .)
    ID              reduce using rule 5 (sentencia -> asignacion .)
    IF              reduce using rule 5 (sentencia -> asignacion .)
    ELSE            reduce using rule 5 (sentencia -> asignacion .)
    PRINTLN         reduce using rule 5 (sentencia -> asignacion .)
    VAR             reduce using rule 5 (sentencia -> asignacion .)
    VAL             reduce using rule 5 (sentencia -> asignacion .)
    WHILE           reduce using rule 5 (sentencia -> asignacion .)
    FOR             reduce using rule 5 (sentencia -> asignacion .)
    $end            reduce using rule 5 (sentencia -> asignacion .)
    RCBRACKET       reduce using rule 5 (sentencia -> asignacion .)
    RETURN          reduce using rule 5 (sentencia -> asignacion .)


state 5

    (6) sentencia -> estructuraControl .

    FUNCTION        reduce using rule 6 (sentencia -> estructuraControl .)
    ID              reduce using rule 6 (sentencia -> estructuraControl .)
    IF              reduce using rule 6 (sentencia -> estructuraControl .)
    ELSE            reduce using rule 6 (sentencia -> estructuraControl .)
    PRINTLN         reduce using rule 6 (sentencia -> estructuraControl .)
    VAR             reduce using rule 6 (sentencia -> estructuraControl .)
    VAL             reduce using rule 6 (sentencia -> estructuraControl .)
    WHILE           reduce using rule 6 (sentencia -> estructuraControl .)
    FOR             reduce using rule 6 (sentencia -> estructuraControl .)
    $end            reduce using rule 6 (sentencia -> estructuraControl .)
    RCBRACKET       reduce using rule 6 (sentencia -> estructuraControl .)
    RETURN          reduce using rule 6 (sentencia -> estructuraControl .)


state 6

    (7) sentencia -> bucles .

    FUNCTION        reduce using rule 7 (sentencia -> bucles .)
    ID              reduce using rule 7 (sentencia -> bucles .)
    IF              reduce using rule 7 (sentencia -> bucles .)
    ELSE            reduce using rule 7 (sentencia -> bucles .)
    PRINTLN         reduce using rule 7 (sentencia -> bucles .)
    VAR             reduce using rule 7 (sentencia -> bucles .)
    VAL             reduce using rule 7 (sentencia -> bucles .)
    WHILE           reduce using rule 7 (sentencia -> bucles .)
    FOR             reduce using rule 7 (sentencia -> bucles .)
    $end            reduce using rule 7 (sentencia -> bucles .)
    RCBRACKET       reduce using rule 7 (sentencia -> bucles .)
    RETURN          reduce using rule 7 (sentencia -> bucles .)


state 7

    (8) sentencia -> llamada .

    FUNCTION        reduce using rule 8 (sentencia -> llamada .)
    ID              reduce using rule 8 (sentencia -> llamada .)
    IF              reduce using rule 8 (sentencia -> llamada .)
    ELSE            reduce using rule 8 (sentencia -> llamada .)
    PRINTLN         reduce using rule 8 (sentencia -> llamada .)
    VAR             reduce using rule 8 (sentencia -> llamada .)
    VAL             reduce using rule 8 (sentencia -> llamada .)
    WHILE           reduce using rule 8 (sentencia -> llamada .)
    FOR             reduce using rule 8 (sentencia -> llamada .)
    $end            reduce using rule 8 (sentencia -> llamada .)
    RCBRACKET       reduce using rule 8 (sentencia -> llamada .)
    RETURN          reduce using rule 8 (sentencia -> llamada .)


state 8

    (9) sentencia -> declaracion .

    FUNCTION        reduce using rule 9 (sentencia -> declaracion .)
    ID              reduce using rule 9 (sentencia -> declaracion .)
    IF              reduce using rule 9 (sentencia -> declaracion .)
    ELSE            reduce using rule 9 (sentencia -> declaracion .)
    PRINTLN         reduce using rule 9 (sentencia -> declaracion .)
    VAR             reduce using rule 9 (sentencia -> declaracion .)
    VAL             reduce using rule 9 (sentencia -> declaracion .)
    WHILE           reduce using rule 9 (sentencia -> declaracion .)
    FOR             reduce using rule 9 (sentencia -> declaracion .)
    $end            reduce using rule 9 (sentencia -> declaracion .)
    RCBRACKET       reduce using rule 9 (sentencia -> declaracion .)
    RETURN          reduce using rule 9 (sentencia -> declaracion .)


state 9

    (21) function -> FUNCTION . ID LPAREN params RPAREN instruccionesF
    (22) function -> FUNCTION . ID LPAREN RPAREN instruccionesF

    ID              shift and go to state 23


state 10

    (27) function -> ID . LSBRACKET expresion RSBRACKET
    (50) asignacion -> ID . ASSIGN expresion
    (24) llamada -> ID . LPAREN args RPAREN
    (25) llamada -> ID . LPAREN RPAREN
    (26) llamada -> ID . . ID LPAREN args RPAREN

    LSBRACKET       shift and go to state 24
    ASSIGN          shift and go to state 25
    LPAREN          shift and go to state 26
    .               shift and go to state 27


state 11

    (51) asignacion -> declarador . ID ASSIGN expresion
    (52) declaracion -> declarador . ID

    ID              shift and go to state 28


state 12

    (15) estructuraControl -> IF . LPAREN expresion RPAREN instrucciones

    LPAREN          shift and go to state 29


state 13

    (16) estructuraControl -> ELSE . instrucciones
    (10) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (11) instrucciones -> . sentencia
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (50) asignacion -> . ID ASSIGN expresion
    (51) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (26) llamada -> . ID . ID LPAREN args RPAREN
    (52) declaracion -> . declarador ID
    (48) declarador -> . VAR
    (49) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    LCBRACKET       shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    instrucciones                  shift and go to state 30
    sentencia                      shift and go to state 32
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 14

    (17) bucles -> while . instrucciones
    (10) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (11) instrucciones -> . sentencia
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (50) asignacion -> . ID ASSIGN expresion
    (51) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (26) llamada -> . ID . ID LPAREN args RPAREN
    (52) declaracion -> . declarador ID
    (48) declarador -> . VAR
    (49) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    LCBRACKET       shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    while                          shift and go to state 14
    instrucciones                  shift and go to state 34
    sentencia                      shift and go to state 32
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    for                            shift and go to state 15

state 15

    (18) bucles -> for . instrucciones
    (10) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (11) instrucciones -> . sentencia
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (50) asignacion -> . ID ASSIGN expresion
    (51) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (26) llamada -> . ID . ID LPAREN args RPAREN
    (52) declaracion -> . declarador ID
    (48) declarador -> . VAR
    (49) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    LCBRACKET       shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    for                            shift and go to state 15
    instrucciones                  shift and go to state 35
    sentencia                      shift and go to state 32
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14

state 16

    (23) llamada -> PRINTLN . LPAREN expresion RPAREN

    LPAREN          shift and go to state 36


state 17

    (48) declarador -> VAR .

    ID              reduce using rule 48 (declarador -> VAR .)


state 18

    (49) declarador -> VAL .

    ID              reduce using rule 49 (declarador -> VAL .)


state 19

    (19) while -> WHILE . LPAREN expresion RPAREN

    LPAREN          shift and go to state 37


state 20

    (20) for -> FOR . LPAREN ID IN ID RPAREN

    LPAREN          shift and go to state 38


state 21

    (3) cuerpo -> sentencia cuerpo .

    $end            reduce using rule 3 (cuerpo -> sentencia cuerpo .)
    RCBRACKET       reduce using rule 3 (cuerpo -> sentencia cuerpo .)
    RETURN          reduce using rule 3 (cuerpo -> sentencia cuerpo .)


state 22

    (4) cuerpo -> function cuerpo .

    $end            reduce using rule 4 (cuerpo -> function cuerpo .)
    RCBRACKET       reduce using rule 4 (cuerpo -> function cuerpo .)
    RETURN          reduce using rule 4 (cuerpo -> function cuerpo .)


state 23

    (21) function -> FUNCTION ID . LPAREN params RPAREN instruccionesF
    (22) function -> FUNCTION ID . LPAREN RPAREN instruccionesF

    LPAREN          shift and go to state 39


state 24

    (27) function -> ID LSBRACKET . expresion RSBRACKET
    (53) expresion -> . LPAREN expresion RPAREN
    (54) expresion -> . valor
    (55) expresion -> . expresion operadoresMat expresion
    (56) expresion -> . expresion operadoresLog expresion
    (41) valor -> . ID
    (42) valor -> . number
    (43) valor -> . STRING
    (44) valor -> . TRUE
    (45) valor -> . FALSE
    (46) valor -> . NULL
    (47) valor -> . NOT valor
    (70) number -> . INTV
    (71) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 41
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 25

    (50) asignacion -> ID ASSIGN . expresion
    (53) expresion -> . LPAREN expresion RPAREN
    (54) expresion -> . valor
    (55) expresion -> . expresion operadoresMat expresion
    (56) expresion -> . expresion operadoresLog expresion
    (41) valor -> . ID
    (42) valor -> . number
    (43) valor -> . STRING
    (44) valor -> . TRUE
    (45) valor -> . FALSE
    (46) valor -> . NULL
    (47) valor -> . NOT valor
    (70) number -> . INTV
    (71) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 52
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 26

    (24) llamada -> ID LPAREN . args RPAREN
    (25) llamada -> ID LPAREN . RPAREN
    (39) args -> . expresion
    (40) args -> . args , args
    (53) expresion -> . LPAREN expresion RPAREN
    (54) expresion -> . valor
    (55) expresion -> . expresion operadoresMat expresion
    (56) expresion -> . expresion operadoresLog expresion
    (41) valor -> . ID
    (42) valor -> . number
    (43) valor -> . STRING
    (44) valor -> . TRUE
    (45) valor -> . FALSE
    (46) valor -> . NULL
    (47) valor -> . NOT valor
    (70) number -> . INTV
    (71) number -> . FLOATV

    RPAREN          shift and go to state 54
    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    args                           shift and go to state 53
    expresion                      shift and go to state 55
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 27

    (26) llamada -> ID . . ID LPAREN args RPAREN

    ID              shift and go to state 56


state 28

    (51) asignacion -> declarador ID . ASSIGN expresion
    (52) declaracion -> declarador ID .

    ASSIGN          shift and go to state 57
    FUNCTION        reduce using rule 52 (declaracion -> declarador ID .)
    ID              reduce using rule 52 (declaracion -> declarador ID .)
    IF              reduce using rule 52 (declaracion -> declarador ID .)
    ELSE            reduce using rule 52 (declaracion -> declarador ID .)
    PRINTLN         reduce using rule 52 (declaracion -> declarador ID .)
    VAR             reduce using rule 52 (declaracion -> declarador ID .)
    VAL             reduce using rule 52 (declaracion -> declarador ID .)
    WHILE           reduce using rule 52 (declaracion -> declarador ID .)
    FOR             reduce using rule 52 (declaracion -> declarador ID .)
    $end            reduce using rule 52 (declaracion -> declarador ID .)
    RCBRACKET       reduce using rule 52 (declaracion -> declarador ID .)
    RETURN          reduce using rule 52 (declaracion -> declarador ID .)


state 29

    (15) estructuraControl -> IF LPAREN . expresion RPAREN instrucciones
    (53) expresion -> . LPAREN expresion RPAREN
    (54) expresion -> . valor
    (55) expresion -> . expresion operadoresMat expresion
    (56) expresion -> . expresion operadoresLog expresion
    (41) valor -> . ID
    (42) valor -> . number
    (43) valor -> . STRING
    (44) valor -> . TRUE
    (45) valor -> . FALSE
    (46) valor -> . NULL
    (47) valor -> . NOT valor
    (70) number -> . INTV
    (71) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 58
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 30

    (16) estructuraControl -> ELSE instrucciones .

    FUNCTION        reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    ID              reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    IF              reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    ELSE            reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    PRINTLN         reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    VAR             reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    VAL             reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    WHILE           reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    FOR             reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    $end            reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    RCBRACKET       reduce using rule 16 (estructuraControl -> ELSE instrucciones .)
    RETURN          reduce using rule 16 (estructuraControl -> ELSE instrucciones .)


state 31

    (10) instrucciones -> LCBRACKET . cuerpo RCBRACKET
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . function
    (3) cuerpo -> . sentencia cuerpo
    (4) cuerpo -> . function cuerpo
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (21) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (22) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (27) function -> . ID LSBRACKET expresion RSBRACKET
    (50) asignacion -> . ID ASSIGN expresion
    (51) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (26) llamada -> . ID . ID LPAREN args RPAREN
    (52) declaracion -> . declarador ID
    (48) declarador -> . VAR
    (49) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    cuerpo                         shift and go to state 59
    sentencia                      shift and go to state 2
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 32

    (11) instrucciones -> sentencia .

    FUNCTION        reduce using rule 11 (instrucciones -> sentencia .)
    ID              reduce using rule 11 (instrucciones -> sentencia .)
    IF              reduce using rule 11 (instrucciones -> sentencia .)
    ELSE            reduce using rule 11 (instrucciones -> sentencia .)
    PRINTLN         reduce using rule 11 (instrucciones -> sentencia .)
    VAR             reduce using rule 11 (instrucciones -> sentencia .)
    VAL             reduce using rule 11 (instrucciones -> sentencia .)
    WHILE           reduce using rule 11 (instrucciones -> sentencia .)
    FOR             reduce using rule 11 (instrucciones -> sentencia .)
    $end            reduce using rule 11 (instrucciones -> sentencia .)
    RCBRACKET       reduce using rule 11 (instrucciones -> sentencia .)
    RETURN          reduce using rule 11 (instrucciones -> sentencia .)


state 33

    (50) asignacion -> ID . ASSIGN expresion
    (24) llamada -> ID . LPAREN args RPAREN
    (25) llamada -> ID . LPAREN RPAREN
    (26) llamada -> ID . . ID LPAREN args RPAREN

    ASSIGN          shift and go to state 25
    LPAREN          shift and go to state 26
    .               shift and go to state 27


state 34

    (17) bucles -> while instrucciones .

    FUNCTION        reduce using rule 17 (bucles -> while instrucciones .)
    ID              reduce using rule 17 (bucles -> while instrucciones .)
    IF              reduce using rule 17 (bucles -> while instrucciones .)
    ELSE            reduce using rule 17 (bucles -> while instrucciones .)
    PRINTLN         reduce using rule 17 (bucles -> while instrucciones .)
    VAR             reduce using rule 17 (bucles -> while instrucciones .)
    VAL             reduce using rule 17 (bucles -> while instrucciones .)
    WHILE           reduce using rule 17 (bucles -> while instrucciones .)
    FOR             reduce using rule 17 (bucles -> while instrucciones .)
    $end            reduce using rule 17 (bucles -> while instrucciones .)
    RCBRACKET       reduce using rule 17 (bucles -> while instrucciones .)
    RETURN          reduce using rule 17 (bucles -> while instrucciones .)


state 35

    (18) bucles -> for instrucciones .

    FUNCTION        reduce using rule 18 (bucles -> for instrucciones .)
    ID              reduce using rule 18 (bucles -> for instrucciones .)
    IF              reduce using rule 18 (bucles -> for instrucciones .)
    ELSE            reduce using rule 18 (bucles -> for instrucciones .)
    PRINTLN         reduce using rule 18 (bucles -> for instrucciones .)
    VAR             reduce using rule 18 (bucles -> for instrucciones .)
    VAL             reduce using rule 18 (bucles -> for instrucciones .)
    WHILE           reduce using rule 18 (bucles -> for instrucciones .)
    FOR             reduce using rule 18 (bucles -> for instrucciones .)
    $end            reduce using rule 18 (bucles -> for instrucciones .)
    RCBRACKET       reduce using rule 18 (bucles -> for instrucciones .)
    RETURN          reduce using rule 18 (bucles -> for instrucciones .)


state 36

    (23) llamada -> PRINTLN LPAREN . expresion RPAREN
    (53) expresion -> . LPAREN expresion RPAREN
    (54) expresion -> . valor
    (55) expresion -> . expresion operadoresMat expresion
    (56) expresion -> . expresion operadoresLog expresion
    (41) valor -> . ID
    (42) valor -> . number
    (43) valor -> . STRING
    (44) valor -> . TRUE
    (45) valor -> . FALSE
    (46) valor -> . NULL
    (47) valor -> . NOT valor
    (70) number -> . INTV
    (71) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 60
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 37

    (19) while -> WHILE LPAREN . expresion RPAREN
    (53) expresion -> . LPAREN expresion RPAREN
    (54) expresion -> . valor
    (55) expresion -> . expresion operadoresMat expresion
    (56) expresion -> . expresion operadoresLog expresion
    (41) valor -> . ID
    (42) valor -> . number
    (43) valor -> . STRING
    (44) valor -> . TRUE
    (45) valor -> . FALSE
    (46) valor -> . NULL
    (47) valor -> . NOT valor
    (70) number -> . INTV
    (71) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 61
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 38

    (20) for -> FOR LPAREN . ID IN ID RPAREN

    ID              shift and go to state 62


state 39

    (21) function -> FUNCTION ID LPAREN . params RPAREN instruccionesF
    (22) function -> FUNCTION ID LPAREN . RPAREN instruccionesF
    (37) params -> . ID : dato
    (38) params -> . params , params

    RPAREN          shift and go to state 65
    ID              shift and go to state 63

    params                         shift and go to state 64

state 40

    (41) valor -> ID .

    RSBRACKET       reduce using rule 41 (valor -> ID .)
    MINUS           reduce using rule 41 (valor -> ID .)
    PLUS            reduce using rule 41 (valor -> ID .)
    TIMES           reduce using rule 41 (valor -> ID .)
    DIVIDE          reduce using rule 41 (valor -> ID .)
    MODULE          reduce using rule 41 (valor -> ID .)
    OR              reduce using rule 41 (valor -> ID .)
    AND             reduce using rule 41 (valor -> ID .)
    EQUALS          reduce using rule 41 (valor -> ID .)
    NOTEQUALS       reduce using rule 41 (valor -> ID .)
    GREATER         reduce using rule 41 (valor -> ID .)
    LOWER           reduce using rule 41 (valor -> ID .)
    FUNCTION        reduce using rule 41 (valor -> ID .)
    ID              reduce using rule 41 (valor -> ID .)
    IF              reduce using rule 41 (valor -> ID .)
    ELSE            reduce using rule 41 (valor -> ID .)
    PRINTLN         reduce using rule 41 (valor -> ID .)
    VAR             reduce using rule 41 (valor -> ID .)
    VAL             reduce using rule 41 (valor -> ID .)
    WHILE           reduce using rule 41 (valor -> ID .)
    FOR             reduce using rule 41 (valor -> ID .)
    $end            reduce using rule 41 (valor -> ID .)
    RCBRACKET       reduce using rule 41 (valor -> ID .)
    RETURN          reduce using rule 41 (valor -> ID .)
    RPAREN          reduce using rule 41 (valor -> ID .)
    ,               reduce using rule 41 (valor -> ID .)


state 41

    (27) function -> ID LSBRACKET expresion . RSBRACKET
    (55) expresion -> expresion . operadoresMat expresion
    (56) expresion -> expresion . operadoresLog expresion
    (65) operadoresMat -> . MINUS
    (66) operadoresMat -> . PLUS
    (67) operadoresMat -> . TIMES
    (68) operadoresMat -> . DIVIDE
    (69) operadoresMat -> . MODULE
    (57) operadoresLog -> . OR
    (58) operadoresLog -> . AND
    (59) operadoresLog -> . EQUALS
    (60) operadoresLog -> . NOTEQUALS
    (61) operadoresLog -> . GREATER
    (62) operadoresLog -> . LOWER
    (63) operadoresLog -> . GREATER ASSIGN
    (64) operadoresLog -> . LOWER ASSIGN

    RSBRACKET       shift and go to state 66
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 42

    (53) expresion -> LPAREN . expresion RPAREN
    (53) expresion -> . LPAREN expresion RPAREN
    (54) expresion -> . valor
    (55) expresion -> . expresion operadoresMat expresion
    (56) expresion -> . expresion operadoresLog expresion
    (41) valor -> . ID
    (42) valor -> . number
    (43) valor -> . STRING
    (44) valor -> . TRUE
    (45) valor -> . FALSE
    (46) valor -> . NULL
    (47) valor -> . NOT valor
    (70) number -> . INTV
    (71) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 80
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 43

    (54) expresion -> valor .

    RSBRACKET       reduce using rule 54 (expresion -> valor .)
    MINUS           reduce using rule 54 (expresion -> valor .)
    PLUS            reduce using rule 54 (expresion -> valor .)
    TIMES           reduce using rule 54 (expresion -> valor .)
    DIVIDE          reduce using rule 54 (expresion -> valor .)
    MODULE          reduce using rule 54 (expresion -> valor .)
    OR              reduce using rule 54 (expresion -> valor .)
    AND             reduce using rule 54 (expresion -> valor .)
    EQUALS          reduce using rule 54 (expresion -> valor .)
    NOTEQUALS       reduce using rule 54 (expresion -> valor .)
    GREATER         reduce using rule 54 (expresion -> valor .)
    LOWER           reduce using rule 54 (expresion -> valor .)
    FUNCTION        reduce using rule 54 (expresion -> valor .)
    ID              reduce using rule 54 (expresion -> valor .)
    IF              reduce using rule 54 (expresion -> valor .)
    ELSE            reduce using rule 54 (expresion -> valor .)
    PRINTLN         reduce using rule 54 (expresion -> valor .)
    VAR             reduce using rule 54 (expresion -> valor .)
    VAL             reduce using rule 54 (expresion -> valor .)
    WHILE           reduce using rule 54 (expresion -> valor .)
    FOR             reduce using rule 54 (expresion -> valor .)
    $end            reduce using rule 54 (expresion -> valor .)
    RCBRACKET       reduce using rule 54 (expresion -> valor .)
    RETURN          reduce using rule 54 (expresion -> valor .)
    RPAREN          reduce using rule 54 (expresion -> valor .)
    ,               reduce using rule 54 (expresion -> valor .)


state 44

    (42) valor -> number .

    RSBRACKET       reduce using rule 42 (valor -> number .)
    MINUS           reduce using rule 42 (valor -> number .)
    PLUS            reduce using rule 42 (valor -> number .)
    TIMES           reduce using rule 42 (valor -> number .)
    DIVIDE          reduce using rule 42 (valor -> number .)
    MODULE          reduce using rule 42 (valor -> number .)
    OR              reduce using rule 42 (valor -> number .)
    AND             reduce using rule 42 (valor -> number .)
    EQUALS          reduce using rule 42 (valor -> number .)
    NOTEQUALS       reduce using rule 42 (valor -> number .)
    GREATER         reduce using rule 42 (valor -> number .)
    LOWER           reduce using rule 42 (valor -> number .)
    FUNCTION        reduce using rule 42 (valor -> number .)
    ID              reduce using rule 42 (valor -> number .)
    IF              reduce using rule 42 (valor -> number .)
    ELSE            reduce using rule 42 (valor -> number .)
    PRINTLN         reduce using rule 42 (valor -> number .)
    VAR             reduce using rule 42 (valor -> number .)
    VAL             reduce using rule 42 (valor -> number .)
    WHILE           reduce using rule 42 (valor -> number .)
    FOR             reduce using rule 42 (valor -> number .)
    $end            reduce using rule 42 (valor -> number .)
    RCBRACKET       reduce using rule 42 (valor -> number .)
    RETURN          reduce using rule 42 (valor -> number .)
    RPAREN          reduce using rule 42 (valor -> number .)
    ,               reduce using rule 42 (valor -> number .)


state 45

    (43) valor -> STRING .

    RSBRACKET       reduce using rule 43 (valor -> STRING .)
    MINUS           reduce using rule 43 (valor -> STRING .)
    PLUS            reduce using rule 43 (valor -> STRING .)
    TIMES           reduce using rule 43 (valor -> STRING .)
    DIVIDE          reduce using rule 43 (valor -> STRING .)
    MODULE          reduce using rule 43 (valor -> STRING .)
    OR              reduce using rule 43 (valor -> STRING .)
    AND             reduce using rule 43 (valor -> STRING .)
    EQUALS          reduce using rule 43 (valor -> STRING .)
    NOTEQUALS       reduce using rule 43 (valor -> STRING .)
    GREATER         reduce using rule 43 (valor -> STRING .)
    LOWER           reduce using rule 43 (valor -> STRING .)
    FUNCTION        reduce using rule 43 (valor -> STRING .)
    ID              reduce using rule 43 (valor -> STRING .)
    IF              reduce using rule 43 (valor -> STRING .)
    ELSE            reduce using rule 43 (valor -> STRING .)
    PRINTLN         reduce using rule 43 (valor -> STRING .)
    VAR             reduce using rule 43 (valor -> STRING .)
    VAL             reduce using rule 43 (valor -> STRING .)
    WHILE           reduce using rule 43 (valor -> STRING .)
    FOR             reduce using rule 43 (valor -> STRING .)
    $end            reduce using rule 43 (valor -> STRING .)
    RCBRACKET       reduce using rule 43 (valor -> STRING .)
    RETURN          reduce using rule 43 (valor -> STRING .)
    RPAREN          reduce using rule 43 (valor -> STRING .)
    ,               reduce using rule 43 (valor -> STRING .)


state 46

    (44) valor -> TRUE .

    RSBRACKET       reduce using rule 44 (valor -> TRUE .)
    MINUS           reduce using rule 44 (valor -> TRUE .)
    PLUS            reduce using rule 44 (valor -> TRUE .)
    TIMES           reduce using rule 44 (valor -> TRUE .)
    DIVIDE          reduce using rule 44 (valor -> TRUE .)
    MODULE          reduce using rule 44 (valor -> TRUE .)
    OR              reduce using rule 44 (valor -> TRUE .)
    AND             reduce using rule 44 (valor -> TRUE .)
    EQUALS          reduce using rule 44 (valor -> TRUE .)
    NOTEQUALS       reduce using rule 44 (valor -> TRUE .)
    GREATER         reduce using rule 44 (valor -> TRUE .)
    LOWER           reduce using rule 44 (valor -> TRUE .)
    FUNCTION        reduce using rule 44 (valor -> TRUE .)
    ID              reduce using rule 44 (valor -> TRUE .)
    IF              reduce using rule 44 (valor -> TRUE .)
    ELSE            reduce using rule 44 (valor -> TRUE .)
    PRINTLN         reduce using rule 44 (valor -> TRUE .)
    VAR             reduce using rule 44 (valor -> TRUE .)
    VAL             reduce using rule 44 (valor -> TRUE .)
    WHILE           reduce using rule 44 (valor -> TRUE .)
    FOR             reduce using rule 44 (valor -> TRUE .)
    $end            reduce using rule 44 (valor -> TRUE .)
    RCBRACKET       reduce using rule 44 (valor -> TRUE .)
    RETURN          reduce using rule 44 (valor -> TRUE .)
    RPAREN          reduce using rule 44 (valor -> TRUE .)
    ,               reduce using rule 44 (valor -> TRUE .)


state 47

    (45) valor -> FALSE .

    RSBRACKET       reduce using rule 45 (valor -> FALSE .)
    MINUS           reduce using rule 45 (valor -> FALSE .)
    PLUS            reduce using rule 45 (valor -> FALSE .)
    TIMES           reduce using rule 45 (valor -> FALSE .)
    DIVIDE          reduce using rule 45 (valor -> FALSE .)
    MODULE          reduce using rule 45 (valor -> FALSE .)
    OR              reduce using rule 45 (valor -> FALSE .)
    AND             reduce using rule 45 (valor -> FALSE .)
    EQUALS          reduce using rule 45 (valor -> FALSE .)
    NOTEQUALS       reduce using rule 45 (valor -> FALSE .)
    GREATER         reduce using rule 45 (valor -> FALSE .)
    LOWER           reduce using rule 45 (valor -> FALSE .)
    FUNCTION        reduce using rule 45 (valor -> FALSE .)
    ID              reduce using rule 45 (valor -> FALSE .)
    IF              reduce using rule 45 (valor -> FALSE .)
    ELSE            reduce using rule 45 (valor -> FALSE .)
    PRINTLN         reduce using rule 45 (valor -> FALSE .)
    VAR             reduce using rule 45 (valor -> FALSE .)
    VAL             reduce using rule 45 (valor -> FALSE .)
    WHILE           reduce using rule 45 (valor -> FALSE .)
    FOR             reduce using rule 45 (valor -> FALSE .)
    $end            reduce using rule 45 (valor -> FALSE .)
    RCBRACKET       reduce using rule 45 (valor -> FALSE .)
    RETURN          reduce using rule 45 (valor -> FALSE .)
    RPAREN          reduce using rule 45 (valor -> FALSE .)
    ,               reduce using rule 45 (valor -> FALSE .)


state 48

    (46) valor -> NULL .

    RSBRACKET       reduce using rule 46 (valor -> NULL .)
    MINUS           reduce using rule 46 (valor -> NULL .)
    PLUS            reduce using rule 46 (valor -> NULL .)
    TIMES           reduce using rule 46 (valor -> NULL .)
    DIVIDE          reduce using rule 46 (valor -> NULL .)
    MODULE          reduce using rule 46 (valor -> NULL .)
    OR              reduce using rule 46 (valor -> NULL .)
    AND             reduce using rule 46 (valor -> NULL .)
    EQUALS          reduce using rule 46 (valor -> NULL .)
    NOTEQUALS       reduce using rule 46 (valor -> NULL .)
    GREATER         reduce using rule 46 (valor -> NULL .)
    LOWER           reduce using rule 46 (valor -> NULL .)
    FUNCTION        reduce using rule 46 (valor -> NULL .)
    ID              reduce using rule 46 (valor -> NULL .)
    IF              reduce using rule 46 (valor -> NULL .)
    ELSE            reduce using rule 46 (valor -> NULL .)
    PRINTLN         reduce using rule 46 (valor -> NULL .)
    VAR             reduce using rule 46 (valor -> NULL .)
    VAL             reduce using rule 46 (valor -> NULL .)
    WHILE           reduce using rule 46 (valor -> NULL .)
    FOR             reduce using rule 46 (valor -> NULL .)
    $end            reduce using rule 46 (valor -> NULL .)
    RCBRACKET       reduce using rule 46 (valor -> NULL .)
    RETURN          reduce using rule 46 (valor -> NULL .)
    RPAREN          reduce using rule 46 (valor -> NULL .)
    ,               reduce using rule 46 (valor -> NULL .)


state 49

    (47) valor -> NOT . valor
    (41) valor -> . ID
    (42) valor -> . number
    (43) valor -> . STRING
    (44) valor -> . TRUE
    (45) valor -> . FALSE
    (46) valor -> . NULL
    (47) valor -> . NOT valor
    (70) number -> . INTV
    (71) number -> . FLOATV

    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    valor                          shift and go to state 81
    number                         shift and go to state 44

state 50

    (70) number -> INTV .

    RSBRACKET       reduce using rule 70 (number -> INTV .)
    MINUS           reduce using rule 70 (number -> INTV .)
    PLUS            reduce using rule 70 (number -> INTV .)
    TIMES           reduce using rule 70 (number -> INTV .)
    DIVIDE          reduce using rule 70 (number -> INTV .)
    MODULE          reduce using rule 70 (number -> INTV .)
    OR              reduce using rule 70 (number -> INTV .)
    AND             reduce using rule 70 (number -> INTV .)
    EQUALS          reduce using rule 70 (number -> INTV .)
    NOTEQUALS       reduce using rule 70 (number -> INTV .)
    GREATER         reduce using rule 70 (number -> INTV .)
    LOWER           reduce using rule 70 (number -> INTV .)
    FUNCTION        reduce using rule 70 (number -> INTV .)
    ID              reduce using rule 70 (number -> INTV .)
    IF              reduce using rule 70 (number -> INTV .)
    ELSE            reduce using rule 70 (number -> INTV .)
    PRINTLN         reduce using rule 70 (number -> INTV .)
    VAR             reduce using rule 70 (number -> INTV .)
    VAL             reduce using rule 70 (number -> INTV .)
    WHILE           reduce using rule 70 (number -> INTV .)
    FOR             reduce using rule 70 (number -> INTV .)
    $end            reduce using rule 70 (number -> INTV .)
    RCBRACKET       reduce using rule 70 (number -> INTV .)
    RETURN          reduce using rule 70 (number -> INTV .)
    RPAREN          reduce using rule 70 (number -> INTV .)
    ,               reduce using rule 70 (number -> INTV .)


state 51

    (71) number -> FLOATV .

    RSBRACKET       reduce using rule 71 (number -> FLOATV .)
    MINUS           reduce using rule 71 (number -> FLOATV .)
    PLUS            reduce using rule 71 (number -> FLOATV .)
    TIMES           reduce using rule 71 (number -> FLOATV .)
    DIVIDE          reduce using rule 71 (number -> FLOATV .)
    MODULE          reduce using rule 71 (number -> FLOATV .)
    OR              reduce using rule 71 (number -> FLOATV .)
    AND             reduce using rule 71 (number -> FLOATV .)
    EQUALS          reduce using rule 71 (number -> FLOATV .)
    NOTEQUALS       reduce using rule 71 (number -> FLOATV .)
    GREATER         reduce using rule 71 (number -> FLOATV .)
    LOWER           reduce using rule 71 (number -> FLOATV .)
    FUNCTION        reduce using rule 71 (number -> FLOATV .)
    ID              reduce using rule 71 (number -> FLOATV .)
    IF              reduce using rule 71 (number -> FLOATV .)
    ELSE            reduce using rule 71 (number -> FLOATV .)
    PRINTLN         reduce using rule 71 (number -> FLOATV .)
    VAR             reduce using rule 71 (number -> FLOATV .)
    VAL             reduce using rule 71 (number -> FLOATV .)
    WHILE           reduce using rule 71 (number -> FLOATV .)
    FOR             reduce using rule 71 (number -> FLOATV .)
    $end            reduce using rule 71 (number -> FLOATV .)
    RCBRACKET       reduce using rule 71 (number -> FLOATV .)
    RETURN          reduce using rule 71 (number -> FLOATV .)
    RPAREN          reduce using rule 71 (number -> FLOATV .)
    ,               reduce using rule 71 (number -> FLOATV .)


state 52

    (50) asignacion -> ID ASSIGN expresion .
    (55) expresion -> expresion . operadoresMat expresion
    (56) expresion -> expresion . operadoresLog expresion
    (65) operadoresMat -> . MINUS
    (66) operadoresMat -> . PLUS
    (67) operadoresMat -> . TIMES
    (68) operadoresMat -> . DIVIDE
    (69) operadoresMat -> . MODULE
    (57) operadoresLog -> . OR
    (58) operadoresLog -> . AND
    (59) operadoresLog -> . EQUALS
    (60) operadoresLog -> . NOTEQUALS
    (61) operadoresLog -> . GREATER
    (62) operadoresLog -> . LOWER
    (63) operadoresLog -> . GREATER ASSIGN
    (64) operadoresLog -> . LOWER ASSIGN

    FUNCTION        reduce using rule 50 (asignacion -> ID ASSIGN expresion .)
    ID              reduce using rule 50 (asignacion -> ID ASSIGN expresion .)
    IF              reduce using rule 50 (asignacion -> ID ASSIGN expresion .)
    ELSE            reduce using rule 50 (asignacion -> ID ASSIGN expresion .)
    PRINTLN         reduce using rule 50 (asignacion -> ID ASSIGN expresion .)
    VAR             reduce using rule 50 (asignacion -> ID ASSIGN expresion .)
    VAL             reduce using rule 50 (asignacion -> ID ASSIGN expresion .)
    WHILE           reduce using rule 50 (asignacion -> ID ASSIGN expresion .)
    FOR             reduce using rule 50 (asignacion -> ID ASSIGN expresion .)
    $end            reduce using rule 50 (asignacion -> ID ASSIGN expresion .)
    RCBRACKET       reduce using rule 50 (asignacion -> ID ASSIGN expresion .)
    RETURN          reduce using rule 50 (asignacion -> ID ASSIGN expresion .)
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 53

    (24) llamada -> ID LPAREN args . RPAREN
    (40) args -> args . , args

    RPAREN          shift and go to state 82
    ,               shift and go to state 83


state 54

    (25) llamada -> ID LPAREN RPAREN .

    FUNCTION        reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    ID              reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    IF              reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    PRINTLN         reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    VAR             reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    VAL             reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    FOR             reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    $end            reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    RCBRACKET       reduce using rule 25 (llamada -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 25 (llamada -> ID LPAREN RPAREN .)


state 55

    (39) args -> expresion .
    (55) expresion -> expresion . operadoresMat expresion
    (56) expresion -> expresion . operadoresLog expresion
    (65) operadoresMat -> . MINUS
    (66) operadoresMat -> . PLUS
    (67) operadoresMat -> . TIMES
    (68) operadoresMat -> . DIVIDE
    (69) operadoresMat -> . MODULE
    (57) operadoresLog -> . OR
    (58) operadoresLog -> . AND
    (59) operadoresLog -> . EQUALS
    (60) operadoresLog -> . NOTEQUALS
    (61) operadoresLog -> . GREATER
    (62) operadoresLog -> . LOWER
    (63) operadoresLog -> . GREATER ASSIGN
    (64) operadoresLog -> . LOWER ASSIGN

    RPAREN          reduce using rule 39 (args -> expresion .)
    ,               reduce using rule 39 (args -> expresion .)
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 56

    (26) llamada -> ID . ID . LPAREN args RPAREN

    LPAREN          shift and go to state 84


state 57

    (51) asignacion -> declarador ID ASSIGN . expresion
    (53) expresion -> . LPAREN expresion RPAREN
    (54) expresion -> . valor
    (55) expresion -> . expresion operadoresMat expresion
    (56) expresion -> . expresion operadoresLog expresion
    (41) valor -> . ID
    (42) valor -> . number
    (43) valor -> . STRING
    (44) valor -> . TRUE
    (45) valor -> . FALSE
    (46) valor -> . NULL
    (47) valor -> . NOT valor
    (70) number -> . INTV
    (71) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 85
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 58

    (15) estructuraControl -> IF LPAREN expresion . RPAREN instrucciones
    (55) expresion -> expresion . operadoresMat expresion
    (56) expresion -> expresion . operadoresLog expresion
    (65) operadoresMat -> . MINUS
    (66) operadoresMat -> . PLUS
    (67) operadoresMat -> . TIMES
    (68) operadoresMat -> . DIVIDE
    (69) operadoresMat -> . MODULE
    (57) operadoresLog -> . OR
    (58) operadoresLog -> . AND
    (59) operadoresLog -> . EQUALS
    (60) operadoresLog -> . NOTEQUALS
    (61) operadoresLog -> . GREATER
    (62) operadoresLog -> . LOWER
    (63) operadoresLog -> . GREATER ASSIGN
    (64) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 86
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 59

    (10) instrucciones -> LCBRACKET cuerpo . RCBRACKET

    RCBRACKET       shift and go to state 87


state 60

    (23) llamada -> PRINTLN LPAREN expresion . RPAREN
    (55) expresion -> expresion . operadoresMat expresion
    (56) expresion -> expresion . operadoresLog expresion
    (65) operadoresMat -> . MINUS
    (66) operadoresMat -> . PLUS
    (67) operadoresMat -> . TIMES
    (68) operadoresMat -> . DIVIDE
    (69) operadoresMat -> . MODULE
    (57) operadoresLog -> . OR
    (58) operadoresLog -> . AND
    (59) operadoresLog -> . EQUALS
    (60) operadoresLog -> . NOTEQUALS
    (61) operadoresLog -> . GREATER
    (62) operadoresLog -> . LOWER
    (63) operadoresLog -> . GREATER ASSIGN
    (64) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 88
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 61

    (19) while -> WHILE LPAREN expresion . RPAREN
    (55) expresion -> expresion . operadoresMat expresion
    (56) expresion -> expresion . operadoresLog expresion
    (65) operadoresMat -> . MINUS
    (66) operadoresMat -> . PLUS
    (67) operadoresMat -> . TIMES
    (68) operadoresMat -> . DIVIDE
    (69) operadoresMat -> . MODULE
    (57) operadoresLog -> . OR
    (58) operadoresLog -> . AND
    (59) operadoresLog -> . EQUALS
    (60) operadoresLog -> . NOTEQUALS
    (61) operadoresLog -> . GREATER
    (62) operadoresLog -> . LOWER
    (63) operadoresLog -> . GREATER ASSIGN
    (64) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 89
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 62

    (20) for -> FOR LPAREN ID . IN ID RPAREN

    IN              shift and go to state 90


state 63

    (37) params -> ID . : dato

    :               shift and go to state 91


state 64

    (21) function -> FUNCTION ID LPAREN params . RPAREN instruccionesF
    (38) params -> params . , params

    RPAREN          shift and go to state 92
    ,               shift and go to state 93


state 65

    (22) function -> FUNCTION ID LPAREN RPAREN . instruccionesF
    (12) instruccionesF -> . LCBRACKET cuerpo retorno RCBRACKET
    (13) instruccionesF -> . LCBRACKET retorno RCBRACKET

    LCBRACKET       shift and go to state 95

    instruccionesF                 shift and go to state 94

state 66

    (27) function -> ID LSBRACKET expresion RSBRACKET .

    FUNCTION        reduce using rule 27 (function -> ID LSBRACKET expresion RSBRACKET .)
    ID              reduce using rule 27 (function -> ID LSBRACKET expresion RSBRACKET .)
    IF              reduce using rule 27 (function -> ID LSBRACKET expresion RSBRACKET .)
    ELSE            reduce using rule 27 (function -> ID LSBRACKET expresion RSBRACKET .)
    PRINTLN         reduce using rule 27 (function -> ID LSBRACKET expresion RSBRACKET .)
    VAR             reduce using rule 27 (function -> ID LSBRACKET expresion RSBRACKET .)
    VAL             reduce using rule 27 (function -> ID LSBRACKET expresion RSBRACKET .)
    WHILE           reduce using rule 27 (function -> ID LSBRACKET expresion RSBRACKET .)
    FOR             reduce using rule 27 (function -> ID LSBRACKET expresion RSBRACKET .)
    $end            reduce using rule 27 (function -> ID LSBRACKET expresion RSBRACKET .)
    RCBRACKET       reduce using rule 27 (function -> ID LSBRACKET expresion RSBRACKET .)
    RETURN          reduce using rule 27 (function -> ID LSBRACKET expresion RSBRACKET .)


state 67

    (55) expresion -> expresion operadoresMat . expresion
    (53) expresion -> . LPAREN expresion RPAREN
    (54) expresion -> . valor
    (55) expresion -> . expresion operadoresMat expresion
    (56) expresion -> . expresion operadoresLog expresion
    (41) valor -> . ID
    (42) valor -> . number
    (43) valor -> . STRING
    (44) valor -> . TRUE
    (45) valor -> . FALSE
    (46) valor -> . NULL
    (47) valor -> . NOT valor
    (70) number -> . INTV
    (71) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 96
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 68

    (56) expresion -> expresion operadoresLog . expresion
    (53) expresion -> . LPAREN expresion RPAREN
    (54) expresion -> . valor
    (55) expresion -> . expresion operadoresMat expresion
    (56) expresion -> . expresion operadoresLog expresion
    (41) valor -> . ID
    (42) valor -> . number
    (43) valor -> . STRING
    (44) valor -> . TRUE
    (45) valor -> . FALSE
    (46) valor -> . NULL
    (47) valor -> . NOT valor
    (70) number -> . INTV
    (71) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 97
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 69

    (65) operadoresMat -> MINUS .

    LPAREN          reduce using rule 65 (operadoresMat -> MINUS .)
    ID              reduce using rule 65 (operadoresMat -> MINUS .)
    STRING          reduce using rule 65 (operadoresMat -> MINUS .)
    TRUE            reduce using rule 65 (operadoresMat -> MINUS .)
    FALSE           reduce using rule 65 (operadoresMat -> MINUS .)
    NULL            reduce using rule 65 (operadoresMat -> MINUS .)
    NOT             reduce using rule 65 (operadoresMat -> MINUS .)
    INTV            reduce using rule 65 (operadoresMat -> MINUS .)
    FLOATV          reduce using rule 65 (operadoresMat -> MINUS .)


state 70

    (66) operadoresMat -> PLUS .

    LPAREN          reduce using rule 66 (operadoresMat -> PLUS .)
    ID              reduce using rule 66 (operadoresMat -> PLUS .)
    STRING          reduce using rule 66 (operadoresMat -> PLUS .)
    TRUE            reduce using rule 66 (operadoresMat -> PLUS .)
    FALSE           reduce using rule 66 (operadoresMat -> PLUS .)
    NULL            reduce using rule 66 (operadoresMat -> PLUS .)
    NOT             reduce using rule 66 (operadoresMat -> PLUS .)
    INTV            reduce using rule 66 (operadoresMat -> PLUS .)
    FLOATV          reduce using rule 66 (operadoresMat -> PLUS .)


state 71

    (67) operadoresMat -> TIMES .

    LPAREN          reduce using rule 67 (operadoresMat -> TIMES .)
    ID              reduce using rule 67 (operadoresMat -> TIMES .)
    STRING          reduce using rule 67 (operadoresMat -> TIMES .)
    TRUE            reduce using rule 67 (operadoresMat -> TIMES .)
    FALSE           reduce using rule 67 (operadoresMat -> TIMES .)
    NULL            reduce using rule 67 (operadoresMat -> TIMES .)
    NOT             reduce using rule 67 (operadoresMat -> TIMES .)
    INTV            reduce using rule 67 (operadoresMat -> TIMES .)
    FLOATV          reduce using rule 67 (operadoresMat -> TIMES .)


state 72

    (68) operadoresMat -> DIVIDE .

    LPAREN          reduce using rule 68 (operadoresMat -> DIVIDE .)
    ID              reduce using rule 68 (operadoresMat -> DIVIDE .)
    STRING          reduce using rule 68 (operadoresMat -> DIVIDE .)
    TRUE            reduce using rule 68 (operadoresMat -> DIVIDE .)
    FALSE           reduce using rule 68 (operadoresMat -> DIVIDE .)
    NULL            reduce using rule 68 (operadoresMat -> DIVIDE .)
    NOT             reduce using rule 68 (operadoresMat -> DIVIDE .)
    INTV            reduce using rule 68 (operadoresMat -> DIVIDE .)
    FLOATV          reduce using rule 68 (operadoresMat -> DIVIDE .)


state 73

    (69) operadoresMat -> MODULE .

    LPAREN          reduce using rule 69 (operadoresMat -> MODULE .)
    ID              reduce using rule 69 (operadoresMat -> MODULE .)
    STRING          reduce using rule 69 (operadoresMat -> MODULE .)
    TRUE            reduce using rule 69 (operadoresMat -> MODULE .)
    FALSE           reduce using rule 69 (operadoresMat -> MODULE .)
    NULL            reduce using rule 69 (operadoresMat -> MODULE .)
    NOT             reduce using rule 69 (operadoresMat -> MODULE .)
    INTV            reduce using rule 69 (operadoresMat -> MODULE .)
    FLOATV          reduce using rule 69 (operadoresMat -> MODULE .)


state 74

    (57) operadoresLog -> OR .

    LPAREN          reduce using rule 57 (operadoresLog -> OR .)
    ID              reduce using rule 57 (operadoresLog -> OR .)
    STRING          reduce using rule 57 (operadoresLog -> OR .)
    TRUE            reduce using rule 57 (operadoresLog -> OR .)
    FALSE           reduce using rule 57 (operadoresLog -> OR .)
    NULL            reduce using rule 57 (operadoresLog -> OR .)
    NOT             reduce using rule 57 (operadoresLog -> OR .)
    INTV            reduce using rule 57 (operadoresLog -> OR .)
    FLOATV          reduce using rule 57 (operadoresLog -> OR .)


state 75

    (58) operadoresLog -> AND .

    LPAREN          reduce using rule 58 (operadoresLog -> AND .)
    ID              reduce using rule 58 (operadoresLog -> AND .)
    STRING          reduce using rule 58 (operadoresLog -> AND .)
    TRUE            reduce using rule 58 (operadoresLog -> AND .)
    FALSE           reduce using rule 58 (operadoresLog -> AND .)
    NULL            reduce using rule 58 (operadoresLog -> AND .)
    NOT             reduce using rule 58 (operadoresLog -> AND .)
    INTV            reduce using rule 58 (operadoresLog -> AND .)
    FLOATV          reduce using rule 58 (operadoresLog -> AND .)


state 76

    (59) operadoresLog -> EQUALS .

    LPAREN          reduce using rule 59 (operadoresLog -> EQUALS .)
    ID              reduce using rule 59 (operadoresLog -> EQUALS .)
    STRING          reduce using rule 59 (operadoresLog -> EQUALS .)
    TRUE            reduce using rule 59 (operadoresLog -> EQUALS .)
    FALSE           reduce using rule 59 (operadoresLog -> EQUALS .)
    NULL            reduce using rule 59 (operadoresLog -> EQUALS .)
    NOT             reduce using rule 59 (operadoresLog -> EQUALS .)
    INTV            reduce using rule 59 (operadoresLog -> EQUALS .)
    FLOATV          reduce using rule 59 (operadoresLog -> EQUALS .)


state 77

    (60) operadoresLog -> NOTEQUALS .

    LPAREN          reduce using rule 60 (operadoresLog -> NOTEQUALS .)
    ID              reduce using rule 60 (operadoresLog -> NOTEQUALS .)
    STRING          reduce using rule 60 (operadoresLog -> NOTEQUALS .)
    TRUE            reduce using rule 60 (operadoresLog -> NOTEQUALS .)
    FALSE           reduce using rule 60 (operadoresLog -> NOTEQUALS .)
    NULL            reduce using rule 60 (operadoresLog -> NOTEQUALS .)
    NOT             reduce using rule 60 (operadoresLog -> NOTEQUALS .)
    INTV            reduce using rule 60 (operadoresLog -> NOTEQUALS .)
    FLOATV          reduce using rule 60 (operadoresLog -> NOTEQUALS .)


state 78

    (61) operadoresLog -> GREATER .
    (63) operadoresLog -> GREATER . ASSIGN

    LPAREN          reduce using rule 61 (operadoresLog -> GREATER .)
    ID              reduce using rule 61 (operadoresLog -> GREATER .)
    STRING          reduce using rule 61 (operadoresLog -> GREATER .)
    TRUE            reduce using rule 61 (operadoresLog -> GREATER .)
    FALSE           reduce using rule 61 (operadoresLog -> GREATER .)
    NULL            reduce using rule 61 (operadoresLog -> GREATER .)
    NOT             reduce using rule 61 (operadoresLog -> GREATER .)
    INTV            reduce using rule 61 (operadoresLog -> GREATER .)
    FLOATV          reduce using rule 61 (operadoresLog -> GREATER .)
    ASSIGN          shift and go to state 98


state 79

    (62) operadoresLog -> LOWER .
    (64) operadoresLog -> LOWER . ASSIGN

    LPAREN          reduce using rule 62 (operadoresLog -> LOWER .)
    ID              reduce using rule 62 (operadoresLog -> LOWER .)
    STRING          reduce using rule 62 (operadoresLog -> LOWER .)
    TRUE            reduce using rule 62 (operadoresLog -> LOWER .)
    FALSE           reduce using rule 62 (operadoresLog -> LOWER .)
    NULL            reduce using rule 62 (operadoresLog -> LOWER .)
    NOT             reduce using rule 62 (operadoresLog -> LOWER .)
    INTV            reduce using rule 62 (operadoresLog -> LOWER .)
    FLOATV          reduce using rule 62 (operadoresLog -> LOWER .)
    ASSIGN          shift and go to state 99


state 80

    (53) expresion -> LPAREN expresion . RPAREN
    (55) expresion -> expresion . operadoresMat expresion
    (56) expresion -> expresion . operadoresLog expresion
    (65) operadoresMat -> . MINUS
    (66) operadoresMat -> . PLUS
    (67) operadoresMat -> . TIMES
    (68) operadoresMat -> . DIVIDE
    (69) operadoresMat -> . MODULE
    (57) operadoresLog -> . OR
    (58) operadoresLog -> . AND
    (59) operadoresLog -> . EQUALS
    (60) operadoresLog -> . NOTEQUALS
    (61) operadoresLog -> . GREATER
    (62) operadoresLog -> . LOWER
    (63) operadoresLog -> . GREATER ASSIGN
    (64) operadoresLog -> . LOWER ASSIGN

    RPAREN          shift and go to state 100
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 81

    (47) valor -> NOT valor .

    RSBRACKET       reduce using rule 47 (valor -> NOT valor .)
    MINUS           reduce using rule 47 (valor -> NOT valor .)
    PLUS            reduce using rule 47 (valor -> NOT valor .)
    TIMES           reduce using rule 47 (valor -> NOT valor .)
    DIVIDE          reduce using rule 47 (valor -> NOT valor .)
    MODULE          reduce using rule 47 (valor -> NOT valor .)
    OR              reduce using rule 47 (valor -> NOT valor .)
    AND             reduce using rule 47 (valor -> NOT valor .)
    EQUALS          reduce using rule 47 (valor -> NOT valor .)
    NOTEQUALS       reduce using rule 47 (valor -> NOT valor .)
    GREATER         reduce using rule 47 (valor -> NOT valor .)
    LOWER           reduce using rule 47 (valor -> NOT valor .)
    FUNCTION        reduce using rule 47 (valor -> NOT valor .)
    ID              reduce using rule 47 (valor -> NOT valor .)
    IF              reduce using rule 47 (valor -> NOT valor .)
    ELSE            reduce using rule 47 (valor -> NOT valor .)
    PRINTLN         reduce using rule 47 (valor -> NOT valor .)
    VAR             reduce using rule 47 (valor -> NOT valor .)
    VAL             reduce using rule 47 (valor -> NOT valor .)
    WHILE           reduce using rule 47 (valor -> NOT valor .)
    FOR             reduce using rule 47 (valor -> NOT valor .)
    $end            reduce using rule 47 (valor -> NOT valor .)
    RCBRACKET       reduce using rule 47 (valor -> NOT valor .)
    RETURN          reduce using rule 47 (valor -> NOT valor .)
    RPAREN          reduce using rule 47 (valor -> NOT valor .)
    ,               reduce using rule 47 (valor -> NOT valor .)


state 82

    (24) llamada -> ID LPAREN args RPAREN .

    FUNCTION        reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    ID              reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    IF              reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    ELSE            reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    PRINTLN         reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    VAR             reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    VAL             reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    WHILE           reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    FOR             reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    $end            reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    RCBRACKET       reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)
    RETURN          reduce using rule 24 (llamada -> ID LPAREN args RPAREN .)


state 83

    (40) args -> args , . args
    (39) args -> . expresion
    (40) args -> . args , args
    (53) expresion -> . LPAREN expresion RPAREN
    (54) expresion -> . valor
    (55) expresion -> . expresion operadoresMat expresion
    (56) expresion -> . expresion operadoresLog expresion
    (41) valor -> . ID
    (42) valor -> . number
    (43) valor -> . STRING
    (44) valor -> . TRUE
    (45) valor -> . FALSE
    (46) valor -> . NULL
    (47) valor -> . NOT valor
    (70) number -> . INTV
    (71) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    args                           shift and go to state 101
    expresion                      shift and go to state 55
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 84

    (26) llamada -> ID . ID LPAREN . args RPAREN
    (39) args -> . expresion
    (40) args -> . args , args
    (53) expresion -> . LPAREN expresion RPAREN
    (54) expresion -> . valor
    (55) expresion -> . expresion operadoresMat expresion
    (56) expresion -> . expresion operadoresLog expresion
    (41) valor -> . ID
    (42) valor -> . number
    (43) valor -> . STRING
    (44) valor -> . TRUE
    (45) valor -> . FALSE
    (46) valor -> . NULL
    (47) valor -> . NOT valor
    (70) number -> . INTV
    (71) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    args                           shift and go to state 102
    expresion                      shift and go to state 55
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 85

    (51) asignacion -> declarador ID ASSIGN expresion .
    (55) expresion -> expresion . operadoresMat expresion
    (56) expresion -> expresion . operadoresLog expresion
    (65) operadoresMat -> . MINUS
    (66) operadoresMat -> . PLUS
    (67) operadoresMat -> . TIMES
    (68) operadoresMat -> . DIVIDE
    (69) operadoresMat -> . MODULE
    (57) operadoresLog -> . OR
    (58) operadoresLog -> . AND
    (59) operadoresLog -> . EQUALS
    (60) operadoresLog -> . NOTEQUALS
    (61) operadoresLog -> . GREATER
    (62) operadoresLog -> . LOWER
    (63) operadoresLog -> . GREATER ASSIGN
    (64) operadoresLog -> . LOWER ASSIGN

    FUNCTION        reduce using rule 51 (asignacion -> declarador ID ASSIGN expresion .)
    ID              reduce using rule 51 (asignacion -> declarador ID ASSIGN expresion .)
    IF              reduce using rule 51 (asignacion -> declarador ID ASSIGN expresion .)
    ELSE            reduce using rule 51 (asignacion -> declarador ID ASSIGN expresion .)
    PRINTLN         reduce using rule 51 (asignacion -> declarador ID ASSIGN expresion .)
    VAR             reduce using rule 51 (asignacion -> declarador ID ASSIGN expresion .)
    VAL             reduce using rule 51 (asignacion -> declarador ID ASSIGN expresion .)
    WHILE           reduce using rule 51 (asignacion -> declarador ID ASSIGN expresion .)
    FOR             reduce using rule 51 (asignacion -> declarador ID ASSIGN expresion .)
    $end            reduce using rule 51 (asignacion -> declarador ID ASSIGN expresion .)
    RCBRACKET       reduce using rule 51 (asignacion -> declarador ID ASSIGN expresion .)
    RETURN          reduce using rule 51 (asignacion -> declarador ID ASSIGN expresion .)
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 86

    (15) estructuraControl -> IF LPAREN expresion RPAREN . instrucciones
    (10) instrucciones -> . LCBRACKET cuerpo RCBRACKET
    (11) instrucciones -> . sentencia
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (50) asignacion -> . ID ASSIGN expresion
    (51) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (26) llamada -> . ID . ID LPAREN args RPAREN
    (52) declaracion -> . declarador ID
    (48) declarador -> . VAR
    (49) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    LCBRACKET       shift and go to state 31
    ID              shift and go to state 33
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    instrucciones                  shift and go to state 103
    sentencia                      shift and go to state 32
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 87

    (10) instrucciones -> LCBRACKET cuerpo RCBRACKET .

    FUNCTION        reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    ID              reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    IF              reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    ELSE            reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    PRINTLN         reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    VAR             reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    VAL             reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    WHILE           reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    FOR             reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    $end            reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    RCBRACKET       reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)
    RETURN          reduce using rule 10 (instrucciones -> LCBRACKET cuerpo RCBRACKET .)


state 88

    (23) llamada -> PRINTLN LPAREN expresion RPAREN .

    FUNCTION        reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    ID              reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    IF              reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    ELSE            reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    PRINTLN         reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    VAR             reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    VAL             reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    WHILE           reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    FOR             reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    $end            reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    RCBRACKET       reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)
    RETURN          reduce using rule 23 (llamada -> PRINTLN LPAREN expresion RPAREN .)


state 89

    (19) while -> WHILE LPAREN expresion RPAREN .

    LCBRACKET       reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)
    ID              reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)
    IF              reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)
    ELSE            reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)
    PRINTLN         reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)
    VAR             reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)
    VAL             reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)
    WHILE           reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)
    FOR             reduce using rule 19 (while -> WHILE LPAREN expresion RPAREN .)


state 90

    (20) for -> FOR LPAREN ID IN . ID RPAREN

    ID              shift and go to state 104


state 91

    (37) params -> ID : . dato
    (28) dato -> . INT
    (29) dato -> . FLOAT
    (30) dato -> . BYTE
    (31) dato -> . SHORT
    (32) dato -> . DOUBLE
    (33) dato -> . ID
    (34) dato -> . LONG
    (35) dato -> . CHAR
    (36) dato -> . BOOLEAN

    INT             shift and go to state 107
    FLOAT           shift and go to state 108
    BYTE            shift and go to state 109
    SHORT           shift and go to state 110
    DOUBLE          shift and go to state 111
    ID              shift and go to state 105
    LONG            shift and go to state 112
    CHAR            shift and go to state 113
    BOOLEAN         shift and go to state 114

    dato                           shift and go to state 106

state 92

    (21) function -> FUNCTION ID LPAREN params RPAREN . instruccionesF
    (12) instruccionesF -> . LCBRACKET cuerpo retorno RCBRACKET
    (13) instruccionesF -> . LCBRACKET retorno RCBRACKET

    LCBRACKET       shift and go to state 95

    instruccionesF                 shift and go to state 115

state 93

    (38) params -> params , . params
    (37) params -> . ID : dato
    (38) params -> . params , params

    ID              shift and go to state 63

    params                         shift and go to state 116

state 94

    (22) function -> FUNCTION ID LPAREN RPAREN instruccionesF .

    FUNCTION        reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    ID              reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    IF              reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    ELSE            reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    PRINTLN         reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    VAR             reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    VAL             reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    WHILE           reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    FOR             reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    $end            reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    RCBRACKET       reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)
    RETURN          reduce using rule 22 (function -> FUNCTION ID LPAREN RPAREN instruccionesF .)


state 95

    (12) instruccionesF -> LCBRACKET . cuerpo retorno RCBRACKET
    (13) instruccionesF -> LCBRACKET . retorno RCBRACKET
    (1) cuerpo -> . sentencia
    (2) cuerpo -> . function
    (3) cuerpo -> . sentencia cuerpo
    (4) cuerpo -> . function cuerpo
    (14) retorno -> . RETURN expresion
    (5) sentencia -> . asignacion
    (6) sentencia -> . estructuraControl
    (7) sentencia -> . bucles
    (8) sentencia -> . llamada
    (9) sentencia -> . declaracion
    (21) function -> . FUNCTION ID LPAREN params RPAREN instruccionesF
    (22) function -> . FUNCTION ID LPAREN RPAREN instruccionesF
    (27) function -> . ID LSBRACKET expresion RSBRACKET
    (50) asignacion -> . ID ASSIGN expresion
    (51) asignacion -> . declarador ID ASSIGN expresion
    (15) estructuraControl -> . IF LPAREN expresion RPAREN instrucciones
    (16) estructuraControl -> . ELSE instrucciones
    (17) bucles -> . while instrucciones
    (18) bucles -> . for instrucciones
    (23) llamada -> . PRINTLN LPAREN expresion RPAREN
    (24) llamada -> . ID LPAREN args RPAREN
    (25) llamada -> . ID LPAREN RPAREN
    (26) llamada -> . ID . ID LPAREN args RPAREN
    (52) declaracion -> . declarador ID
    (48) declarador -> . VAR
    (49) declarador -> . VAL
    (19) while -> . WHILE LPAREN expresion RPAREN
    (20) for -> . FOR LPAREN ID IN ID RPAREN

    RETURN          shift and go to state 119
    FUNCTION        shift and go to state 9
    ID              shift and go to state 10
    IF              shift and go to state 12
    ELSE            shift and go to state 13
    PRINTLN         shift and go to state 16
    VAR             shift and go to state 17
    VAL             shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20

    cuerpo                         shift and go to state 117
    retorno                        shift and go to state 118
    sentencia                      shift and go to state 2
    function                       shift and go to state 3
    asignacion                     shift and go to state 4
    estructuraControl              shift and go to state 5
    bucles                         shift and go to state 6
    llamada                        shift and go to state 7
    declaracion                    shift and go to state 8
    declarador                     shift and go to state 11
    while                          shift and go to state 14
    for                            shift and go to state 15

state 96

    (55) expresion -> expresion operadoresMat expresion .
    (55) expresion -> expresion . operadoresMat expresion
    (56) expresion -> expresion . operadoresLog expresion
    (65) operadoresMat -> . MINUS
    (66) operadoresMat -> . PLUS
    (67) operadoresMat -> . TIMES
    (68) operadoresMat -> . DIVIDE
    (69) operadoresMat -> . MODULE
    (57) operadoresLog -> . OR
    (58) operadoresLog -> . AND
    (59) operadoresLog -> . EQUALS
    (60) operadoresLog -> . NOTEQUALS
    (61) operadoresLog -> . GREATER
    (62) operadoresLog -> . LOWER
    (63) operadoresLog -> . GREATER ASSIGN
    (64) operadoresLog -> . LOWER ASSIGN

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
    RSBRACKET       reduce using rule 55 (expresion -> expresion operadoresMat expresion .)
    FUNCTION        reduce using rule 55 (expresion -> expresion operadoresMat expresion .)
    ID              reduce using rule 55 (expresion -> expresion operadoresMat expresion .)
    IF              reduce using rule 55 (expresion -> expresion operadoresMat expresion .)
    ELSE            reduce using rule 55 (expresion -> expresion operadoresMat expresion .)
    PRINTLN         reduce using rule 55 (expresion -> expresion operadoresMat expresion .)
    VAR             reduce using rule 55 (expresion -> expresion operadoresMat expresion .)
    VAL             reduce using rule 55 (expresion -> expresion operadoresMat expresion .)
    WHILE           reduce using rule 55 (expresion -> expresion operadoresMat expresion .)
    FOR             reduce using rule 55 (expresion -> expresion operadoresMat expresion .)
    $end            reduce using rule 55 (expresion -> expresion operadoresMat expresion .)
    RCBRACKET       reduce using rule 55 (expresion -> expresion operadoresMat expresion .)
    RETURN          reduce using rule 55 (expresion -> expresion operadoresMat expresion .)
    RPAREN          reduce using rule 55 (expresion -> expresion operadoresMat expresion .)
    ,               reduce using rule 55 (expresion -> expresion operadoresMat expresion .)
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

  ! MINUS           [ reduce using rule 55 (expresion -> expresion operadoresMat expresion .) ]
  ! PLUS            [ reduce using rule 55 (expresion -> expresion operadoresMat expresion .) ]
  ! TIMES           [ reduce using rule 55 (expresion -> expresion operadoresMat expresion .) ]
  ! DIVIDE          [ reduce using rule 55 (expresion -> expresion operadoresMat expresion .) ]
  ! MODULE          [ reduce using rule 55 (expresion -> expresion operadoresMat expresion .) ]
  ! OR              [ reduce using rule 55 (expresion -> expresion operadoresMat expresion .) ]
  ! AND             [ reduce using rule 55 (expresion -> expresion operadoresMat expresion .) ]
  ! EQUALS          [ reduce using rule 55 (expresion -> expresion operadoresMat expresion .) ]
  ! NOTEQUALS       [ reduce using rule 55 (expresion -> expresion operadoresMat expresion .) ]
  ! GREATER         [ reduce using rule 55 (expresion -> expresion operadoresMat expresion .) ]
  ! LOWER           [ reduce using rule 55 (expresion -> expresion operadoresMat expresion .) ]

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 97

    (56) expresion -> expresion operadoresLog expresion .
    (55) expresion -> expresion . operadoresMat expresion
    (56) expresion -> expresion . operadoresLog expresion
    (65) operadoresMat -> . MINUS
    (66) operadoresMat -> . PLUS
    (67) operadoresMat -> . TIMES
    (68) operadoresMat -> . DIVIDE
    (69) operadoresMat -> . MODULE
    (57) operadoresLog -> . OR
    (58) operadoresLog -> . AND
    (59) operadoresLog -> . EQUALS
    (60) operadoresLog -> . NOTEQUALS
    (61) operadoresLog -> . GREATER
    (62) operadoresLog -> . LOWER
    (63) operadoresLog -> . GREATER ASSIGN
    (64) operadoresLog -> . LOWER ASSIGN

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
    RSBRACKET       reduce using rule 56 (expresion -> expresion operadoresLog expresion .)
    FUNCTION        reduce using rule 56 (expresion -> expresion operadoresLog expresion .)
    ID              reduce using rule 56 (expresion -> expresion operadoresLog expresion .)
    IF              reduce using rule 56 (expresion -> expresion operadoresLog expresion .)
    ELSE            reduce using rule 56 (expresion -> expresion operadoresLog expresion .)
    PRINTLN         reduce using rule 56 (expresion -> expresion operadoresLog expresion .)
    VAR             reduce using rule 56 (expresion -> expresion operadoresLog expresion .)
    VAL             reduce using rule 56 (expresion -> expresion operadoresLog expresion .)
    WHILE           reduce using rule 56 (expresion -> expresion operadoresLog expresion .)
    FOR             reduce using rule 56 (expresion -> expresion operadoresLog expresion .)
    $end            reduce using rule 56 (expresion -> expresion operadoresLog expresion .)
    RCBRACKET       reduce using rule 56 (expresion -> expresion operadoresLog expresion .)
    RETURN          reduce using rule 56 (expresion -> expresion operadoresLog expresion .)
    RPAREN          reduce using rule 56 (expresion -> expresion operadoresLog expresion .)
    ,               reduce using rule 56 (expresion -> expresion operadoresLog expresion .)
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

  ! MINUS           [ reduce using rule 56 (expresion -> expresion operadoresLog expresion .) ]
  ! PLUS            [ reduce using rule 56 (expresion -> expresion operadoresLog expresion .) ]
  ! TIMES           [ reduce using rule 56 (expresion -> expresion operadoresLog expresion .) ]
  ! DIVIDE          [ reduce using rule 56 (expresion -> expresion operadoresLog expresion .) ]
  ! MODULE          [ reduce using rule 56 (expresion -> expresion operadoresLog expresion .) ]
  ! OR              [ reduce using rule 56 (expresion -> expresion operadoresLog expresion .) ]
  ! AND             [ reduce using rule 56 (expresion -> expresion operadoresLog expresion .) ]
  ! EQUALS          [ reduce using rule 56 (expresion -> expresion operadoresLog expresion .) ]
  ! NOTEQUALS       [ reduce using rule 56 (expresion -> expresion operadoresLog expresion .) ]
  ! GREATER         [ reduce using rule 56 (expresion -> expresion operadoresLog expresion .) ]
  ! LOWER           [ reduce using rule 56 (expresion -> expresion operadoresLog expresion .) ]

    operadoresLog                  shift and go to state 68
    operadoresMat                  shift and go to state 67

state 98

    (63) operadoresLog -> GREATER ASSIGN .

    LPAREN          reduce using rule 63 (operadoresLog -> GREATER ASSIGN .)
    ID              reduce using rule 63 (operadoresLog -> GREATER ASSIGN .)
    STRING          reduce using rule 63 (operadoresLog -> GREATER ASSIGN .)
    TRUE            reduce using rule 63 (operadoresLog -> GREATER ASSIGN .)
    FALSE           reduce using rule 63 (operadoresLog -> GREATER ASSIGN .)
    NULL            reduce using rule 63 (operadoresLog -> GREATER ASSIGN .)
    NOT             reduce using rule 63 (operadoresLog -> GREATER ASSIGN .)
    INTV            reduce using rule 63 (operadoresLog -> GREATER ASSIGN .)
    FLOATV          reduce using rule 63 (operadoresLog -> GREATER ASSIGN .)


state 99

    (64) operadoresLog -> LOWER ASSIGN .

    LPAREN          reduce using rule 64 (operadoresLog -> LOWER ASSIGN .)
    ID              reduce using rule 64 (operadoresLog -> LOWER ASSIGN .)
    STRING          reduce using rule 64 (operadoresLog -> LOWER ASSIGN .)
    TRUE            reduce using rule 64 (operadoresLog -> LOWER ASSIGN .)
    FALSE           reduce using rule 64 (operadoresLog -> LOWER ASSIGN .)
    NULL            reduce using rule 64 (operadoresLog -> LOWER ASSIGN .)
    NOT             reduce using rule 64 (operadoresLog -> LOWER ASSIGN .)
    INTV            reduce using rule 64 (operadoresLog -> LOWER ASSIGN .)
    FLOATV          reduce using rule 64 (operadoresLog -> LOWER ASSIGN .)


state 100

    (53) expresion -> LPAREN expresion RPAREN .

    RSBRACKET       reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    TIMES           reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    MODULE          reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    OR              reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    AND             reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    EQUALS          reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    NOTEQUALS       reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    GREATER         reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    LOWER           reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    FUNCTION        reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    ID              reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    IF              reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    ELSE            reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    PRINTLN         reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    VAR             reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    VAL             reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    WHILE           reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    FOR             reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    $end            reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    RCBRACKET       reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    RETURN          reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)
    ,               reduce using rule 53 (expresion -> LPAREN expresion RPAREN .)


state 101

    (40) args -> args , args .
    (40) args -> args . , args

  ! shift/reduce conflict for , resolved as shift
    RPAREN          reduce using rule 40 (args -> args , args .)
    ,               shift and go to state 83

  ! ,               [ reduce using rule 40 (args -> args , args .) ]


state 102

    (26) llamada -> ID . ID LPAREN args . RPAREN
    (40) args -> args . , args

    RPAREN          shift and go to state 120
    ,               shift and go to state 83


state 103

    (15) estructuraControl -> IF LPAREN expresion RPAREN instrucciones .

    FUNCTION        reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    ID              reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    IF              reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    ELSE            reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    PRINTLN         reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    VAR             reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    VAL             reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    WHILE           reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    FOR             reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    $end            reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    RCBRACKET       reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)
    RETURN          reduce using rule 15 (estructuraControl -> IF LPAREN expresion RPAREN instrucciones .)


state 104

    (20) for -> FOR LPAREN ID IN ID . RPAREN

    RPAREN          shift and go to state 121


state 105

    (33) dato -> ID .

    RPAREN          reduce using rule 33 (dato -> ID .)
    ,               reduce using rule 33 (dato -> ID .)


state 106

    (37) params -> ID : dato .

    RPAREN          reduce using rule 37 (params -> ID : dato .)
    ,               reduce using rule 37 (params -> ID : dato .)


state 107

    (28) dato -> INT .

    RPAREN          reduce using rule 28 (dato -> INT .)
    ,               reduce using rule 28 (dato -> INT .)


state 108

    (29) dato -> FLOAT .

    RPAREN          reduce using rule 29 (dato -> FLOAT .)
    ,               reduce using rule 29 (dato -> FLOAT .)


state 109

    (30) dato -> BYTE .

    RPAREN          reduce using rule 30 (dato -> BYTE .)
    ,               reduce using rule 30 (dato -> BYTE .)


state 110

    (31) dato -> SHORT .

    RPAREN          reduce using rule 31 (dato -> SHORT .)
    ,               reduce using rule 31 (dato -> SHORT .)


state 111

    (32) dato -> DOUBLE .

    RPAREN          reduce using rule 32 (dato -> DOUBLE .)
    ,               reduce using rule 32 (dato -> DOUBLE .)


state 112

    (34) dato -> LONG .

    RPAREN          reduce using rule 34 (dato -> LONG .)
    ,               reduce using rule 34 (dato -> LONG .)


state 113

    (35) dato -> CHAR .

    RPAREN          reduce using rule 35 (dato -> CHAR .)
    ,               reduce using rule 35 (dato -> CHAR .)


state 114

    (36) dato -> BOOLEAN .

    RPAREN          reduce using rule 36 (dato -> BOOLEAN .)
    ,               reduce using rule 36 (dato -> BOOLEAN .)


state 115

    (21) function -> FUNCTION ID LPAREN params RPAREN instruccionesF .

    FUNCTION        reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    ID              reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    IF              reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    ELSE            reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    PRINTLN         reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    VAR             reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    VAL             reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    WHILE           reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    FOR             reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    $end            reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    RCBRACKET       reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)
    RETURN          reduce using rule 21 (function -> FUNCTION ID LPAREN params RPAREN instruccionesF .)


state 116

    (38) params -> params , params .
    (38) params -> params . , params

  ! shift/reduce conflict for , resolved as shift
    RPAREN          reduce using rule 38 (params -> params , params .)
    ,               shift and go to state 93

  ! ,               [ reduce using rule 38 (params -> params , params .) ]


state 117

    (12) instruccionesF -> LCBRACKET cuerpo . retorno RCBRACKET
    (14) retorno -> . RETURN expresion

    RETURN          shift and go to state 119

    retorno                        shift and go to state 122

state 118

    (13) instruccionesF -> LCBRACKET retorno . RCBRACKET

    RCBRACKET       shift and go to state 123


state 119

    (14) retorno -> RETURN . expresion
    (53) expresion -> . LPAREN expresion RPAREN
    (54) expresion -> . valor
    (55) expresion -> . expresion operadoresMat expresion
    (56) expresion -> . expresion operadoresLog expresion
    (41) valor -> . ID
    (42) valor -> . number
    (43) valor -> . STRING
    (44) valor -> . TRUE
    (45) valor -> . FALSE
    (46) valor -> . NULL
    (47) valor -> . NOT valor
    (70) number -> . INTV
    (71) number -> . FLOATV

    LPAREN          shift and go to state 42
    ID              shift and go to state 40
    STRING          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    NULL            shift and go to state 48
    NOT             shift and go to state 49
    INTV            shift and go to state 50
    FLOATV          shift and go to state 51

    expresion                      shift and go to state 124
    valor                          shift and go to state 43
    number                         shift and go to state 44

state 120

    (26) llamada -> ID . ID LPAREN args RPAREN .

    FUNCTION        reduce using rule 26 (llamada -> ID . ID LPAREN args RPAREN .)
    ID              reduce using rule 26 (llamada -> ID . ID LPAREN args RPAREN .)
    IF              reduce using rule 26 (llamada -> ID . ID LPAREN args RPAREN .)
    ELSE            reduce using rule 26 (llamada -> ID . ID LPAREN args RPAREN .)
    PRINTLN         reduce using rule 26 (llamada -> ID . ID LPAREN args RPAREN .)
    VAR             reduce using rule 26 (llamada -> ID . ID LPAREN args RPAREN .)
    VAL             reduce using rule 26 (llamada -> ID . ID LPAREN args RPAREN .)
    WHILE           reduce using rule 26 (llamada -> ID . ID LPAREN args RPAREN .)
    FOR             reduce using rule 26 (llamada -> ID . ID LPAREN args RPAREN .)
    $end            reduce using rule 26 (llamada -> ID . ID LPAREN args RPAREN .)
    RCBRACKET       reduce using rule 26 (llamada -> ID . ID LPAREN args RPAREN .)
    RETURN          reduce using rule 26 (llamada -> ID . ID LPAREN args RPAREN .)


state 121

    (20) for -> FOR LPAREN ID IN ID RPAREN .

    LCBRACKET       reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)
    ID              reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)
    IF              reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)
    ELSE            reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)
    PRINTLN         reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)
    VAR             reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)
    VAL             reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)
    WHILE           reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)
    FOR             reduce using rule 20 (for -> FOR LPAREN ID IN ID RPAREN .)


state 122

    (12) instruccionesF -> LCBRACKET cuerpo retorno . RCBRACKET

    RCBRACKET       shift and go to state 125


state 123

    (13) instruccionesF -> LCBRACKET retorno RCBRACKET .

    FUNCTION        reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    ID              reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    IF              reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    ELSE            reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    PRINTLN         reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    VAR             reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    VAL             reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    WHILE           reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    FOR             reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    $end            reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    RCBRACKET       reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)
    RETURN          reduce using rule 13 (instruccionesF -> LCBRACKET retorno RCBRACKET .)


state 124

    (14) retorno -> RETURN expresion .
    (55) expresion -> expresion . operadoresMat expresion
    (56) expresion -> expresion . operadoresLog expresion
    (65) operadoresMat -> . MINUS
    (66) operadoresMat -> . PLUS
    (67) operadoresMat -> . TIMES
    (68) operadoresMat -> . DIVIDE
    (69) operadoresMat -> . MODULE
    (57) operadoresLog -> . OR
    (58) operadoresLog -> . AND
    (59) operadoresLog -> . EQUALS
    (60) operadoresLog -> . NOTEQUALS
    (61) operadoresLog -> . GREATER
    (62) operadoresLog -> . LOWER
    (63) operadoresLog -> . GREATER ASSIGN
    (64) operadoresLog -> . LOWER ASSIGN

    RCBRACKET       reduce using rule 14 (retorno -> RETURN expresion .)
    MINUS           shift and go to state 69
    PLUS            shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73
    OR              shift and go to state 74
    AND             shift and go to state 75
    EQUALS          shift and go to state 76
    NOTEQUALS       shift and go to state 77
    GREATER         shift and go to state 78
    LOWER           shift and go to state 79

    operadoresMat                  shift and go to state 67
    operadoresLog                  shift and go to state 68

state 125

    (12) instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .

    FUNCTION        reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    ID              reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    IF              reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    ELSE            reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    PRINTLN         reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    VAR             reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    VAL             reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    WHILE           reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    FOR             reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    $end            reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    RCBRACKET       reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)
    RETURN          reduce using rule 12 (instruccionesF -> LCBRACKET cuerpo retorno RCBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 96 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 96 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 96 resolved as shift
WARNING: shift/reduce conflict for OR in state 96 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 96 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 96 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 97 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 97 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 97 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 97 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 97 resolved as shift
WARNING: shift/reduce conflict for , in state 101 resolved as shift
WARNING: shift/reduce conflict for , in state 116 resolved as shift
